
Timer_example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000206  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000846  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000688  00000000  00000000  00000b12  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000396  00000000  00000000  0000119a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c4  00000000  00000000  00001530  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000399  00000000  00000000  000015f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000023d  00000000  00000000  0000198d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001bca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a6 00 	call	0x14c	; 0x14c <main>
  64:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <counter_init>:
	}
}
void counter_init()
{

	DDRB=DDRB&~(1<<0);
  6c:	b8 98       	cbi	0x17, 0	; 23
	TCNT0=253;//0!='0'
  6e:	8d ef       	ldi	r24, 0xFD	; 253
  70:	82 bf       	out	0x32, r24	; 50
	TCCR0=0x06;
  72:	86 e0       	ldi	r24, 0x06	; 6
  74:	83 bf       	out	0x33, r24	; 51
  76:	08 95       	ret

00000078 <lcd_data_enable_to_write>:
	PORTA=((x<<4)&0xf0); //lower 4 bit
	lcd_data_enable_to_write();
}
void lcd_data_enable_to_write()
{
	PORTA=PORTA |(1<<0);//RS=0;
  78:	d8 9a       	sbi	0x1b, 0	; 27
	PORTA=PORTA&~(1<<1);//RW=0;
  7a:	d9 98       	cbi	0x1b, 1	; 27
	PORTA=PORTA |(1<<2);//EN=1;
  7c:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7e:	8f ec       	ldi	r24, 0xCF	; 207
  80:	97 e0       	ldi	r25, 0x07	; 7
  82:	01 97       	sbiw	r24, 0x01	; 1
  84:	f1 f7       	brne	.-4      	; 0x82 <lcd_data_enable_to_write+0xa>
  86:	00 c0       	rjmp	.+0      	; 0x88 <lcd_data_enable_to_write+0x10>
  88:	00 00       	nop
	_delay_ms(1);
	PORTA=PORTA&~(1<<2);//EN=0;
  8a:	da 98       	cbi	0x1b, 2	; 27
  8c:	8f ec       	ldi	r24, 0xCF	; 207
  8e:	97 e0       	ldi	r25, 0x07	; 7
  90:	01 97       	sbiw	r24, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <lcd_data_enable_to_write+0x18>
  94:	00 c0       	rjmp	.+0      	; 0x96 <lcd_data_enable_to_write+0x1e>
  96:	00 00       	nop
  98:	08 95       	ret

0000009a <lcd_data>:
	lcd_command_enable_to_write();
	PORTA=((x<<4)&0xf0); //lower 4 bit
	lcd_command_enable_to_write();
}
void lcd_data(char x)
{
  9a:	cf 93       	push	r28
  9c:	c8 2f       	mov	r28, r24
	PORTA=(x&0xf0);  //upper 4 bit
  9e:	80 7f       	andi	r24, 0xF0	; 240
  a0:	8b bb       	out	0x1b, r24	; 27
	lcd_data_enable_to_write();
  a2:	0e 94 3c 00 	call	0x78	; 0x78 <lcd_data_enable_to_write>
	PORTA=((x<<4)&0xf0); //lower 4 bit
  a6:	20 e1       	ldi	r18, 0x10	; 16
  a8:	c2 9f       	mul	r28, r18
  aa:	c0 01       	movw	r24, r0
  ac:	11 24       	eor	r1, r1
  ae:	8b bb       	out	0x1b, r24	; 27
	lcd_data_enable_to_write();
  b0:	0e 94 3c 00 	call	0x78	; 0x78 <lcd_data_enable_to_write>
}
  b4:	cf 91       	pop	r28
  b6:	08 95       	ret

000000b8 <lcd_command_enable_to_write>:
	_delay_ms(1);
}

void lcd_command_enable_to_write()
{
	PORTA=PORTA&~(1<<0);//RS=0;
  b8:	d8 98       	cbi	0x1b, 0	; 27
	PORTA=PORTA&~(1<<1);//RW=0;
  ba:	d9 98       	cbi	0x1b, 1	; 27
	PORTA=PORTA |(1<<2);//EN=1;
  bc:	da 9a       	sbi	0x1b, 2	; 27
	PORTA=PORTA&~(1<<2);//EN=0;
  be:	da 98       	cbi	0x1b, 2	; 27
  c0:	8f ec       	ldi	r24, 0xCF	; 207
  c2:	97 e0       	ldi	r25, 0x07	; 7
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <lcd_command_enable_to_write+0xc>
  c8:	00 c0       	rjmp	.+0      	; 0xca <lcd_command_enable_to_write+0x12>
  ca:	00 00       	nop
  cc:	08 95       	ret

000000ce <lcd_command>:
	lcd_command(0x28);
	lcd_command(0x0E);

}
void lcd_command(char x)
{
  ce:	cf 93       	push	r28
  d0:	c8 2f       	mov	r28, r24
	PORTA=(x&0xf0);  //upper 4 bit
  d2:	80 7f       	andi	r24, 0xF0	; 240
  d4:	8b bb       	out	0x1b, r24	; 27
	lcd_command_enable_to_write();
  d6:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_command_enable_to_write>
	PORTA=((x<<4)&0xf0); //lower 4 bit
  da:	20 e1       	ldi	r18, 0x10	; 16
  dc:	c2 9f       	mul	r28, r18
  de:	c0 01       	movw	r24, r0
  e0:	11 24       	eor	r1, r1
  e2:	8b bb       	out	0x1b, r24	; 27
	lcd_command_enable_to_write();
  e4:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_command_enable_to_write>
}
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <b2a>:
		b2a(TCNT0);
		
		}
}
void b2a(int a)//254
{
  ec:	ef 92       	push	r14
  ee:	ff 92       	push	r15
  f0:	0f 93       	push	r16
  f2:	1f 93       	push	r17
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	8c 01       	movw	r16, r24
	char pos=0x85;
  fa:	c5 e8       	ldi	r28, 0x85	; 133
	int a1,i;
	for(i=0;i<6;i++)//0//1//2
	{
		a1=a%10;//4//5//2
  fc:	0f 2e       	mov	r0, r31
  fe:	fa e0       	ldi	r31, 0x0A	; 10
 100:	ef 2e       	mov	r14, r31
 102:	f1 2c       	mov	r15, r1
 104:	f0 2d       	mov	r31, r0
		a=a/10;//25//2//0
 106:	c8 01       	movw	r24, r16
 108:	b7 01       	movw	r22, r14
 10a:	0e 94 af 00 	call	0x15e	; 0x15e <__divmodhi4>
 10e:	8b 01       	movw	r16, r22
 110:	d8 2f       	mov	r29, r24
		lcd_command(pos);
 112:	8c 2f       	mov	r24, r28
 114:	0e 94 67 00 	call	0xce	; 0xce <lcd_command>
		lcd_data(a1+48);//'4'//'5'//'2'
 118:	80 e3       	ldi	r24, 0x30	; 48
 11a:	8d 0f       	add	r24, r29
 11c:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_data>
		pos--;//81//80
 120:	c1 50       	subi	r28, 0x01	; 1
}
void b2a(int a)//254
{
	char pos=0x85;
	int a1,i;
	for(i=0;i<6;i++)//0//1//2
 122:	cf 37       	cpi	r28, 0x7F	; 127
 124:	81 f7       	brne	.-32     	; 0x106 <b2a+0x1a>
		a=a/10;//25//2//0
		lcd_command(pos);
		lcd_data(a1+48);//'4'//'5'//'2'
		pos--;//81//80
	}
}
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	1f 91       	pop	r17
 12c:	0f 91       	pop	r16
 12e:	ff 90       	pop	r15
 130:	ef 90       	pop	r14
 132:	08 95       	ret

00000134 <lcd_init>:
	TCNT0=253;//0!='0'
	TCCR0=0x06;
}
void lcd_init()
{
	DDRA=0xff;
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	8a bb       	out	0x1a, r24	; 26
	lcd_command(0x02);
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	0e 94 67 00 	call	0xce	; 0xce <lcd_command>
	lcd_command(0x28);
 13e:	88 e2       	ldi	r24, 0x28	; 40
 140:	0e 94 67 00 	call	0xce	; 0xce <lcd_command>
	lcd_command(0x0E);
 144:	8e e0       	ldi	r24, 0x0E	; 14
 146:	0e 94 67 00 	call	0xce	; 0xce <lcd_command>
 14a:	08 95       	ret

0000014c <main>:
void lcd_command_enable_to_write();
void lcd_data(char );
void b2a(int );
int main()
{
	lcd_init();
 14c:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_init>
	counter_init();
 150:	0e 94 36 00 	call	0x6c	; 0x6c <counter_init>
	while(1)
	 {
		b2a(TCNT0);
 154:	82 b7       	in	r24, 0x32	; 50
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 76 00 	call	0xec	; 0xec <b2a>
 15c:	fb cf       	rjmp	.-10     	; 0x154 <main+0x8>

0000015e <__divmodhi4>:
 15e:	97 fb       	bst	r25, 7
 160:	07 2e       	mov	r0, r23
 162:	16 f4       	brtc	.+4      	; 0x168 <__divmodhi4+0xa>
 164:	00 94       	com	r0
 166:	07 d0       	rcall	.+14     	; 0x176 <__divmodhi4_neg1>
 168:	77 fd       	sbrc	r23, 7
 16a:	09 d0       	rcall	.+18     	; 0x17e <__divmodhi4_neg2>
 16c:	0e 94 c3 00 	call	0x186	; 0x186 <__udivmodhi4>
 170:	07 fc       	sbrc	r0, 7
 172:	05 d0       	rcall	.+10     	; 0x17e <__divmodhi4_neg2>
 174:	3e f4       	brtc	.+14     	; 0x184 <__divmodhi4_exit>

00000176 <__divmodhi4_neg1>:
 176:	90 95       	com	r25
 178:	81 95       	neg	r24
 17a:	9f 4f       	sbci	r25, 0xFF	; 255
 17c:	08 95       	ret

0000017e <__divmodhi4_neg2>:
 17e:	70 95       	com	r23
 180:	61 95       	neg	r22
 182:	7f 4f       	sbci	r23, 0xFF	; 255

00000184 <__divmodhi4_exit>:
 184:	08 95       	ret

00000186 <__udivmodhi4>:
 186:	aa 1b       	sub	r26, r26
 188:	bb 1b       	sub	r27, r27
 18a:	51 e1       	ldi	r21, 0x11	; 17
 18c:	07 c0       	rjmp	.+14     	; 0x19c <__udivmodhi4_ep>

0000018e <__udivmodhi4_loop>:
 18e:	aa 1f       	adc	r26, r26
 190:	bb 1f       	adc	r27, r27
 192:	a6 17       	cp	r26, r22
 194:	b7 07       	cpc	r27, r23
 196:	10 f0       	brcs	.+4      	; 0x19c <__udivmodhi4_ep>
 198:	a6 1b       	sub	r26, r22
 19a:	b7 0b       	sbc	r27, r23

0000019c <__udivmodhi4_ep>:
 19c:	88 1f       	adc	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	5a 95       	dec	r21
 1a2:	a9 f7       	brne	.-22     	; 0x18e <__udivmodhi4_loop>
 1a4:	80 95       	com	r24
 1a6:	90 95       	com	r25
 1a8:	bc 01       	movw	r22, r24
 1aa:	cd 01       	movw	r24, r26
 1ac:	08 95       	ret

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
