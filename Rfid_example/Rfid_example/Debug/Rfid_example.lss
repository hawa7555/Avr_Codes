
Rfid_example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000240  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  00000240  000002d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  008000a2  008000a2  00000316  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000316  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000348  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a93  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b4  00000000  00000000  00000e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000425  00000000  00000000  00001523  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00001948  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003bc  00000000  00000000  000019f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000334  00000000  00000000  00001db4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000020e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e4       	ldi	r30, 0x40	; 64
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3a       	cpi	r26, 0xA2	; 162
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 ea       	ldi	r26, 0xA2	; 162
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 3a       	cpi	r26, 0xAF	; 175
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b7 00 	call	0x16e	; 0x16e <main>
  8a:	0c 94 1e 01 	jmp	0x23c	; 0x23c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <uart_init>:
		_delay_ms(100);
	}
}
void uart_init()
{
	UBRRL=0x33;//Fosc=8Mhz,BR=9600
  92:	83 e3       	ldi	r24, 0x33	; 51
  94:	89 b9       	out	0x09, r24	; 9
	UCSRB=UCSRB|(1<<RXEN);
  96:	54 9a       	sbi	0x0a, 4	; 10
	UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
  98:	80 b5       	in	r24, 0x20	; 32
  9a:	86 68       	ori	r24, 0x86	; 134
  9c:	80 bd       	out	0x20, r24	; 32
  9e:	08 95       	ret

000000a0 <lcd_data_enable_to_write>:
	PORTA=((x<<4)&0xf0); //lower 4 bit
	lcd_data_enable_to_write();
}
void lcd_data_enable_to_write()
{
	PORTA=PORTA |(1<<0);//RS=0;
  a0:	d8 9a       	sbi	0x1b, 0	; 27
	PORTA=PORTA&~(1<<1);//RW=0;
  a2:	d9 98       	cbi	0x1b, 1	; 27
	PORTA=PORTA |(1<<2);//EN=1;
  a4:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	8f ec       	ldi	r24, 0xCF	; 207
  a8:	97 e0       	ldi	r25, 0x07	; 7
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <lcd_data_enable_to_write+0xa>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <lcd_data_enable_to_write+0x10>
  b0:	00 00       	nop
	_delay_ms(1);
	PORTA=PORTA&~(1<<2);//EN=0;
  b2:	da 98       	cbi	0x1b, 2	; 27
  b4:	8f ec       	ldi	r24, 0xCF	; 207
  b6:	97 e0       	ldi	r25, 0x07	; 7
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <lcd_data_enable_to_write+0x18>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <lcd_data_enable_to_write+0x1e>
  be:	00 00       	nop
  c0:	08 95       	ret

000000c2 <lcd_data>:
	lcd_command_enable_to_write();
	PORTA=((x<<4)&0xf0); //lower 4 bit
	lcd_command_enable_to_write();
}
void lcd_data(char x)
{
  c2:	cf 93       	push	r28
  c4:	c8 2f       	mov	r28, r24
	PORTA=(x&0xf0);  //upper 4 bit
  c6:	80 7f       	andi	r24, 0xF0	; 240
  c8:	8b bb       	out	0x1b, r24	; 27
	lcd_data_enable_to_write();
  ca:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_data_enable_to_write>
	PORTA=((x<<4)&0xf0); //lower 4 bit
  ce:	20 e1       	ldi	r18, 0x10	; 16
  d0:	c2 9f       	mul	r28, r18
  d2:	c0 01       	movw	r24, r0
  d4:	11 24       	eor	r1, r1
  d6:	8b bb       	out	0x1b, r24	; 27
	lcd_data_enable_to_write();
  d8:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_data_enable_to_write>
}
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <lcd_string>:
		}
	}
	return 0;
}
void lcd_string(char *x)
{
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	ec 01       	movw	r28, r24
	while(*x)
  e6:	88 81       	ld	r24, Y
  e8:	88 23       	and	r24, r24
  ea:	79 f0       	breq	.+30     	; 0x10a <lcd_string+0x2a>
  ec:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_data(*x);
  ee:	0e 94 61 00 	call	0xc2	; 0xc2 <lcd_data>
  f2:	2f ef       	ldi	r18, 0xFF	; 255
  f4:	80 e7       	ldi	r24, 0x70	; 112
  f6:	92 e0       	ldi	r25, 0x02	; 2
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <lcd_string+0x18>
 100:	00 c0       	rjmp	.+0      	; 0x102 <lcd_string+0x22>
 102:	00 00       	nop
	}
	return 0;
}
void lcd_string(char *x)
{
	while(*x)
 104:	89 91       	ld	r24, Y+
 106:	81 11       	cpse	r24, r1
 108:	f2 cf       	rjmp	.-28     	; 0xee <lcd_string+0xe>
	{
		lcd_data(*x);
		x++;
		_delay_ms(100);
	}
}
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <lcd_command_enable_to_write>:
	_delay_ms(1);
}

void lcd_command_enable_to_write()
{
	PORTA=PORTA&~(1<<0);//RS=0;
 110:	d8 98       	cbi	0x1b, 0	; 27
	PORTA=PORTA&~(1<<1);//RW=0;
 112:	d9 98       	cbi	0x1b, 1	; 27
	PORTA=PORTA |(1<<2);//EN=1;
 114:	da 9a       	sbi	0x1b, 2	; 27
 116:	8f ec       	ldi	r24, 0xCF	; 207
 118:	97 e0       	ldi	r25, 0x07	; 7
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcd_command_enable_to_write+0xa>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <lcd_command_enable_to_write+0x10>
 120:	00 00       	nop
	_delay_ms(1);
	PORTA=PORTA&~(1<<2);//EN=0;
 122:	da 98       	cbi	0x1b, 2	; 27
 124:	8f ec       	ldi	r24, 0xCF	; 207
 126:	97 e0       	ldi	r25, 0x07	; 7
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcd_command_enable_to_write+0x18>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcd_command_enable_to_write+0x1e>
 12e:	00 00       	nop
 130:	08 95       	ret

00000132 <lcd_command>:
	lcd_command(0x0E);
	lcd_command(0x06);

}
void lcd_command(char x)
{
 132:	cf 93       	push	r28
 134:	c8 2f       	mov	r28, r24
	PORTA=(x&0xf0);  //upper 4 bit
 136:	80 7f       	andi	r24, 0xF0	; 240
 138:	8b bb       	out	0x1b, r24	; 27
	lcd_command_enable_to_write();
 13a:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command_enable_to_write>
	PORTA=((x<<4)&0xf0); //lower 4 bit
 13e:	20 e1       	ldi	r18, 0x10	; 16
 140:	c2 9f       	mul	r28, r18
 142:	c0 01       	movw	r24, r0
 144:	11 24       	eor	r1, r1
 146:	8b bb       	out	0x1b, r24	; 27
	lcd_command_enable_to_write();
 148:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command_enable_to_write>
}
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <lcd_init>:

}

void lcd_init()
{
	DDRA=0xff;
 150:	8f ef       	ldi	r24, 0xFF	; 255
 152:	8a bb       	out	0x1a, r24	; 26
	lcd_command(0x02);
 154:	82 e0       	ldi	r24, 0x02	; 2
 156:	0e 94 99 00 	call	0x132	; 0x132 <lcd_command>
	lcd_command(0x28);
 15a:	88 e2       	ldi	r24, 0x28	; 40
 15c:	0e 94 99 00 	call	0x132	; 0x132 <lcd_command>
	lcd_command(0x0E);
 160:	8e e0       	ldi	r24, 0x0E	; 14
 162:	0e 94 99 00 	call	0x132	; 0x132 <lcd_command>
	lcd_command(0x06);
 166:	86 e0       	ldi	r24, 0x06	; 6
 168:	0e 94 99 00 	call	0x132	; 0x132 <lcd_command>
 16c:	08 95       	ret

0000016e <main>:
{
	int i;
	//DDRB=3;
	//DDRC=0xFF;
	//PORTC=0x0F;
	lcd_init();
 16e:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_init>
	uart_init();
 172:	0e 94 49 00 	call	0x92	; 0x92 <uart_init>
	lcd_string("hello");
 176:	8a e7       	ldi	r24, 0x7A	; 122
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_string>
 17e:	ce ea       	ldi	r28, 0xAE	; 174
 180:	d0 e0       	ldi	r29, 0x00	; 0
		for(i=0;i<12;i++)
		{
			while( (UCSRA &(1<<RXC))==0){}
			a[i]=UDR;
		}
		a[i]='\0';
 182:	02 ea       	ldi	r16, 0xA2	; 162
 184:	10 e0       	ldi	r17, 0x00	; 0
			lcd_command(0x01);
			lcd_command(0x80);
			lcd_string("Hi Harshal");
			PORTB=0b00000001;
			_delay_ms(5000);
			PORTB=0b00000010;
 186:	68 94       	set
 188:	ff 24       	eor	r15, r15
 18a:	f1 f8       	bld	r15, 1
 18c:	e2 ea       	ldi	r30, 0xA2	; 162
 18e:	f0 e0       	ldi	r31, 0x00	; 0
	lcd_string("hello");
	while(1)
	{
		for(i=0;i<12;i++)
		{
			while( (UCSRA &(1<<RXC))==0){}
 190:	5f 9b       	sbis	0x0b, 7	; 11
 192:	fe cf       	rjmp	.-4      	; 0x190 <main+0x22>
			a[i]=UDR;
 194:	8c b1       	in	r24, 0x0c	; 12
 196:	81 93       	st	Z+, r24
	lcd_init();
	uart_init();
	lcd_string("hello");
	while(1)
	{
		for(i=0;i<12;i++)
 198:	ec 17       	cp	r30, r28
 19a:	fd 07       	cpc	r31, r29
 19c:	c9 f7       	brne	.-14     	; 0x190 <main+0x22>
		{
			while( (UCSRA &(1<<RXC))==0){}
			a[i]=UDR;
		}
		a[i]='\0';
 19e:	f8 01       	movw	r30, r16
 1a0:	14 86       	std	Z+12, r1	; 0x0c
		
		if( (strcmp(a,zaid))==0)
 1a2:	6d e6       	ldi	r22, 0x6D	; 109
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	c8 01       	movw	r24, r16
 1a8:	0e 94 15 01 	call	0x22a	; 0x22a <strcmp>
 1ac:	89 2b       	or	r24, r25
 1ae:	a1 f4       	brne	.+40     	; 0x1d8 <main+0x6a>
		{
			lcd_command(0x01);
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	0e 94 99 00 	call	0x132	; 0x132 <lcd_command>
			lcd_command(0x80);
 1b6:	80 e8       	ldi	r24, 0x80	; 128
 1b8:	0e 94 99 00 	call	0x132	; 0x132 <lcd_command>
			lcd_string("Hi Zaid");
 1bc:	80 e8       	ldi	r24, 0x80	; 128
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_string>
 1c4:	ff ef       	ldi	r31, 0xFF	; 255
 1c6:	21 e1       	ldi	r18, 0x11	; 17
 1c8:	8a e7       	ldi	r24, 0x7A	; 122
 1ca:	f1 50       	subi	r31, 0x01	; 1
 1cc:	20 40       	sbci	r18, 0x00	; 0
 1ce:	80 40       	sbci	r24, 0x00	; 0
 1d0:	e1 f7       	brne	.-8      	; 0x1ca <main+0x5c>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <main+0x66>
 1d4:	00 00       	nop
 1d6:	da cf       	rjmp	.-76     	; 0x18c <main+0x1e>
		//	PORTB=0b00000001;
			_delay_ms(5000);
			//PORTB=0b00000010;

		}
		else if( (strcmp(a,harshal))==0)
 1d8:	60 e6       	ldi	r22, 0x60	; 96
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	c8 01       	movw	r24, r16
 1de:	0e 94 15 01 	call	0x22a	; 0x22a <strcmp>
 1e2:	89 2b       	or	r24, r25
 1e4:	b9 f4       	brne	.+46     	; 0x214 <main+0xa6>
		{
			lcd_command(0x01);
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	0e 94 99 00 	call	0x132	; 0x132 <lcd_command>
			lcd_command(0x80);
 1ec:	80 e8       	ldi	r24, 0x80	; 128
 1ee:	0e 94 99 00 	call	0x132	; 0x132 <lcd_command>
			lcd_string("Hi Harshal");
 1f2:	88 e8       	ldi	r24, 0x88	; 136
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_string>
			PORTB=0b00000001;
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	88 bb       	out	0x18, r24	; 24
 1fe:	9f ef       	ldi	r25, 0xFF	; 255
 200:	e1 e1       	ldi	r30, 0x11	; 17
 202:	fa e7       	ldi	r31, 0x7A	; 122
 204:	91 50       	subi	r25, 0x01	; 1
 206:	e0 40       	sbci	r30, 0x00	; 0
 208:	f0 40       	sbci	r31, 0x00	; 0
 20a:	e1 f7       	brne	.-8      	; 0x204 <main+0x96>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <main+0xa0>
 20e:	00 00       	nop
			_delay_ms(5000);
			PORTB=0b00000010;
 210:	f8 ba       	out	0x18, r15	; 24
 212:	bc cf       	rjmp	.-136    	; 0x18c <main+0x1e>
			_delay_ms(5000);
			PORTB=0b00000010;
		}*/
		else
		{
			lcd_command(0x01);
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	0e 94 99 00 	call	0x132	; 0x132 <lcd_command>
			lcd_command(0xc0);
 21a:	80 ec       	ldi	r24, 0xC0	; 192
 21c:	0e 94 99 00 	call	0x132	; 0x132 <lcd_command>
			lcd_string("Access Denied");
 220:	83 e9       	ldi	r24, 0x93	; 147
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_string>
 228:	b1 cf       	rjmp	.-158    	; 0x18c <main+0x1e>

0000022a <strcmp>:
 22a:	fb 01       	movw	r30, r22
 22c:	dc 01       	movw	r26, r24
 22e:	8d 91       	ld	r24, X+
 230:	01 90       	ld	r0, Z+
 232:	80 19       	sub	r24, r0
 234:	01 10       	cpse	r0, r1
 236:	d9 f3       	breq	.-10     	; 0x22e <strcmp+0x4>
 238:	99 0b       	sbc	r25, r25
 23a:	08 95       	ret

0000023c <_exit>:
 23c:	f8 94       	cli

0000023e <__stop_program>:
 23e:	ff cf       	rjmp	.-2      	; 0x23e <__stop_program>
