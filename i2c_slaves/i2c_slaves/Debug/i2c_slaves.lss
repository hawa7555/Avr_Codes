
i2c_slaves.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000206  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000912  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000633  00000000  00000000  00000be6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000419  00000000  00000000  00001219  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00001634  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037a  00000000  00000000  000016f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000022c  00000000  00000000  00001a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001c9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  64:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <i2c_init>:
void cmd_send(char);
void transmit();

void i2c_init()
{
	TWBR=8;
  6c:	88 e0       	ldi	r24, 0x08	; 8
  6e:	80 b9       	out	0x00, r24	; 0
	TWCR=TWCR|(1<<TWSTA)|(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
  70:	86 b7       	in	r24, 0x36	; 54
  72:	84 6e       	ori	r24, 0xE4	; 228
  74:	86 bf       	out	0x36, r24	; 54
	while((TWCR&(1<<TWINT))==0);
  76:	06 b6       	in	r0, 0x36	; 54
  78:	07 fe       	sbrs	r0, 7
  7a:	fd cf       	rjmp	.-6      	; 0x76 <i2c_init+0xa>
	//TWCR=TWCR|(1<<TWINT);
	//if(TWSR==0x08) return;
	//else i2c_init();
}
  7c:	08 95       	ret

0000007e <mt_mode>:

void mt_mode()
{
	TWDR=0x40;     //slave address
  7e:	80 e4       	ldi	r24, 0x40	; 64
  80:	83 b9       	out	0x03, r24	; 3
	TWCR=TWCR|(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
  82:	86 b7       	in	r24, 0x36	; 54
  84:	84 6c       	ori	r24, 0xC4	; 196
  86:	86 bf       	out	0x36, r24	; 54
	while((TWCR&(1<<TWINT))==0);
  88:	06 b6       	in	r0, 0x36	; 54
  8a:	07 fe       	sbrs	r0, 7
  8c:	fd cf       	rjmp	.-6      	; 0x88 <mt_mode+0xa>
	//TWCR=TWCR|(1<<TWINT);
	//if(TWSR==0x18) return;
	//else mt_mode();
}
  8e:	08 95       	ret

00000090 <transmit>:
	TWDR=TWDR&~(1<<2);  //en=0;
}

void transmit()
{
	TWCR=TWCR|(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
  90:	86 b7       	in	r24, 0x36	; 54
  92:	84 6c       	ori	r24, 0xC4	; 196
  94:	86 bf       	out	0x36, r24	; 54
	while((TWCR&(1<<TWINT))==0);
  96:	06 b6       	in	r0, 0x36	; 54
  98:	07 fe       	sbrs	r0, 7
  9a:	fd cf       	rjmp	.-6      	; 0x96 <transmit+0x6>
	//TWCR=TWCR|(1<<TWINT);
}
  9c:	08 95       	ret

0000009e <data_lcd>:
	transmit();
}

void data_lcd()
{
	TWDR=TWDR|(1<<0);   //rs=1
  9e:	18 9a       	sbi	0x03, 0	; 3
	TWDR=TWDR&~(1<<1);  //rw=0
  a0:	19 98       	cbi	0x03, 1	; 3
	TWDR=TWDR|(1<<2);   //en=1
  a2:	1a 9a       	sbi	0x03, 2	; 3
	transmit();
  a4:	0e 94 48 00 	call	0x90	; 0x90 <transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	8f e1       	ldi	r24, 0x1F	; 31
  aa:	9e e4       	ldi	r25, 0x4E	; 78
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <data_lcd+0xe>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <data_lcd+0x14>
  b2:	00 00       	nop
	_delay_ms(10);
	TWDR=TWDR&~(1<<2);  //en=0;
  b4:	1a 98       	cbi	0x03, 2	; 3
  b6:	08 95       	ret

000000b8 <data_send>:
	//if(TWSR==0x18) return;
	//else mt_mode();
}

void data_send(char x)
{
  b8:	cf 93       	push	r28
  ba:	c8 2f       	mov	r28, r24
	TWDR=x&(0xF0);
  bc:	80 7f       	andi	r24, 0xF0	; 240
  be:	83 b9       	out	0x03, r24	; 3
	transmit();
  c0:	0e 94 48 00 	call	0x90	; 0x90 <transmit>
	data_lcd();
  c4:	0e 94 4f 00 	call	0x9e	; 0x9e <data_lcd>
	transmit();
  c8:	0e 94 48 00 	call	0x90	; 0x90 <transmit>
	TWDR=(x<<4)&(0xF0);
  cc:	20 e1       	ldi	r18, 0x10	; 16
  ce:	c2 9f       	mul	r28, r18
  d0:	c0 01       	movw	r24, r0
  d2:	11 24       	eor	r1, r1
  d4:	83 b9       	out	0x03, r24	; 3
	transmit();
  d6:	0e 94 48 00 	call	0x90	; 0x90 <transmit>
	data_lcd();
  da:	0e 94 4f 00 	call	0x9e	; 0x9e <data_lcd>
	transmit();
  de:	0e 94 48 00 	call	0x90	; 0x90 <transmit>
}
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <cmd_lcd>:
	//TWCR=TWCR|(1<<TWINT);
}

void cmd_lcd()
{
	TWDR=TWDR&~(1<<0);   //rs=0
  e6:	18 98       	cbi	0x03, 0	; 3
	TWDR=TWDR&~(1<<1);  //rw=0
  e8:	19 98       	cbi	0x03, 1	; 3
	TWDR=TWDR|(1<<2);   //en=1
  ea:	1a 9a       	sbi	0x03, 2	; 3
	transmit();
  ec:	0e 94 48 00 	call	0x90	; 0x90 <transmit>
  f0:	8f e1       	ldi	r24, 0x1F	; 31
  f2:	9e e4       	ldi	r25, 0x4E	; 78
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <cmd_lcd+0xe>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <cmd_lcd+0x14>
  fa:	00 00       	nop
	_delay_ms(10);
	TWDR=TWDR&~(1<<2);  //en=0;
  fc:	1a 98       	cbi	0x03, 2	; 3
  fe:	08 95       	ret

00000100 <cmd_send>:
}

void cmd_send(char x)
{
 100:	cf 93       	push	r28
 102:	c8 2f       	mov	r28, r24
	TWDR=x&(0xF0);
 104:	80 7f       	andi	r24, 0xF0	; 240
 106:	83 b9       	out	0x03, r24	; 3
	transmit();
 108:	0e 94 48 00 	call	0x90	; 0x90 <transmit>
	cmd_lcd();
 10c:	0e 94 73 00 	call	0xe6	; 0xe6 <cmd_lcd>
	transmit();
 110:	0e 94 48 00 	call	0x90	; 0x90 <transmit>
	TWDR=(x<<4)&(0xF0);
 114:	20 e1       	ldi	r18, 0x10	; 16
 116:	c2 9f       	mul	r28, r18
 118:	c0 01       	movw	r24, r0
 11a:	11 24       	eor	r1, r1
 11c:	83 b9       	out	0x03, r24	; 3
	transmit();
 11e:	0e 94 48 00 	call	0x90	; 0x90 <transmit>
	cmd_lcd();
 122:	0e 94 73 00 	call	0xe6	; 0xe6 <cmd_lcd>
	transmit();
 126:	0e 94 48 00 	call	0x90	; 0x90 <transmit>
}
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <lcd_init>:

void lcd_init()
{
	cmd_send(0x02);
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	0e 94 80 00 	call	0x100	; 0x100 <cmd_send>
	cmd_send(0x28);
 134:	88 e2       	ldi	r24, 0x28	; 40
 136:	0e 94 80 00 	call	0x100	; 0x100 <cmd_send>
	cmd_send(0x01);
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	0e 94 80 00 	call	0x100	; 0x100 <cmd_send>
	cmd_send(0x0E);
 140:	8e e0       	ldi	r24, 0x0E	; 14
 142:	0e 94 80 00 	call	0x100	; 0x100 <cmd_send>
	cmd_send(0x80);
 146:	80 e8       	ldi	r24, 0x80	; 128
 148:	0e 94 80 00 	call	0x100	; 0x100 <cmd_send>
 14c:	08 95       	ret

0000014e <main>:
}

void main()
{
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
	i2c_init();
 152:	0e 94 36 00 	call	0x6c	; 0x6c <i2c_init>
	mt_mode();
 156:	0e 94 3f 00 	call	0x7e	; 0x7e <mt_mode>
	lcd_init();
 15a:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_init>
 15e:	c4 e1       	ldi	r28, 0x14	; 20
 160:	d0 e0       	ldi	r29, 0x00	; 0
	int i=20;
	while(i!=0)
	{
		cmd_send(0x01);
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	0e 94 80 00 	call	0x100	; 0x100 <cmd_send>
		cmd_send(0x80);
 168:	80 e8       	ldi	r24, 0x80	; 128
 16a:	0e 94 80 00 	call	0x100	; 0x100 <cmd_send>
		data_send('H');
 16e:	88 e4       	ldi	r24, 0x48	; 72
 170:	0e 94 5c 00 	call	0xb8	; 0xb8 <data_send>
 174:	2f ef       	ldi	r18, 0xFF	; 255
 176:	80 e7       	ldi	r24, 0x70	; 112
 178:	92 e0       	ldi	r25, 0x02	; 2
 17a:	21 50       	subi	r18, 0x01	; 1
 17c:	80 40       	sbci	r24, 0x00	; 0
 17e:	90 40       	sbci	r25, 0x00	; 0
 180:	e1 f7       	brne	.-8      	; 0x17a <main+0x2c>
 182:	00 c0       	rjmp	.+0      	; 0x184 <main+0x36>
 184:	00 00       	nop
		_delay_ms(100);
		data_send('W');
 186:	87 e5       	ldi	r24, 0x57	; 87
 188:	0e 94 5c 00 	call	0xb8	; 0xb8 <data_send>
 18c:	2f ef       	ldi	r18, 0xFF	; 255
 18e:	89 e6       	ldi	r24, 0x69	; 105
 190:	98 e1       	ldi	r25, 0x18	; 24
 192:	21 50       	subi	r18, 0x01	; 1
 194:	80 40       	sbci	r24, 0x00	; 0
 196:	90 40       	sbci	r25, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <main+0x44>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x4e>
 19c:	00 00       	nop
 19e:	21 97       	sbiw	r28, 0x01	; 1
{
	i2c_init();
	mt_mode();
	lcd_init();
	int i=20;
	while(i!=0)
 1a0:	01 f7       	brne	.-64     	; 0x162 <main+0x14>
		_delay_ms(100);
		data_send('W');
		_delay_ms(1000);
		i--;
	}
	TWCR=TWCR|(1<<TWINT)|(1<<TWEN)|(1<<TWEA)|(1<<TWSTO);
 1a2:	86 b7       	in	r24, 0x36	; 54
 1a4:	84 6d       	ori	r24, 0xD4	; 212
 1a6:	86 bf       	out	0x36, r24	; 54
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
