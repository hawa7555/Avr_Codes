
Spi_rec.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000136  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000018a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000871  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065c  00000000  00000000  00000ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036c  00000000  00000000  0000111d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  0000148c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000395  00000000  00000000  00001530  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000020f  00000000  00000000  000018c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001ad4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 92 00 	call	0x124	; 0x124 <main>
  64:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Spi_init>:

void Spi_init()
{
	//DDRB=DDRB&~(1<<PB7);
	//DDRB=DDRB&~(1<<PB6);
	SPCR=SPCR|(1<<SPE)|(1<<DORD);
  6c:	8d b1       	in	r24, 0x0d	; 13
  6e:	80 66       	ori	r24, 0x60	; 96
  70:	8d b9       	out	0x0d, r24	; 13
  72:	08 95       	ret

00000074 <lcd_data_enable_to_write>:
	PORTA=((x<<4)&0xf0); //lower 4 bit
	lcd_data_enable_to_write();
}
void lcd_data_enable_to_write()
{
	PORTA=PORTA |(1<<0);//RS=0;
  74:	d8 9a       	sbi	0x1b, 0	; 27
	PORTA=PORTA&~(1<<1);//RW=0;
  76:	d9 98       	cbi	0x1b, 1	; 27
	PORTA=PORTA |(1<<2);//EN=1;
  78:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7a:	8f ec       	ldi	r24, 0xCF	; 207
  7c:	97 e0       	ldi	r25, 0x07	; 7
  7e:	01 97       	sbiw	r24, 0x01	; 1
  80:	f1 f7       	brne	.-4      	; 0x7e <lcd_data_enable_to_write+0xa>
  82:	00 c0       	rjmp	.+0      	; 0x84 <lcd_data_enable_to_write+0x10>
  84:	00 00       	nop
	_delay_ms(1);
	PORTA=PORTA&~(1<<2);//EN=0;
  86:	da 98       	cbi	0x1b, 2	; 27
  88:	8f ec       	ldi	r24, 0xCF	; 207
  8a:	97 e0       	ldi	r25, 0x07	; 7
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <lcd_data_enable_to_write+0x18>
  90:	00 c0       	rjmp	.+0      	; 0x92 <lcd_data_enable_to_write+0x1e>
  92:	00 00       	nop
  94:	08 95       	ret

00000096 <lcd_data>:
	lcd_command_enable_to_write();
	PORTA=((x<<4)&0xf0); //lower 4 bit
	lcd_command_enable_to_write();
}
void lcd_data(char x)
{
  96:	cf 93       	push	r28
  98:	c8 2f       	mov	r28, r24
	PORTA=(x&0xf0);  //upper 4 bit
  9a:	80 7f       	andi	r24, 0xF0	; 240
  9c:	8b bb       	out	0x1b, r24	; 27
	lcd_data_enable_to_write();
  9e:	0e 94 3a 00 	call	0x74	; 0x74 <lcd_data_enable_to_write>
	PORTA=((x<<4)&0xf0); //lower 4 bit
  a2:	20 e1       	ldi	r18, 0x10	; 16
  a4:	c2 9f       	mul	r28, r18
  a6:	c0 01       	movw	r24, r0
  a8:	11 24       	eor	r1, r1
  aa:	8b bb       	out	0x1b, r24	; 27
	lcd_data_enable_to_write();
  ac:	0e 94 3a 00 	call	0x74	; 0x74 <lcd_data_enable_to_write>
}
  b0:	cf 91       	pop	r28
  b2:	08 95       	ret

000000b4 <Spi_receive>:
 }
 
void Spi_receive()
{
	char a;
	while(!(SPSR&(1<<SPIF)));
  b4:	77 9b       	sbis	0x0e, 7	; 14
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <Spi_receive>
	a=SPDR;
  b8:	8f b1       	in	r24, 0x0f	; 15
	lcd_data(a);
  ba:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_data>
  be:	8f e1       	ldi	r24, 0x1F	; 31
  c0:	9e e4       	ldi	r25, 0x4E	; 78
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <Spi_receive+0xe>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <Spi_receive+0x14>
  c8:	00 00       	nop
  ca:	08 95       	ret

000000cc <lcd_command_enable_to_write>:
	_delay_ms(1);
}

void lcd_command_enable_to_write()
{
	PORTA=PORTA&~(1<<0);//RS=0;
  cc:	d8 98       	cbi	0x1b, 0	; 27
	PORTA=PORTA&~(1<<1);//RW=0;
  ce:	d9 98       	cbi	0x1b, 1	; 27
	PORTA=PORTA |(1<<2);//EN=1;
  d0:	da 9a       	sbi	0x1b, 2	; 27
  d2:	8f ec       	ldi	r24, 0xCF	; 207
  d4:	97 e0       	ldi	r25, 0x07	; 7
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <lcd_command_enable_to_write+0xa>
  da:	00 c0       	rjmp	.+0      	; 0xdc <lcd_command_enable_to_write+0x10>
  dc:	00 00       	nop
	_delay_ms(1);
	PORTA=PORTA&~(1<<2);//EN=0;
  de:	da 98       	cbi	0x1b, 2	; 27
  e0:	8f ec       	ldi	r24, 0xCF	; 207
  e2:	97 e0       	ldi	r25, 0x07	; 7
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <lcd_command_enable_to_write+0x18>
  e8:	00 c0       	rjmp	.+0      	; 0xea <lcd_command_enable_to_write+0x1e>
  ea:	00 00       	nop
  ec:	08 95       	ret

000000ee <lcd_command>:
	lcd_command(0x28);
	lcd_command(0x0E);

}
void lcd_command(char x)
{
  ee:	cf 93       	push	r28
  f0:	c8 2f       	mov	r28, r24
	PORTA=(x&0xf0);  //upper 4 bit
  f2:	80 7f       	andi	r24, 0xF0	; 240
  f4:	8b bb       	out	0x1b, r24	; 27
	lcd_command_enable_to_write();
  f6:	0e 94 66 00 	call	0xcc	; 0xcc <lcd_command_enable_to_write>
	PORTA=((x<<4)&0xf0); //lower 4 bit
  fa:	20 e1       	ldi	r18, 0x10	; 16
  fc:	c2 9f       	mul	r28, r18
  fe:	c0 01       	movw	r24, r0
 100:	11 24       	eor	r1, r1
 102:	8b bb       	out	0x1b, r24	; 27
	lcd_command_enable_to_write();
 104:	0e 94 66 00 	call	0xcc	; 0xcc <lcd_command_enable_to_write>
}
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <lcd_init>:
	_delay_ms(10);
}

void lcd_init()
{
	DDRA=0xff;
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	8a bb       	out	0x1a, r24	; 26
	lcd_command(0x02);
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	0e 94 77 00 	call	0xee	; 0xee <lcd_command>
	lcd_command(0x28);
 116:	88 e2       	ldi	r24, 0x28	; 40
 118:	0e 94 77 00 	call	0xee	; 0xee <lcd_command>
	lcd_command(0x0E);
 11c:	8e e0       	ldi	r24, 0x0E	; 14
 11e:	0e 94 77 00 	call	0xee	; 0xee <lcd_command>
 122:	08 95       	ret

00000124 <main>:
	PORTA=PORTA&~(1<<2);//EN=0;
	_delay_ms(1);
}
void main()
{
	Spi_init();
 124:	0e 94 36 00 	call	0x6c	; 0x6c <Spi_init>
	lcd_init();
 128:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_init>
	//while(1)
	//{
		Spi_receive();
 12c:	0e 94 5a 00 	call	0xb4	; 0xb4 <Spi_receive>
 130:	08 95       	ret

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
