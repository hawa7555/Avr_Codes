
Spi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000000c6  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000142  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000069c  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000606  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000274  00000000  00000000  00000e82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000010f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033b  00000000  00000000  0000113c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008a  00000000  00000000  00001477  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001501  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ec       	ldi	r30, 0xC6	; 198
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  7a:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Spi_init>:
#include<util/delay.h>


void Spi_init()
{
	DDRB=DDRB|(1<<PB5)|(1<<PB7);
  82:	87 b3       	in	r24, 0x17	; 23
  84:	80 6a       	ori	r24, 0xA0	; 160
  86:	87 bb       	out	0x17, r24	; 23
	SPCR=SPCR|(1<<SPE)|(1<<MSTR)|(1<<DORD);
  88:	8d b1       	in	r24, 0x0d	; 13
  8a:	80 67       	ori	r24, 0x70	; 112
  8c:	8d b9       	out	0x0d, r24	; 13
  8e:	08 95       	ret

00000090 <Spi_transmit>:
}

void Spi_transmit(char *x)
{
  90:	fc 01       	movw	r30, r24
//PORTB=PORTB&~(1<<PB4);
while(*x!='\0')
  92:	90 81       	ld	r25, Z
  94:	99 23       	and	r25, r25
  96:	69 f0       	breq	.+26     	; 0xb2 <Spi_transmit+0x22>
  98:	31 96       	adiw	r30, 0x01	; 1
{
	SPDR=*x;
  9a:	9f b9       	out	0x0f, r25	; 15
	while(!(SPSR&(1<<SPIF)));
  9c:	77 9b       	sbis	0x0e, 7	; 14
  9e:	fe cf       	rjmp	.-4      	; 0x9c <Spi_transmit+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	8f e1       	ldi	r24, 0x1F	; 31
  a2:	9e e4       	ldi	r25, 0x4E	; 78
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <Spi_transmit+0x14>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <Spi_transmit+0x1a>
  aa:	00 00       	nop
}

void Spi_transmit(char *x)
{
//PORTB=PORTB&~(1<<PB4);
while(*x!='\0')
  ac:	91 91       	ld	r25, Z+
  ae:	91 11       	cpse	r25, r1
  b0:	f4 cf       	rjmp	.-24     	; 0x9a <Spi_transmit+0xa>
  b2:	08 95       	ret

000000b4 <main>:
	x++;
 }
}
 void main()
 {
	 Spi_init();
  b4:	0e 94 41 00 	call	0x82	; 0x82 <Spi_init>
   // while(1)
	 //{
		 Spi_transmit("Harshal");
  b8:	80 e6       	ldi	r24, 0x60	; 96
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 48 00 	call	0x90	; 0x90 <Spi_transmit>
  c0:	08 95       	ret

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
