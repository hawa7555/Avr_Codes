
Tachometer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008e6  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065d  00000000  00000000  00000bde  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003cc  00000000  00000000  0000123b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00001608  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000372  00000000  00000000  000016c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002c8  00000000  00000000  00001a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001d02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a9 00 	call	0x152	; 0x152 <main>
  64:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <cntr_init>:
void lcd_data(char);
void lcd_data_enable();

void cntr_init()
{
	TCNT0=0;
  6c:	12 be       	out	0x32, r1	; 50
	TCCR0=0x07;
  6e:	87 e0       	ldi	r24, 0x07	; 7
  70:	83 bf       	out	0x33, r24	; 51
  72:	08 95       	ret

00000074 <lcd_cmd_enable>:
	lcd_cmd_enable();
}

void lcd_cmd_enable()
{
	PORTA=PORTA&~(1<<0);   //RS=0
  74:	d8 98       	cbi	0x1b, 0	; 27
	PORTA=PORTA&~(1<<1);   //RW=0
  76:	d9 98       	cbi	0x1b, 1	; 27
	PORTA=PORTA|(1<<2);    //EN=1
  78:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7a:	8f ec       	ldi	r24, 0xCF	; 207
  7c:	97 e0       	ldi	r25, 0x07	; 7
  7e:	01 97       	sbiw	r24, 0x01	; 1
  80:	f1 f7       	brne	.-4      	; 0x7e <lcd_cmd_enable+0xa>
  82:	00 c0       	rjmp	.+0      	; 0x84 <lcd_cmd_enable+0x10>
  84:	00 00       	nop
	_delay_ms(1);
	PORTA=PORTA&~(1<<2);   //EN=0
  86:	da 98       	cbi	0x1b, 2	; 27
  88:	8f ec       	ldi	r24, 0xCF	; 207
  8a:	97 e0       	ldi	r25, 0x07	; 7
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <lcd_cmd_enable+0x18>
  90:	00 c0       	rjmp	.+0      	; 0x92 <lcd_cmd_enable+0x1e>
  92:	00 00       	nop
  94:	08 95       	ret

00000096 <lcd_cmd>:
	pos--;  
  }	
} 

void lcd_cmd(char x)
{
  96:	cf 93       	push	r28
  98:	c8 2f       	mov	r28, r24
	PORTA=x&(0xF0);
  9a:	80 7f       	andi	r24, 0xF0	; 240
  9c:	8b bb       	out	0x1b, r24	; 27
	lcd_cmd_enable();
  9e:	0e 94 3a 00 	call	0x74	; 0x74 <lcd_cmd_enable>
	PORTA=(x<<4)&(0xF0);
  a2:	20 e1       	ldi	r18, 0x10	; 16
  a4:	c2 9f       	mul	r28, r18
  a6:	c0 01       	movw	r24, r0
  a8:	11 24       	eor	r1, r1
  aa:	8b bb       	out	0x1b, r24	; 27
	lcd_cmd_enable();
  ac:	0e 94 3a 00 	call	0x74	; 0x74 <lcd_cmd_enable>
}
  b0:	cf 91       	pop	r28
  b2:	08 95       	ret

000000b4 <init>:
	_delay_ms(1);
}

void init()
{
	DDRA=0xFF;
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	8a bb       	out	0x1a, r24	; 26
	lcd_cmd(0x02);
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_cmd>
	lcd_cmd(0x28);
  be:	88 e2       	ldi	r24, 0x28	; 40
  c0:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_cmd>
	lcd_cmd(0x0E);
  c4:	8e e0       	ldi	r24, 0x0E	; 14
  c6:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_cmd>
	//lcd_cmd(0x01);
	//lcd_cmd(0x06);
	lcd_cmd(0x80);
  ca:	80 e8       	ldi	r24, 0x80	; 128
  cc:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_cmd>
  d0:	08 95       	ret

000000d2 <lcd_data_enable>:
	lcd_data_enable();
}

void lcd_data_enable()
{
	PORTA=PORTA|(1<<0);    //RS=1
  d2:	d8 9a       	sbi	0x1b, 0	; 27
	PORTA=PORTA&~(1<<1);   //RW=0
  d4:	d9 98       	cbi	0x1b, 1	; 27
	PORTA=PORTA|(1<<2);    //EN=1
  d6:	da 9a       	sbi	0x1b, 2	; 27
  d8:	8f ec       	ldi	r24, 0xCF	; 207
  da:	97 e0       	ldi	r25, 0x07	; 7
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <lcd_data_enable+0xa>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <lcd_data_enable+0x10>
  e2:	00 00       	nop
	_delay_ms(1);
	PORTA=PORTA&~(1<<2);   //EN=0
  e4:	da 98       	cbi	0x1b, 2	; 27
  e6:	8f ec       	ldi	r24, 0xCF	; 207
  e8:	97 e0       	ldi	r25, 0x07	; 7
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <lcd_data_enable+0x18>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <lcd_data_enable+0x1e>
  f0:	00 00       	nop
  f2:	08 95       	ret

000000f4 <lcd_data>:
	//lcd_cmd(0x06);
	lcd_cmd(0x80);
}

void lcd_data(char x)
{
  f4:	cf 93       	push	r28
  f6:	c8 2f       	mov	r28, r24
	PORTA=x&(0xF0);
  f8:	80 7f       	andi	r24, 0xF0	; 240
  fa:	8b bb       	out	0x1b, r24	; 27
	lcd_data_enable();
  fc:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_data_enable>
	PORTA=(x<<4)&(0xF0);
 100:	20 e1       	ldi	r18, 0x10	; 16
 102:	c2 9f       	mul	r28, r18
 104:	c0 01       	movw	r24, r0
 106:	11 24       	eor	r1, r1
 108:	8b bb       	out	0x1b, r24	; 27
	lcd_data_enable();
 10a:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_data_enable>
}
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <cast>:
	TCNT0=0;
	TCCR0=0x07;
}

void cast(int x)
{
 112:	ef 92       	push	r14
 114:	ff 92       	push	r15
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
 11a:	cf 93       	push	r28
 11c:	8c 01       	movw	r16, r24
  int a;
  char pos=0x85;
 11e:	c5 e8       	ldi	r28, 0x85	; 133
  //lcd_cmd(0x85);
  for(int i=0;i<6;i++)
  {
	lcd_cmd(pos);
	a=x%10;
 120:	0f 2e       	mov	r0, r31
 122:	fa e0       	ldi	r31, 0x0A	; 10
 124:	ef 2e       	mov	r14, r31
 126:	f1 2c       	mov	r15, r1
 128:	f0 2d       	mov	r31, r0
  int a;
  char pos=0x85;
  //lcd_cmd(0x85);
  for(int i=0;i<6;i++)
  {
	lcd_cmd(pos);
 12a:	8c 2f       	mov	r24, r28
 12c:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_cmd>
	a=x%10;
	x=x/10;  
 130:	c8 01       	movw	r24, r16
 132:	b7 01       	movw	r22, r14
 134:	0e 94 c6 00 	call	0x18c	; 0x18c <__divmodhi4>
 138:	8b 01       	movw	r16, r22
	lcd_data(a+48);
 13a:	80 5d       	subi	r24, 0xD0	; 208
 13c:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_data>
	pos--;  
 140:	c1 50       	subi	r28, 0x01	; 1
void cast(int x)
{
  int a;
  char pos=0x85;
  //lcd_cmd(0x85);
  for(int i=0;i<6;i++)
 142:	cf 37       	cpi	r28, 0x7F	; 127
 144:	91 f7       	brne	.-28     	; 0x12a <cast+0x18>
	a=x%10;
	x=x/10;  
	lcd_data(a+48);
	pos--;  
  }	
} 
 146:	cf 91       	pop	r28
 148:	1f 91       	pop	r17
 14a:	0f 91       	pop	r16
 14c:	ff 90       	pop	r15
 14e:	ef 90       	pop	r14
 150:	08 95       	ret

00000152 <main>:
	_delay_ms(1);
}

void main()
{
	DDRB=DDRB&(1<<0);
 152:	87 b3       	in	r24, 0x17	; 23
 154:	81 70       	andi	r24, 0x01	; 1
 156:	87 bb       	out	0x17, r24	; 23
	cntr_init();
 158:	0e 94 36 00 	call	0x6c	; 0x6c <cntr_init>
	init();
 15c:	0e 94 5a 00 	call	0xb4	; 0xb4 <init>
	while(1)
	{
	  TCNT0=0;
 160:	12 be       	out	0x32, r1	; 50
 162:	2f ef       	ldi	r18, 0xFF	; 255
 164:	83 e2       	ldi	r24, 0x23	; 35
 166:	94 ef       	ldi	r25, 0xF4	; 244
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <main+0x16>
 170:	00 c0       	rjmp	.+0      	; 0x172 <main+0x20>
 172:	00 00       	nop
	  _delay_ms(10000);
	  int rpm=TCNT0*6;
 174:	82 b7       	in	r24, 0x32	; 50
	  cast(rpm);
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	9c 01       	movw	r18, r24
 17a:	22 0f       	add	r18, r18
 17c:	33 1f       	adc	r19, r19
 17e:	82 0f       	add	r24, r18
 180:	93 1f       	adc	r25, r19
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	0e 94 89 00 	call	0x112	; 0x112 <cast>
 18a:	ea cf       	rjmp	.-44     	; 0x160 <main+0xe>

0000018c <__divmodhi4>:
 18c:	97 fb       	bst	r25, 7
 18e:	07 2e       	mov	r0, r23
 190:	16 f4       	brtc	.+4      	; 0x196 <__divmodhi4+0xa>
 192:	00 94       	com	r0
 194:	07 d0       	rcall	.+14     	; 0x1a4 <__divmodhi4_neg1>
 196:	77 fd       	sbrc	r23, 7
 198:	09 d0       	rcall	.+18     	; 0x1ac <__divmodhi4_neg2>
 19a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <__udivmodhi4>
 19e:	07 fc       	sbrc	r0, 7
 1a0:	05 d0       	rcall	.+10     	; 0x1ac <__divmodhi4_neg2>
 1a2:	3e f4       	brtc	.+14     	; 0x1b2 <__divmodhi4_exit>

000001a4 <__divmodhi4_neg1>:
 1a4:	90 95       	com	r25
 1a6:	81 95       	neg	r24
 1a8:	9f 4f       	sbci	r25, 0xFF	; 255
 1aa:	08 95       	ret

000001ac <__divmodhi4_neg2>:
 1ac:	70 95       	com	r23
 1ae:	61 95       	neg	r22
 1b0:	7f 4f       	sbci	r23, 0xFF	; 255

000001b2 <__divmodhi4_exit>:
 1b2:	08 95       	ret

000001b4 <__udivmodhi4>:
 1b4:	aa 1b       	sub	r26, r26
 1b6:	bb 1b       	sub	r27, r27
 1b8:	51 e1       	ldi	r21, 0x11	; 17
 1ba:	07 c0       	rjmp	.+14     	; 0x1ca <__udivmodhi4_ep>

000001bc <__udivmodhi4_loop>:
 1bc:	aa 1f       	adc	r26, r26
 1be:	bb 1f       	adc	r27, r27
 1c0:	a6 17       	cp	r26, r22
 1c2:	b7 07       	cpc	r27, r23
 1c4:	10 f0       	brcs	.+4      	; 0x1ca <__udivmodhi4_ep>
 1c6:	a6 1b       	sub	r26, r22
 1c8:	b7 0b       	sbc	r27, r23

000001ca <__udivmodhi4_ep>:
 1ca:	88 1f       	adc	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	5a 95       	dec	r21
 1d0:	a9 f7       	brne	.-22     	; 0x1bc <__udivmodhi4_loop>
 1d2:	80 95       	com	r24
 1d4:	90 95       	com	r25
 1d6:	bc 01       	movw	r22, r24
 1d8:	cd 01       	movw	r24, r26
 1da:	08 95       	ret

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
