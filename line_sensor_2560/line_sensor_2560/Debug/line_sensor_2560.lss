
line_sensor_2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000002f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e21  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c82  00000000  00000000  000011c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000475  00000000  00000000  00001e47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000022bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005a8  00000000  00000000  00002340  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015a  00000000  00000000  000028e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00002a42  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	50 d0       	rcall	.+160    	; 0x196 <main>
  f6:	d1 c0       	rjmp	.+418    	; 0x29a <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <uart0_init>:
#define TE  (1<<5)
#define RE  (1<<7)

void uart0_init()
{
	UCSR0B = 0x00;							//disable while setting baud rate
  fa:	e1 ec       	ldi	r30, 0xC1	; 193
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	10 82       	st	Z, r1
	UCSR0A = 0x00;
 100:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
	UCSR0C = 0x06;							//8 bit
 104:	86 e0       	ldi	r24, 0x06	; 6
 106:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	UBRR0L = 0x5F; 							//9600BPS at 14745600Hz
 10a:	8f e5       	ldi	r24, 0x5F	; 95
 10c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	UBRR0H = 0x00;
 110:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UCSR0B = 0x98;
 114:	88 e9       	ldi	r24, 0x98	; 152
 116:	80 83       	st	Z, r24
 118:	08 95       	ret

0000011a <uart_tx>:


void uart_tx(char data)
{

	while(!(UCSR0A & TE));                       //waiting to transmit
 11a:	e0 ec       	ldi	r30, 0xC0	; 192
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	90 81       	ld	r25, Z
 120:	95 ff       	sbrs	r25, 5
 122:	fd cf       	rjmp	.-6      	; 0x11e <uart_tx+0x4>
	UDR0 = data;
 124:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 128:	08 95       	ret

0000012a <adc_init>:
}
void adc_init()
{
	ADMUX=ADMUX|(1<<6);		//ref 5 volt
 12a:	ec e7       	ldi	r30, 0x7C	; 124
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	80 64       	ori	r24, 0x40	; 64
 132:	80 83       	st	Z, r24
	ADMUX=ADMUX|(1<<7);	//ref 5 volt
 134:	80 81       	ld	r24, Z
 136:	80 68       	ori	r24, 0x80	; 128
 138:	80 83       	st	Z, r24
	ADMUX=ADMUX&~(1<<5);	//lower bit in 8
 13a:	80 81       	ld	r24, Z
 13c:	8f 7d       	andi	r24, 0xDF	; 223
 13e:	80 83       	st	Z, r24
	ADMUX=ADMUX&~(31<<0);	//mux select
 140:	80 81       	ld	r24, Z
 142:	80 7e       	andi	r24, 0xE0	; 224
 144:	80 83       	st	Z, r24
	ADCSRB=ADCSRB&~(1<<3);	//mux
 146:	eb e7       	ldi	r30, 0x7B	; 123
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	87 7f       	andi	r24, 0xF7	; 247
 14e:	80 83       	st	Z, r24
	ADCSRA=ADCSRA|(1<<7);	//adc enable
 150:	ea e7       	ldi	r30, 0x7A	; 122
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	80 68       	ori	r24, 0x80	; 128
 158:	80 83       	st	Z, r24
 15a:	08 95       	ret

0000015c <b2a>:
	
}
void b2a(int a)
{
 15c:	ef 92       	push	r14
 15e:	ff 92       	push	r15
 160:	0f 93       	push	r16
 162:	1f 93       	push	r17
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	8c 01       	movw	r16, r24
 16a:	c3 e0       	ldi	r28, 0x03	; 3
 16c:	d0 e0       	ldi	r29, 0x00	; 0
	char pos=0x85;
	int a1,i;
	for(i=0;i<3;i++)
	{
		a1=a%10;
 16e:	0f 2e       	mov	r0, r31
 170:	fa e0       	ldi	r31, 0x0A	; 10
 172:	ef 2e       	mov	r14, r31
 174:	f1 2c       	mov	r15, r1
 176:	f0 2d       	mov	r31, r0
		a=a/10;
 178:	c8 01       	movw	r24, r16
 17a:	b7 01       	movw	r22, r14
 17c:	67 d0       	rcall	.+206    	; 0x24c <__divmodhi4>
 17e:	8b 01       	movw	r16, r22
		uart_tx(a1+48);
 180:	80 5d       	subi	r24, 0xD0	; 208
 182:	cb df       	rcall	.-106    	; 0x11a <uart_tx>
 184:	21 97       	sbiw	r28, 0x01	; 1
}
void b2a(int a)
{
	char pos=0x85;
	int a1,i;
	for(i=0;i<3;i++)
 186:	c1 f7       	brne	.-16     	; 0x178 <b2a+0x1c>
		a1=a%10;
		a=a/10;
		uart_tx(a1+48);
		pos--;
	}
}
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	0f 91       	pop	r16
 190:	ff 90       	pop	r15
 192:	ef 90       	pop	r14
 194:	08 95       	ret

00000196 <main>:


int main(void)
{
	
	adc_init();
 196:	c9 df       	rcall	.-110    	; 0x12a <adc_init>
	uart0_init();
 198:	b0 df       	rcall	.-160    	; 0xfa <uart0_init>
 19a:	81 98       	cbi	0x10, 1	; 16
	//ADMUX=ADMUX|(1<<0);
	DDRF=DDRF&~(1<<1);
 19c:	0c e7       	ldi	r16, 0x7C	; 124
	while(1)
	{
		ADMUX=ADMUX|(1<<0);    //adc1
 19e:	10 e0       	ldi	r17, 0x00	; 0
 1a0:	ca e7       	ldi	r28, 0x7A	; 122
		ADCSRA=ADCSRA|(1<<6);  //start conversion
 1a2:	d0 e0       	ldi	r29, 0x00	; 0
 1a4:	0f 2e       	mov	r0, r31
		while(!(ADCSRA&(1<<ADIF)));
		//uart_tx(ADC);
		b2a(ADC);
 1a6:	f8 e7       	ldi	r31, 0x78	; 120
 1a8:	ef 2e       	mov	r14, r31
 1aa:	f1 2c       	mov	r15, r1
 1ac:	f0 2d       	mov	r31, r0
 1ae:	f8 01       	movw	r30, r16
	uart0_init();
	//ADMUX=ADMUX|(1<<0);
	DDRF=DDRF&~(1<<1);
	while(1)
	{
		ADMUX=ADMUX|(1<<0);    //adc1
 1b0:	80 81       	ld	r24, Z
 1b2:	81 60       	ori	r24, 0x01	; 1
 1b4:	80 83       	st	Z, r24
 1b6:	88 81       	ld	r24, Y
		ADCSRA=ADCSRA|(1<<6);  //start conversion
 1b8:	80 64       	ori	r24, 0x40	; 64
 1ba:	88 83       	st	Y, r24
 1bc:	88 81       	ld	r24, Y
		while(!(ADCSRA&(1<<ADIF)));
 1be:	84 ff       	sbrs	r24, 4
 1c0:	fd cf       	rjmp	.-6      	; 0x1bc <main+0x26>
 1c2:	f7 01       	movw	r30, r14
		//uart_tx(ADC);
		b2a(ADC);
 1c4:	80 81       	ld	r24, Z
 1c6:	91 81       	ldd	r25, Z+1	; 0x01
 1c8:	c9 df       	rcall	.-110    	; 0x15c <b2a>
 1ca:	88 81       	ld	r24, Y
		ADCSRA=ADCSRA|(1<<ADIF);  //clearing flag
 1cc:	80 61       	ori	r24, 0x10	; 16
 1ce:	88 83       	st	Y, r24
 1d0:	ff ef       	ldi	r31, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d2:	2f e7       	ldi	r18, 0x7F	; 127
 1d4:	84 e0       	ldi	r24, 0x04	; 4
 1d6:	f1 50       	subi	r31, 0x01	; 1
 1d8:	20 40       	sbci	r18, 0x00	; 0
 1da:	80 40       	sbci	r24, 0x00	; 0
 1dc:	e1 f7       	brne	.-8      	; 0x1d6 <main+0x40>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <main+0x4a>
 1e0:	00 00       	nop
 1e2:	f8 01       	movw	r30, r16
		_delay_ms(100);
		
		ADMUX=ADMUX|(1<<1);   //adc2
 1e4:	80 81       	ld	r24, Z
 1e6:	82 60       	ori	r24, 0x02	; 2
 1e8:	80 83       	st	Z, r24
 1ea:	88 81       	ld	r24, Y
		ADCSRA=ADCSRA|(1<<6);  //start conversion
 1ec:	80 64       	ori	r24, 0x40	; 64
 1ee:	88 83       	st	Y, r24
 1f0:	88 81       	ld	r24, Y
		while(!(ADCSRA&(1<<ADIF)));
 1f2:	84 ff       	sbrs	r24, 4
 1f4:	fd cf       	rjmp	.-6      	; 0x1f0 <main+0x5a>
 1f6:	f7 01       	movw	r30, r14
		b2a(ADC);
 1f8:	80 81       	ld	r24, Z
 1fa:	91 81       	ldd	r25, Z+1	; 0x01
 1fc:	af df       	rcall	.-162    	; 0x15c <b2a>
 1fe:	88 81       	ld	r24, Y
		ADCSRA=ADCSRA|(1<<ADIF);  //clearing flag
 200:	80 61       	ori	r24, 0x10	; 16
 202:	88 83       	st	Y, r24
 204:	ff ef       	ldi	r31, 0xFF	; 255
 206:	2f e7       	ldi	r18, 0x7F	; 127
 208:	84 e0       	ldi	r24, 0x04	; 4
 20a:	f1 50       	subi	r31, 0x01	; 1
 20c:	20 40       	sbci	r18, 0x00	; 0
 20e:	80 40       	sbci	r24, 0x00	; 0
 210:	e1 f7       	brne	.-8      	; 0x20a <main+0x74>
 212:	00 c0       	rjmp	.+0      	; 0x214 <main+0x7e>
 214:	00 00       	nop
 216:	f8 01       	movw	r30, r16
		_delay_ms(100);
		
		ADMUX=ADMUX|(3<<0);   //adc3
 218:	80 81       	ld	r24, Z
 21a:	83 60       	ori	r24, 0x03	; 3
 21c:	80 83       	st	Z, r24
 21e:	88 81       	ld	r24, Y
		ADCSRA=ADCSRA|(1<<6);  //start conversion
 220:	80 64       	ori	r24, 0x40	; 64
 222:	88 83       	st	Y, r24
 224:	88 81       	ld	r24, Y
		while(!(ADCSRA&(1<<ADIF)));
 226:	84 ff       	sbrs	r24, 4
 228:	fd cf       	rjmp	.-6      	; 0x224 <main+0x8e>
		b2a(ADC);
 22a:	f7 01       	movw	r30, r14
 22c:	80 81       	ld	r24, Z
 22e:	91 81       	ldd	r25, Z+1	; 0x01
 230:	95 df       	rcall	.-214    	; 0x15c <b2a>
 232:	88 81       	ld	r24, Y
		ADCSRA=ADCSRA|(1<<ADIF);  //clearing flag
 234:	80 61       	ori	r24, 0x10	; 16
 236:	88 83       	st	Y, r24
 238:	ff ef       	ldi	r31, 0xFF	; 255
 23a:	2f e7       	ldi	r18, 0x7F	; 127
 23c:	84 e0       	ldi	r24, 0x04	; 4
 23e:	f1 50       	subi	r31, 0x01	; 1
 240:	20 40       	sbci	r18, 0x00	; 0
 242:	80 40       	sbci	r24, 0x00	; 0
 244:	e1 f7       	brne	.-8      	; 0x23e <main+0xa8>
 246:	00 c0       	rjmp	.+0      	; 0x248 <main+0xb2>
 248:	00 00       	nop
 24a:	b1 cf       	rjmp	.-158    	; 0x1ae <main+0x18>

0000024c <__divmodhi4>:
 24c:	97 fb       	bst	r25, 7
 24e:	07 2e       	mov	r0, r23
 250:	16 f4       	brtc	.+4      	; 0x256 <__divmodhi4+0xa>
 252:	00 94       	com	r0
 254:	06 d0       	rcall	.+12     	; 0x262 <__divmodhi4_neg1>
 256:	77 fd       	sbrc	r23, 7
 258:	08 d0       	rcall	.+16     	; 0x26a <__divmodhi4_neg2>
 25a:	0b d0       	rcall	.+22     	; 0x272 <__udivmodhi4>
 25c:	07 fc       	sbrc	r0, 7
 25e:	05 d0       	rcall	.+10     	; 0x26a <__divmodhi4_neg2>
 260:	3e f4       	brtc	.+14     	; 0x270 <__divmodhi4_exit>

00000262 <__divmodhi4_neg1>:
 262:	90 95       	com	r25
 264:	81 95       	neg	r24
 266:	9f 4f       	sbci	r25, 0xFF	; 255
 268:	08 95       	ret

0000026a <__divmodhi4_neg2>:
 26a:	70 95       	com	r23
 26c:	61 95       	neg	r22
 26e:	7f 4f       	sbci	r23, 0xFF	; 255

00000270 <__divmodhi4_exit>:
 270:	08 95       	ret

00000272 <__udivmodhi4>:
 272:	aa 1b       	sub	r26, r26
 274:	bb 1b       	sub	r27, r27
 276:	51 e1       	ldi	r21, 0x11	; 17
 278:	07 c0       	rjmp	.+14     	; 0x288 <__udivmodhi4_ep>

0000027a <__udivmodhi4_loop>:
 27a:	aa 1f       	adc	r26, r26
 27c:	bb 1f       	adc	r27, r27
 27e:	a6 17       	cp	r26, r22
 280:	b7 07       	cpc	r27, r23
 282:	10 f0       	brcs	.+4      	; 0x288 <__udivmodhi4_ep>
 284:	a6 1b       	sub	r26, r22
 286:	b7 0b       	sbc	r27, r23

00000288 <__udivmodhi4_ep>:
 288:	88 1f       	adc	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	5a 95       	dec	r21
 28e:	a9 f7       	brne	.-22     	; 0x27a <__udivmodhi4_loop>
 290:	80 95       	com	r24
 292:	90 95       	com	r25
 294:	bc 01       	movw	r22, r24
 296:	cd 01       	movw	r24, r26
 298:	08 95       	ret

0000029a <_exit>:
 29a:	f8 94       	cli

0000029c <__stop_program>:
 29c:	ff cf       	rjmp	.-2      	; 0x29c <__stop_program>
