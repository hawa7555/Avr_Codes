
pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000140  00000000  00000000  00000157  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000cf  00000000  00000000  00000297  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000016b  00000000  00000000  00000366  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000004d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000e7  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000030  00000000  00000000  000005db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  0000060b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>
#include<util/delay.h>
int main()
{
int i;
  DDRB=DDRB|(1<<PB3);
  6c:	bb 9a       	sbi	0x17, 3	; 23
  DDRD=DDRD|(1<<PD7);
  6e:	8f 9a       	sbi	0x11, 7	; 17
 
  	TCNT0=TCNT2=0;
  70:	14 bc       	out	0x24, r1	; 36
  72:	84 b5       	in	r24, 0x24	; 36
  74:	82 bf       	out	0x32, r24	; 50
  	
	while(1)
	{
	    TCCR0=TCCR2=0x69;
  76:	79 e6       	ldi	r23, 0x69	; 105
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  78:	44 ec       	ldi	r20, 0xC4	; 196
  7a:	59 e0       	ldi	r21, 0x09	; 9
		for(i=0;i<=255;i++)
		{
	  		OCR0=OCR2=i;
	  		_delay_ms(10);
		}
		TCCR0=TCCR2=0x79;
  7c:	69 e7       	ldi	r22, 0x79	; 121
 
  	TCNT0=TCNT2=0;
  	
	while(1)
	{
	    TCCR0=TCCR2=0x69;
  7e:	75 bd       	out	0x25, r23	; 37
  80:	85 b5       	in	r24, 0x25	; 37
  82:	83 bf       	out	0x33, r24	; 51
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	30 e0       	ldi	r19, 0x00	; 0
		for(i=0;i<=255;i++)
		{
	  		OCR0=OCR2=i;
  88:	23 bd       	out	0x23, r18	; 35
  8a:	83 b5       	in	r24, 0x23	; 35
  8c:	8c bf       	out	0x3c, r24	; 60
  8e:	ca 01       	movw	r24, r20
  90:	01 97       	sbiw	r24, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <main+0x24>
  	TCNT0=TCNT2=0;
  	
	while(1)
	{
	    TCCR0=TCCR2=0x69;
		for(i=0;i<=255;i++)
  94:	2f 5f       	subi	r18, 0xFF	; 255
  96:	3f 4f       	sbci	r19, 0xFF	; 255
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	20 30       	cpi	r18, 0x00	; 0
  9c:	38 07       	cpc	r19, r24
  9e:	a1 f7       	brne	.-24     	; 0x88 <main+0x1c>
		{
	  		OCR0=OCR2=i;
	  		_delay_ms(10);
		}
		TCCR0=TCCR2=0x79;
  a0:	65 bd       	out	0x25, r22	; 37
  a2:	85 b5       	in	r24, 0x25	; 37
  a4:	83 bf       	out	0x33, r24	; 51
  a6:	20 e0       	ldi	r18, 0x00	; 0
  a8:	30 e0       	ldi	r19, 0x00	; 0
		for(i=0;i<=255;i++)
		{
	  		OCR0=OCR2=i;
  aa:	23 bd       	out	0x23, r18	; 35
  ac:	83 b5       	in	r24, 0x23	; 35
  ae:	8c bf       	out	0x3c, r24	; 60
  b0:	ca 01       	movw	r24, r20
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <main+0x46>
		{
	  		OCR0=OCR2=i;
	  		_delay_ms(10);
		}
		TCCR0=TCCR2=0x79;
		for(i=0;i<=255;i++)
  b6:	2f 5f       	subi	r18, 0xFF	; 255
  b8:	3f 4f       	sbci	r19, 0xFF	; 255
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	20 30       	cpi	r18, 0x00	; 0
  be:	38 07       	cpc	r19, r24
  c0:	a1 f7       	brne	.-24     	; 0xaa <main+0x3e>
  c2:	dd cf       	rjmp	.-70     	; 0x7e <main+0x12>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
