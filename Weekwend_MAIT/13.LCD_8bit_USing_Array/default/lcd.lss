
lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000192  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000192  00000206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000055  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000040a  00000000  00000000  00000287  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000182  00000000  00000000  00000691  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000336  00000000  00000000  00000813  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  00000b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000106  00000000  00000000  00000bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000b6  00000000  00000000  00000cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a8  00000000  00000000  00000d68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e9       	ldi	r30, 0x92	; 146
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 ac 00 	call	0x158	; 0x158 <main>
  7a:	0c 94 c7 00 	jmp	0x18e	; 0x18e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_display>:
  lcd_init();
  lcd_display();
}

void lcd_display()
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2b 97       	sbiw	r28, 0x0b	; 11
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
int i;
 char a[]="GOD IS ONE";
  96:	de 01       	movw	r26, r28
  98:	11 96       	adiw	r26, 0x01	; 1
  9a:	e0 e6       	ldi	r30, 0x60	; 96
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	8b e0       	ldi	r24, 0x0B	; 11
  a0:	01 90       	ld	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	81 50       	subi	r24, 0x01	; 1
  a6:	e1 f7       	brne	.-8      	; 0xa0 <lcd_display+0x1e>
  a8:	de 01       	movw	r26, r28
  aa:	11 96       	adiw	r26, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ac:	40 ed       	ldi	r20, 0xD0	; 208
  ae:	57 e0       	ldi	r21, 0x07	; 7
 PORTB=PORTB&~(1<<2);//EN=0;
 _delay_ms(1);
}
void lcd_data(char x)
{
 PORTA=x;
  b0:	28 ec       	ldi	r18, 0xC8	; 200
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	10 c0       	rjmp	.+32     	; 0xd6 <lcd_display+0x54>
  b6:	8b bb       	out	0x1b, r24	; 27
 PORTB=PORTB |(1<<0);//RS=1;
  b8:	c0 9a       	sbi	0x18, 0	; 24
 PORTB=PORTB&~(1<<1);//RW=0;
  ba:	c1 98       	cbi	0x18, 1	; 24
 PORTB=PORTB |(1<<2);//EN=1;
  bc:	c2 9a       	sbi	0x18, 2	; 24
 PORTB=PORTB&~(1<<2);//EN=0;
  be:	c2 98       	cbi	0x18, 2	; 24
  c0:	ca 01       	movw	r24, r20
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_display+0x40>
  c6:	88 ee       	ldi	r24, 0xE8	; 232
  c8:	93 e0       	ldi	r25, 0x03	; 3
  ca:	f9 01       	movw	r30, r18
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcd_display+0x4a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d2:	d9 f7       	brne	.-10     	; 0xca <lcd_display+0x48>
  d4:	11 96       	adiw	r26, 0x01	; 1

void lcd_display()
{
int i;
 char a[]="GOD IS ONE";
 for(i=0;a[i]!='\0';i++)
  d6:	8c 91       	ld	r24, X
  d8:	88 23       	and	r24, r24
  da:	69 f7       	brne	.-38     	; 0xb6 <lcd_display+0x34>
 {
  lcd_data(a[i]);
  _delay_ms(100);
 }
}
  dc:	2b 96       	adiw	r28, 0x0b	; 11
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	f8 94       	cli
  e2:	de bf       	out	0x3e, r29	; 62
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	cd bf       	out	0x3d, r28	; 61
  e8:	cf 91       	pop	r28
  ea:	df 91       	pop	r29
  ec:	08 95       	ret

000000ee <lcd_init>:
void lcd_init()
{
    DDRA=0xff;
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	8a bb       	out	0x1a, r24	; 26
	DDRB=DDRB|7;
  f2:	87 b3       	in	r24, 0x17	; 23
  f4:	87 60       	ori	r24, 0x07	; 7
  f6:	87 bb       	out	0x17, r24	; 23
	lcd_command(0x80);
}

void lcd_command(char x)
{
 PORTA=x;
  f8:	88 e3       	ldi	r24, 0x38	; 56
  fa:	8b bb       	out	0x1b, r24	; 27
 PORTB=PORTB&~(1<<0);//RS=0;
  fc:	c0 98       	cbi	0x18, 0	; 24
 PORTB=PORTB&~(1<<1);//RW=0;
  fe:	c1 98       	cbi	0x18, 1	; 24
 PORTB=PORTB |(1<<2);//EN=1;
 100:	c2 9a       	sbi	0x18, 2	; 24
 PORTB=PORTB&~(1<<2);//EN=0;
 102:	c2 98       	cbi	0x18, 2	; 24
 104:	20 ed       	ldi	r18, 0xD0	; 208
 106:	37 e0       	ldi	r19, 0x07	; 7
 108:	c9 01       	movw	r24, r18
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <lcd_init+0x1c>
	lcd_command(0x80);
}

void lcd_command(char x)
{
 PORTA=x;
 10e:	86 e0       	ldi	r24, 0x06	; 6
 110:	8b bb       	out	0x1b, r24	; 27
 PORTB=PORTB&~(1<<0);//RS=0;
 112:	c0 98       	cbi	0x18, 0	; 24
 PORTB=PORTB&~(1<<1);//RW=0;
 114:	c1 98       	cbi	0x18, 1	; 24
 PORTB=PORTB |(1<<2);//EN=1;
 116:	c2 9a       	sbi	0x18, 2	; 24
 PORTB=PORTB&~(1<<2);//EN=0;
 118:	c2 98       	cbi	0x18, 2	; 24
 11a:	c9 01       	movw	r24, r18
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <lcd_init+0x2e>
	lcd_command(0x80);
}

void lcd_command(char x)
{
 PORTA=x;
 120:	8e e0       	ldi	r24, 0x0E	; 14
 122:	8b bb       	out	0x1b, r24	; 27
 PORTB=PORTB&~(1<<0);//RS=0;
 124:	c0 98       	cbi	0x18, 0	; 24
 PORTB=PORTB&~(1<<1);//RW=0;
 126:	c1 98       	cbi	0x18, 1	; 24
 PORTB=PORTB |(1<<2);//EN=1;
 128:	c2 9a       	sbi	0x18, 2	; 24
 PORTB=PORTB&~(1<<2);//EN=0;
 12a:	c2 98       	cbi	0x18, 2	; 24
 12c:	c9 01       	movw	r24, r18
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <lcd_init+0x40>
	lcd_command(0x80);
}

void lcd_command(char x)
{
 PORTA=x;
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	8b bb       	out	0x1b, r24	; 27
 PORTB=PORTB&~(1<<0);//RS=0;
 136:	c0 98       	cbi	0x18, 0	; 24
 PORTB=PORTB&~(1<<1);//RW=0;
 138:	c1 98       	cbi	0x18, 1	; 24
 PORTB=PORTB |(1<<2);//EN=1;
 13a:	c2 9a       	sbi	0x18, 2	; 24
 PORTB=PORTB&~(1<<2);//EN=0;
 13c:	c2 98       	cbi	0x18, 2	; 24
 13e:	c9 01       	movw	r24, r18
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <lcd_init+0x52>
	lcd_command(0x80);
}

void lcd_command(char x)
{
 PORTA=x;
 144:	80 e8       	ldi	r24, 0x80	; 128
 146:	8b bb       	out	0x1b, r24	; 27
 PORTB=PORTB&~(1<<0);//RS=0;
 148:	c0 98       	cbi	0x18, 0	; 24
 PORTB=PORTB&~(1<<1);//RW=0;
 14a:	c1 98       	cbi	0x18, 1	; 24
 PORTB=PORTB |(1<<2);//EN=1;
 14c:	c2 9a       	sbi	0x18, 2	; 24
 PORTB=PORTB&~(1<<2);//EN=0;
 14e:	c2 98       	cbi	0x18, 2	; 24
 150:	c9 01       	movw	r24, r18
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <lcd_init+0x64>
	lcd_command(0x38);
	lcd_command(0x06);
	lcd_command(0x0E);
	lcd_command(0x01);
	lcd_command(0x80);
}
 156:	08 95       	ret

00000158 <main>:
void lcd_init(void );
void lcd_data(char );
void lcd_display(void );
int main()
{
  lcd_init();
 158:	0e 94 77 00 	call	0xee	; 0xee <lcd_init>
  lcd_display();
 15c:	0e 94 41 00 	call	0x82	; 0x82 <lcd_display>
}
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	08 95       	ret

00000166 <lcd_command>:
	lcd_command(0x80);
}

void lcd_command(char x)
{
 PORTA=x;
 166:	8b bb       	out	0x1b, r24	; 27
 PORTB=PORTB&~(1<<0);//RS=0;
 168:	c0 98       	cbi	0x18, 0	; 24
 PORTB=PORTB&~(1<<1);//RW=0;
 16a:	c1 98       	cbi	0x18, 1	; 24
 PORTB=PORTB |(1<<2);//EN=1;
 16c:	c2 9a       	sbi	0x18, 2	; 24
 PORTB=PORTB&~(1<<2);//EN=0;
 16e:	c2 98       	cbi	0x18, 2	; 24
 170:	80 ed       	ldi	r24, 0xD0	; 208
 172:	97 e0       	ldi	r25, 0x07	; 7
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <lcd_command+0xe>
 _delay_ms(1);
}
 178:	08 95       	ret

0000017a <lcd_data>:
void lcd_data(char x)
{
 PORTA=x;
 17a:	8b bb       	out	0x1b, r24	; 27
 PORTB=PORTB |(1<<0);//RS=1;
 17c:	c0 9a       	sbi	0x18, 0	; 24
 PORTB=PORTB&~(1<<1);//RW=0;
 17e:	c1 98       	cbi	0x18, 1	; 24
 PORTB=PORTB |(1<<2);//EN=1;
 180:	c2 9a       	sbi	0x18, 2	; 24
 PORTB=PORTB&~(1<<2);//EN=0;
 182:	c2 98       	cbi	0x18, 2	; 24
 184:	80 ed       	ldi	r24, 0xD0	; 208
 186:	97 e0       	ldi	r25, 0x07	; 7
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <lcd_data+0xe>
 _delay_ms(1);
}
 18c:	08 95       	ret

0000018e <_exit>:
 18e:	f8 94       	cli

00000190 <__stop_program>:
 190:	ff cf       	rjmp	.-2      	; 0x190 <__stop_program>
