
pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000102  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000122  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000140  00000000  00000000  0000013d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000cf  00000000  00000000  0000027d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000163  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000004b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000e4  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000040  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>
#include<util/delay.h>
int main()
{
int i;
  DDRB=DDRB|(1<<PB3);
  6c:	bb 9a       	sbi	0x17, 3	; 23
 
  	TCNT0=0;
  6e:	12 be       	out	0x32, r1	; 50
  	
	while(1)
	{
	    TCCR0=0x69;
  70:	59 e6       	ldi	r21, 0x69	; 105
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  72:	24 ec       	ldi	r18, 0xC4	; 196
  74:	39 e0       	ldi	r19, 0x09	; 9
		for(i=0;i<=255;i++)
		{
	  		OCR0=i;
	  		_delay_ms(10);
		}
		TCCR0=0x79;
  76:	49 e7       	ldi	r20, 0x79	; 121
 
  	TCNT0=0;
  	
	while(1)
	{
	    TCCR0=0x69;
  78:	53 bf       	out	0x33, r21	; 51
  7a:	80 e0       	ldi	r24, 0x00	; 0
  7c:	90 e0       	ldi	r25, 0x00	; 0
		for(i=0;i<=255;i++)
		{
	  		OCR0=i;
  7e:	8c bf       	out	0x3c, r24	; 60
  80:	f9 01       	movw	r30, r18
  82:	31 97       	sbiw	r30, 0x01	; 1
  84:	f1 f7       	brne	.-4      	; 0x82 <main+0x16>
  	TCNT0=0;
  	
	while(1)
	{
	    TCCR0=0x69;
		for(i=0;i<=255;i++)
  86:	01 96       	adiw	r24, 0x01	; 1
  88:	61 e0       	ldi	r22, 0x01	; 1
  8a:	80 30       	cpi	r24, 0x00	; 0
  8c:	96 07       	cpc	r25, r22
  8e:	b9 f7       	brne	.-18     	; 0x7e <main+0x12>
		{
	  		OCR0=i;
	  		_delay_ms(10);
		}
		TCCR0=0x79;
  90:	43 bf       	out	0x33, r20	; 51
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	90 e0       	ldi	r25, 0x00	; 0
		for(i=0;i<=255;i++)
		{
	  		OCR0=i;
  96:	8c bf       	out	0x3c, r24	; 60
  98:	f9 01       	movw	r30, r18
  9a:	31 97       	sbiw	r30, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <main+0x2e>
		{
	  		OCR0=i;
	  		_delay_ms(10);
		}
		TCCR0=0x79;
		for(i=0;i<=255;i++)
  9e:	01 96       	adiw	r24, 0x01	; 1
  a0:	61 e0       	ldi	r22, 0x01	; 1
  a2:	80 30       	cpi	r24, 0x00	; 0
  a4:	96 07       	cpc	r25, r22
  a6:	b9 f7       	brne	.-18     	; 0x96 <main+0x2a>
  a8:	e7 cf       	rjmp	.-50     	; 0x78 <main+0xc>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>
