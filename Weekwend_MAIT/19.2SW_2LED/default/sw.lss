
sw.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000008e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000102  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000075  00000000  00000000  0000011d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000003f  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000a4  00000000  00000000  000001d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000008c  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 45 00 	jmp	0x8a	; 0x8a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#define LED0_OFF (PORTC=PORTC&~(1<<0))
#define LED1_OFF (PORTC=PORTC&~(1<<1))
int main()
{
 PA0_INPUT;
  6c:	d0 98       	cbi	0x1a, 0	; 26
 PA1_INPUT;
  6e:	d1 98       	cbi	0x1a, 1	; 26
 PC0_OUTPUT;
  70:	a0 9a       	sbi	0x14, 0	; 20
 PC1_OUTPUT;
  72:	a1 9a       	sbi	0x14, 1	; 20

  while(1)
  {
    if(SW0)
  74:	c8 9b       	sbis	0x19, 0	; 25
  76:	02 c0       	rjmp	.+4      	; 0x7c <main+0x10>
	{
	  LED0_ON;
  78:	a8 9a       	sbi	0x15, 0	; 21
  7a:	fc cf       	rjmp	.-8      	; 0x74 <main+0x8>
	}
	else if(SW1)
  7c:	c9 9b       	sbis	0x19, 1	; 25
  7e:	02 c0       	rjmp	.+4      	; 0x84 <main+0x18>
	{
	 LED1_ON;
  80:	a9 9a       	sbi	0x15, 1	; 21
  82:	f8 cf       	rjmp	.-16     	; 0x74 <main+0x8>
	}
	else
	{
	  LED0_OFF;
  84:	a8 98       	cbi	0x15, 0	; 21
	  LED1_OFF;
  86:	a9 98       	cbi	0x15, 1	; 21
  88:	f5 cf       	rjmp	.-22     	; 0x74 <main+0x8>

0000008a <_exit>:
  8a:	f8 94       	cli

0000008c <__stop_program>:
  8c:	ff cf       	rjmp	.-2      	; 0x8c <__stop_program>
