
int0_int1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000026e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000026e  000002e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000c2  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000004fe  00000000  00000000  000003d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001aa  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000451  00000000  00000000  00000a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b0  00000000  00000000  00000ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000016e  00000000  00000000  00000f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001de  00000000  00000000  000010ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d8  00000000  00000000  000012c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_2>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e6       	ldi	r30, 0x6E	; 110
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 0c 01 	call	0x218	; 0x218 <main>
  7a:	0c 94 35 01 	jmp	0x26a	; 0x26a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <int0_int1_init>:
 }

}
void int0_int1_init()
{
  sei();//enable Global interrupt bit
  82:	78 94       	sei
  GICR=GICR|(1<<INT0)|(1<<INT1);
  84:	8b b7       	in	r24, 0x3b	; 59
  86:	80 6c       	ori	r24, 0xC0	; 192
  88:	8b bf       	out	0x3b, r24	; 59
  MCUCR=MCUCR|0xA;//falling edge at INT0
  8a:	85 b7       	in	r24, 0x35	; 53
  8c:	8a 60       	ori	r24, 0x0A	; 10
  8e:	85 bf       	out	0x35, r24	; 53
}
  90:	08 95       	ret

00000092 <__vector_1>:
ISR(INT0_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	8f 93       	push	r24
  a6:	9f 93       	push	r25
  a8:	ef 93       	push	r30
  aa:	ff 93       	push	r31
 cli();
  ac:	f8 94       	cli
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b2:	48 ec       	ldi	r20, 0xC8	; 200
  b4:	50 e0       	ldi	r21, 0x00	; 0
 int i;
 for(i=0;i<4;i++)
 {  
   PORTA=PORTA|(1<<0);
  b6:	d8 9a       	sbi	0x1b, 0	; 27
  b8:	80 e1       	ldi	r24, 0x10	; 16
  ba:	97 e2       	ldi	r25, 0x27	; 39
  bc:	fa 01       	movw	r30, r20
  be:	31 97       	sbiw	r30, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <__vector_1+0x2c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c4:	d9 f7       	brne	.-10     	; 0xbc <__vector_1+0x2a>
   _delay_ms(1000);
   PORTA=PORTA&~(1<<0);
  c6:	d8 98       	cbi	0x1b, 0	; 27
  c8:	80 e1       	ldi	r24, 0x10	; 16
  ca:	97 e2       	ldi	r25, 0x27	; 39
  cc:	fa 01       	movw	r30, r20
  ce:	31 97       	sbiw	r30, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <__vector_1+0x3c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d4:	d9 f7       	brne	.-10     	; 0xcc <__vector_1+0x3a>
}
ISR(INT0_vect)
{
 cli();
 int i;
 for(i=0;i<4;i++)
  d6:	2f 5f       	subi	r18, 0xFF	; 255
  d8:	3f 4f       	sbci	r19, 0xFF	; 255
  da:	24 30       	cpi	r18, 0x04	; 4
  dc:	31 05       	cpc	r19, r1
  de:	59 f7       	brne	.-42     	; 0xb6 <__vector_1+0x24>
   PORTA=PORTA|(1<<0);
   _delay_ms(1000);
   PORTA=PORTA&~(1<<0);
   _delay_ms(1000);
}
}
  e0:	ff 91       	pop	r31
  e2:	ef 91       	pop	r30
  e4:	9f 91       	pop	r25
  e6:	8f 91       	pop	r24
  e8:	5f 91       	pop	r21
  ea:	4f 91       	pop	r20
  ec:	3f 91       	pop	r19
  ee:	2f 91       	pop	r18
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <__vector_2>:
ISR(INT1_vect)
{
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	2f 93       	push	r18
 106:	3f 93       	push	r19
 108:	4f 93       	push	r20
 10a:	5f 93       	push	r21
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
 110:	ef 93       	push	r30
 112:	ff 93       	push	r31
 114:	20 e0       	ldi	r18, 0x00	; 0
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	48 ec       	ldi	r20, 0xC8	; 200
 11a:	50 e0       	ldi	r21, 0x00	; 0
 int i;
 for(i=0;i<4;i++)
 {  
   PORTA=PORTA|(1<<1);
 11c:	d9 9a       	sbi	0x1b, 1	; 27
 11e:	80 e1       	ldi	r24, 0x10	; 16
 120:	97 e2       	ldi	r25, 0x27	; 39
 122:	fa 01       	movw	r30, r20
 124:	31 97       	sbiw	r30, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <__vector_2+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 128:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 12a:	d9 f7       	brne	.-10     	; 0x122 <__vector_2+0x28>
   _delay_ms(1000);
   PORTA=PORTA&~(1<<1);
 12c:	d9 98       	cbi	0x1b, 1	; 27
 12e:	80 e1       	ldi	r24, 0x10	; 16
 130:	97 e2       	ldi	r25, 0x27	; 39
 132:	fa 01       	movw	r30, r20
 134:	31 97       	sbiw	r30, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <__vector_2+0x3a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 138:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 13a:	d9 f7       	brne	.-10     	; 0x132 <__vector_2+0x38>
}
}
ISR(INT1_vect)
{
 int i;
 for(i=0;i<4;i++)
 13c:	2f 5f       	subi	r18, 0xFF	; 255
 13e:	3f 4f       	sbci	r19, 0xFF	; 255
 140:	24 30       	cpi	r18, 0x04	; 4
 142:	31 05       	cpc	r19, r1
 144:	59 f7       	brne	.-42     	; 0x11c <__vector_2+0x22>
   PORTA=PORTA|(1<<1);
   _delay_ms(1000);
   PORTA=PORTA&~(1<<1);
   _delay_ms(1000);
}
}
 146:	ff 91       	pop	r31
 148:	ef 91       	pop	r30
 14a:	9f 91       	pop	r25
 14c:	8f 91       	pop	r24
 14e:	5f 91       	pop	r21
 150:	4f 91       	pop	r20
 152:	3f 91       	pop	r19
 154:	2f 91       	pop	r18
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <lcd_command>:
    lcd_command(0x28);
	lcd_command(0x0E);
}
void lcd_command(char x)
{
 PORTB=(x&0xf0);  //upper 4 bit
 160:	28 2f       	mov	r18, r24
 162:	20 7f       	andi	r18, 0xF0	; 240
 164:	28 bb       	out	0x18, r18	; 24
 _delay_ms(1);
}

void lcd_command_enable_to_write()
{
 PORTB=PORTB&~(1<<0);//RS=0;
 166:	c0 98       	cbi	0x18, 0	; 24
 PORTB=PORTB&~(1<<1);//RW=0;
 168:	c1 98       	cbi	0x18, 1	; 24
 PORTB=PORTB |(1<<2);//EN=1;
 16a:	c2 9a       	sbi	0x18, 2	; 24
 PORTB=PORTB&~(1<<2);//EN=0;
 16c:	c2 98       	cbi	0x18, 2	; 24
 16e:	20 ed       	ldi	r18, 0xD0	; 208
 170:	37 e0       	ldi	r19, 0x07	; 7
 172:	f9 01       	movw	r30, r18
 174:	31 97       	sbiw	r30, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <lcd_command+0x14>
}
void lcd_command(char x)
{
 PORTB=(x&0xf0);  //upper 4 bit
 lcd_command_enable_to_write();
 PORTB=((x<<4)&0xf0); //lower 4 bit
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	44 e0       	ldi	r20, 0x04	; 4
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	4a 95       	dec	r20
 182:	e1 f7       	brne	.-8      	; 0x17c <lcd_command+0x1c>
 184:	88 bb       	out	0x18, r24	; 24
 _delay_ms(1);
}

void lcd_command_enable_to_write()
{
 PORTB=PORTB&~(1<<0);//RS=0;
 186:	c0 98       	cbi	0x18, 0	; 24
 PORTB=PORTB&~(1<<1);//RW=0;
 188:	c1 98       	cbi	0x18, 1	; 24
 PORTB=PORTB |(1<<2);//EN=1;
 18a:	c2 9a       	sbi	0x18, 2	; 24
 PORTB=PORTB&~(1<<2);//EN=0;
 18c:	c2 98       	cbi	0x18, 2	; 24
 18e:	c9 01       	movw	r24, r18
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd_command+0x30>
{
 PORTB=(x&0xf0);  //upper 4 bit
 lcd_command_enable_to_write();
 PORTB=((x<<4)&0xf0); //lower 4 bit
 lcd_command_enable_to_write();
}
 194:	08 95       	ret

00000196 <lcd_init>:
  }

}
void lcd_init()
{
    DDRB=0xff;
 196:	8f ef       	ldi	r24, 0xFF	; 255
 198:	87 bb       	out	0x17, r24	; 23
	lcd_command(0x02);
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_command>
    lcd_command(0x28);
 1a0:	88 e2       	ldi	r24, 0x28	; 40
 1a2:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_command>
	lcd_command(0x0E);
 1a6:	8e e0       	ldi	r24, 0x0E	; 14
 1a8:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_command>
}
 1ac:	08 95       	ret

000001ae <lcd_data>:
 PORTB=((x<<4)&0xf0); //lower 4 bit
 lcd_command_enable_to_write();
}
void lcd_data(char x)
{
 PORTB=(x&0xf0);  //upper 4 bit
 1ae:	28 2f       	mov	r18, r24
 1b0:	20 7f       	andi	r18, 0xF0	; 240
 1b2:	28 bb       	out	0x18, r18	; 24
 PORTB=((x<<4)&0xf0); //lower 4 bit
 lcd_data_enable_to_write();
}
void lcd_data_enable_to_write()
{
 PORTB=PORTB |(1<<0);//RS=0;
 1b4:	c0 9a       	sbi	0x18, 0	; 24
 PORTB=PORTB&~(1<<1);//RW=0;
 1b6:	c1 98       	cbi	0x18, 1	; 24
 PORTB=PORTB |(1<<2);//EN=1;
 1b8:	c2 9a       	sbi	0x18, 2	; 24
 PORTB=PORTB&~(1<<2);//EN=0;
 1ba:	c2 98       	cbi	0x18, 2	; 24
 1bc:	20 ed       	ldi	r18, 0xD0	; 208
 1be:	37 e0       	ldi	r19, 0x07	; 7
 1c0:	f9 01       	movw	r30, r18
 1c2:	31 97       	sbiw	r30, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <lcd_data+0x14>
}
void lcd_data(char x)
{
 PORTB=(x&0xf0);  //upper 4 bit
 lcd_data_enable_to_write();
 PORTB=((x<<4)&0xf0); //lower 4 bit
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	54 e0       	ldi	r21, 0x04	; 4
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	5a 95       	dec	r21
 1d0:	e1 f7       	brne	.-8      	; 0x1ca <lcd_data+0x1c>
 1d2:	88 bb       	out	0x18, r24	; 24
 lcd_data_enable_to_write();
}
void lcd_data_enable_to_write()
{
 PORTB=PORTB |(1<<0);//RS=0;
 1d4:	c0 9a       	sbi	0x18, 0	; 24
 PORTB=PORTB&~(1<<1);//RW=0;
 1d6:	c1 98       	cbi	0x18, 1	; 24
 PORTB=PORTB |(1<<2);//EN=1;
 1d8:	c2 9a       	sbi	0x18, 2	; 24
 PORTB=PORTB&~(1<<2);//EN=0;
 1da:	c2 98       	cbi	0x18, 2	; 24
 1dc:	c9 01       	movw	r24, r18
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <lcd_data+0x30>
{
 PORTB=(x&0xf0);  //upper 4 bit
 lcd_data_enable_to_write();
 PORTB=((x<<4)&0xf0); //lower 4 bit
 lcd_data_enable_to_write();
}
 1e2:	08 95       	ret

000001e4 <lcd_string>:
   _delay_ms(1000);
}
}

void lcd_string(const char *x)//x=2000
{
 1e4:	0f 93       	push	r16
 1e6:	1f 93       	push	r17
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
 1ec:	ec 01       	movw	r28, r24
 1ee:	08 ec       	ldi	r16, 0xC8	; 200
 1f0:	10 e0       	ldi	r17, 0x00	; 0
 1f2:	0a c0       	rjmp	.+20     	; 0x208 <lcd_string+0x24>
  
  while(*x !=  '\0')
  {
    lcd_data(*x++);
 1f4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_data>
 1f8:	88 eb       	ldi	r24, 0xB8	; 184
 1fa:	9b e0       	ldi	r25, 0x0B	; 11
 1fc:	f8 01       	movw	r30, r16
 1fe:	31 97       	sbiw	r30, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_string+0x1a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 202:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 204:	d9 f7       	brne	.-10     	; 0x1fc <lcd_string+0x18>
 206:	21 96       	adiw	r28, 0x01	; 1
}

void lcd_string(const char *x)//x=2000
{
  
  while(*x !=  '\0')
 208:	88 81       	ld	r24, Y
 20a:	88 23       	and	r24, r24
 20c:	99 f7       	brne	.-26     	; 0x1f4 <lcd_string+0x10>
    lcd_data(*x++);
	_delay_ms(300);
	//x++; //2001//2002
  }

}
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	1f 91       	pop	r17
 214:	0f 91       	pop	r16
 216:	08 95       	ret

00000218 <main>:
void lcd_command_enable_to_write();
void lcd_data(char );
void lcd_string(const char *);
int main()
{
 DDRA=DDRA|3;
 218:	8a b3       	in	r24, 0x1a	; 26
 21a:	83 60       	ori	r24, 0x03	; 3
 21c:	8a bb       	out	0x1a, r24	; 26
 lcd_init();
 21e:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_init>
 }

}
void int0_int1_init()
{
  sei();//enable Global interrupt bit
 222:	78 94       	sei
  GICR=GICR|(1<<INT0)|(1<<INT1);
 224:	8b b7       	in	r24, 0x3b	; 59
 226:	80 6c       	ori	r24, 0xC0	; 192
 228:	8b bf       	out	0x3b, r24	; 59
  MCUCR=MCUCR|0xA;//falling edge at INT0
 22a:	85 b7       	in	r24, 0x35	; 53
 22c:	8a 60       	ori	r24, 0x0A	; 10
 22e:	85 bf       	out	0x35, r24	; 53
 lcd_init();
 int0_int1_init();

 while(1)
 { 
  lcd_command(0x80);
 230:	80 e8       	ldi	r24, 0x80	; 128
 232:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_command>
  lcd_string("Hello Friends");
 236:	80 e6       	ldi	r24, 0x60	; 96
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_string>
  lcd_command(0x01);
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_command>
 244:	f5 cf       	rjmp	.-22     	; 0x230 <main+0x18>

00000246 <lcd_data_enable_to_write>:
 PORTB=((x<<4)&0xf0); //lower 4 bit
 lcd_data_enable_to_write();
}
void lcd_data_enable_to_write()
{
 PORTB=PORTB |(1<<0);//RS=0;
 246:	c0 9a       	sbi	0x18, 0	; 24
 PORTB=PORTB&~(1<<1);//RW=0;
 248:	c1 98       	cbi	0x18, 1	; 24
 PORTB=PORTB |(1<<2);//EN=1;
 24a:	c2 9a       	sbi	0x18, 2	; 24
 PORTB=PORTB&~(1<<2);//EN=0;
 24c:	c2 98       	cbi	0x18, 2	; 24
 24e:	80 ed       	ldi	r24, 0xD0	; 208
 250:	97 e0       	ldi	r25, 0x07	; 7
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <lcd_data_enable_to_write+0xc>
 _delay_ms(1);
}
 256:	08 95       	ret

00000258 <lcd_command_enable_to_write>:

void lcd_command_enable_to_write()
{
 PORTB=PORTB&~(1<<0);//RS=0;
 258:	c0 98       	cbi	0x18, 0	; 24
 PORTB=PORTB&~(1<<1);//RW=0;
 25a:	c1 98       	cbi	0x18, 1	; 24
 PORTB=PORTB |(1<<2);//EN=1;
 25c:	c2 9a       	sbi	0x18, 2	; 24
 PORTB=PORTB&~(1<<2);//EN=0;
 25e:	c2 98       	cbi	0x18, 2	; 24
 260:	80 ed       	ldi	r24, 0xD0	; 208
 262:	97 e0       	ldi	r25, 0x07	; 7
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <lcd_command_enable_to_write+0xc>
 _delay_ms(1);
}
 268:	08 95       	ret

0000026a <_exit>:
 26a:	f8 94       	cli

0000026c <__stop_program>:
 26c:	ff cf       	rjmp	.-2      	; 0x26c <__stop_program>
