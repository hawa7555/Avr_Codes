
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000001b0  00000224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000990  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005d7  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001b5  00000000  00000000  00000fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000385  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00001524  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000013c  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000100  00000000  00000000  000016e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 eb       	ldi	r30, 0xB0	; 176
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c1 00 	call	0x182	; 0x182 <main>
  8a:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <txstring>:
		
	
	return 0;
}
void txstring(char *x)
{
  92:	fc 01       	movw	r30, r24
	while(*x)
  94:	80 81       	ld	r24, Z
  96:	88 23       	and	r24, r24
  98:	81 f0       	breq	.+32     	; 0xba <txstring+0x28>
	}
		
	
	return 0;
}
void txstring(char *x)
  9a:	31 96       	adiw	r30, 0x01	; 1
{
	while(*x)
	{
		UDR=*x;
  9c:	8c b9       	out	0x0c, r24	; 12
	while( (UCSRA&(1<<UDRE))==0){}
  9e:	5d 9b       	sbis	0x0b, 5	; 11
  a0:	fe cf       	rjmp	.-4      	; 0x9e <txstring+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	90 e7       	ldi	r25, 0x70	; 112
  a6:	a2 e0       	ldi	r26, 0x02	; 2
  a8:	81 50       	subi	r24, 0x01	; 1
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	a0 40       	sbci	r26, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <txstring+0x16>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <txstring+0x20>
  b2:	00 00       	nop
	
	return 0;
}
void txstring(char *x)
{
	while(*x)
  b4:	81 91       	ld	r24, Z+
  b6:	88 23       	and	r24, r24
  b8:	89 f7       	brne	.-30     	; 0x9c <txstring+0xa>
  ba:	08 95       	ret

000000bc <usart_init>:
	_delay_ms(100);
}
}
void usart_init()
{
	UCSRB=UCSRB|(1<<TXEN);
  bc:	53 9a       	sbi	0x0a, 3	; 10
	UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  be:	80 b5       	in	r24, 0x20	; 32
  c0:	86 68       	ori	r24, 0x86	; 134
  c2:	80 bd       	out	0x20, r24	; 32
	UBRRL=0x33;
  c4:	83 e3       	ldi	r24, 0x33	; 51
  c6:	89 b9       	out	0x09, r24	; 9
}
  c8:	08 95       	ret

000000ca <gsm>:

   void gsm()
{
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	0f 92       	push	r0
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
   char ctrlz[]={26};
  d4:	8a e1       	ldi	r24, 0x1A	; 26
  d6:	89 83       	std	Y+1, r24	; 0x01
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	94 e3       	ldi	r25, 0x34	; 52
  dc:	ac e0       	ldi	r26, 0x0C	; 12
  de:	81 50       	subi	r24, 0x01	; 1
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	a0 40       	sbci	r26, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <gsm+0x14>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <gsm+0x1e>
  e8:	00 00       	nop
//txstring("AT+CMGF=1\r");
_delay_ms(500);
txstring("ATD8700070981;\r");
  ea:	80 e6       	ldi	r24, 0x60	; 96
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 49 00 	call	0x92	; 0x92 <txstring>
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	93 ed       	ldi	r25, 0xD3	; 211
  f6:	a0 e3       	ldi	r26, 0x30	; 48
  f8:	81 50       	subi	r24, 0x01	; 1
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	a0 40       	sbci	r26, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <gsm+0x2e>
 100:	00 c0       	rjmp	.+0      	; 0x102 <gsm+0x38>
 102:	00 00       	nop
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	91 ee       	ldi	r25, 0xE1	; 225
 108:	a4 e0       	ldi	r26, 0x04	; 4
 10a:	81 50       	subi	r24, 0x01	; 1
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	a0 40       	sbci	r26, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <gsm+0x40>
 112:	00 c0       	rjmp	.+0      	; 0x114 <gsm+0x4a>
 114:	00 00       	nop
_delay_ms(2000);
//txstring("HELLOOOO");
_delay_ms(200);
txstring(ctrlz);
 116:	ce 01       	movw	r24, r28
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	0e 94 49 00 	call	0x92	; 0x92 <txstring>

}
 11e:	0f 90       	pop	r0
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	08 95       	ret

00000126 <gsm1>:

void gsm1()
{
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	0f 92       	push	r0
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62
char ctrlz[]={26};
 130:	8a e1       	ldi	r24, 0x1A	; 26
 132:	89 83       	std	Y+1, r24	; 0x01
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	94 e3       	ldi	r25, 0x34	; 52
 138:	ac e0       	ldi	r26, 0x0C	; 12
 13a:	81 50       	subi	r24, 0x01	; 1
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	a0 40       	sbci	r26, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <gsm1+0x14>
 142:	00 c0       	rjmp	.+0      	; 0x144 <gsm1+0x1e>
 144:	00 00       	nop
//txstring("AT+CMGF=1\r");
_delay_ms(500);
txstring("ATH\r");
 146:	80 e7       	ldi	r24, 0x70	; 112
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 49 00 	call	0x92	; 0x92 <txstring>
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	93 ed       	ldi	r25, 0xD3	; 211
 152:	a0 e3       	ldi	r26, 0x30	; 48
 154:	81 50       	subi	r24, 0x01	; 1
 156:	90 40       	sbci	r25, 0x00	; 0
 158:	a0 40       	sbci	r26, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <gsm1+0x2e>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <gsm1+0x38>
 15e:	00 00       	nop
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	91 ee       	ldi	r25, 0xE1	; 225
 164:	a4 e0       	ldi	r26, 0x04	; 4
 166:	81 50       	subi	r24, 0x01	; 1
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	a0 40       	sbci	r26, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <gsm1+0x40>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <gsm1+0x4a>
 170:	00 00       	nop
_delay_ms(2000);
//txstring("HELLOOOO");
_delay_ms(200);
txstring(ctrlz);
 172:	ce 01       	movw	r24, r28
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	0e 94 49 00 	call	0x92	; 0x92 <txstring>

}
 17a:	0f 90       	pop	r0
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <main>:
void usart_init();
void gsm();
void gsm1();
int main()
{
	DDRA=0x00;
 182:	1a ba       	out	0x1a, r1	; 26
	DDRB=0x03;
 184:	83 e0       	ldi	r24, 0x03	; 3
 186:	87 bb       	out	0x17, r24	; 23
	usart_init();
 188:	0e 94 5e 00 	call	0xbc	; 0xbc <usart_init>
	while(1)
	{
		if(PINA&0x01)
		{
			gsm();
			PORTB=0x01;
 18c:	c1 e0       	ldi	r28, 0x01	; 1
		}
		else if(PINA&0x02)
		{
			
		    gsm1();
			PORTB=0x02;
 18e:	d2 e0       	ldi	r29, 0x02	; 2
	DDRA=0x00;
	DDRB=0x03;
	usart_init();
	while(1)
	{
		if(PINA&0x01)
 190:	c8 9b       	sbis	0x19, 0	; 25
 192:	04 c0       	rjmp	.+8      	; 0x19c <main+0x1a>
		{
			gsm();
 194:	0e 94 65 00 	call	0xca	; 0xca <gsm>
			PORTB=0x01;
 198:	c8 bb       	out	0x18, r28	; 24
 19a:	fa cf       	rjmp	.-12     	; 0x190 <main+0xe>
		}
		else if(PINA&0x02)
 19c:	c9 9b       	sbis	0x19, 1	; 25
 19e:	04 c0       	rjmp	.+8      	; 0x1a8 <main+0x26>
		{
			
		    gsm1();
 1a0:	0e 94 93 00 	call	0x126	; 0x126 <gsm1>
			PORTB=0x02;
 1a4:	d8 bb       	out	0x18, r29	; 24
 1a6:	f4 cf       	rjmp	.-24     	; 0x190 <main+0xe>
		}
		else
		{
			PORTB=0x00;
 1a8:	18 ba       	out	0x18, r1	; 24
 1aa:	f2 cf       	rjmp	.-28     	; 0x190 <main+0xe>

000001ac <_exit>:
 1ac:	f8 94       	cli

000001ae <__stop_program>:
 1ae:	ff cf       	rjmp	.-2      	; 0x1ae <__stop_program>
