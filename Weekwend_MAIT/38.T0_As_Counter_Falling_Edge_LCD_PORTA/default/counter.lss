
counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000009b  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000439  00000000  00000000  000002f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000018b  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000360  00000000  00000000  000008b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000090  00000000  00000000  00000c18  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000150  00000000  00000000  00000ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000c1  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a8 00 	call	0x150	; 0x150 <main>
  64:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <counter_init>:
  }
}
void counter_init()
{

 DDRB=DDRB&~(1<<0);
  6c:	b8 98       	cbi	0x17, 0	; 23
 TCNT0=0;//0!='0'
  6e:	12 be       	out	0x32, r1	; 50
 TCCR0=0x06;
  70:	86 e0       	ldi	r24, 0x06	; 6
  72:	83 bf       	out	0x33, r24	; 51
}
  74:	08 95       	ret

00000076 <lcd_command>:
	lcd_command(0x0E);

}
void lcd_command(char x)
{
 PORTA=(x&0xf0);  //upper 4 bit
  76:	28 2f       	mov	r18, r24
  78:	20 7f       	andi	r18, 0xF0	; 240
  7a:	2b bb       	out	0x1b, r18	; 27
 _delay_ms(1);
}

void lcd_command_enable_to_write()
{
 PORTA=PORTA&~(1<<0);//RS=0;
  7c:	d8 98       	cbi	0x1b, 0	; 27
 PORTA=PORTA&~(1<<1);//RW=0;
  7e:	d9 98       	cbi	0x1b, 1	; 27
 PORTA=PORTA |(1<<2);//EN=1;
  80:	da 9a       	sbi	0x1b, 2	; 27
 PORTA=PORTA&~(1<<2);//EN=0;
  82:	da 98       	cbi	0x1b, 2	; 27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  84:	20 ed       	ldi	r18, 0xD0	; 208
  86:	37 e0       	ldi	r19, 0x07	; 7
  88:	f9 01       	movw	r30, r18
  8a:	31 97       	sbiw	r30, 0x01	; 1
  8c:	f1 f7       	brne	.-4      	; 0x8a <lcd_command+0x14>
}
void lcd_command(char x)
{
 PORTA=(x&0xf0);  //upper 4 bit
 lcd_command_enable_to_write();
 PORTA=((x<<4)&0xf0); //lower 4 bit
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	44 e0       	ldi	r20, 0x04	; 4
  92:	88 0f       	add	r24, r24
  94:	99 1f       	adc	r25, r25
  96:	4a 95       	dec	r20
  98:	e1 f7       	brne	.-8      	; 0x92 <lcd_command+0x1c>
  9a:	8b bb       	out	0x1b, r24	; 27
 _delay_ms(1);
}

void lcd_command_enable_to_write()
{
 PORTA=PORTA&~(1<<0);//RS=0;
  9c:	d8 98       	cbi	0x1b, 0	; 27
 PORTA=PORTA&~(1<<1);//RW=0;
  9e:	d9 98       	cbi	0x1b, 1	; 27
 PORTA=PORTA |(1<<2);//EN=1;
  a0:	da 9a       	sbi	0x1b, 2	; 27
 PORTA=PORTA&~(1<<2);//EN=0;
  a2:	da 98       	cbi	0x1b, 2	; 27
  a4:	c9 01       	movw	r24, r18
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <lcd_command+0x30>
{
 PORTA=(x&0xf0);  //upper 4 bit
 lcd_command_enable_to_write();
 PORTA=((x<<4)&0xf0); //lower 4 bit
 lcd_command_enable_to_write();
}
  aa:	08 95       	ret

000000ac <lcd_init>:
 TCNT0=0;//0!='0'
 TCCR0=0x06;
}
void lcd_init()
{
    DDRA=0xff;
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	8a bb       	out	0x1a, r24	; 26
	lcd_command(0x02);
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	0e 94 3b 00 	call	0x76	; 0x76 <lcd_command>
    lcd_command(0x28);
  b6:	88 e2       	ldi	r24, 0x28	; 40
  b8:	0e 94 3b 00 	call	0x76	; 0x76 <lcd_command>
	lcd_command(0x0E);
  bc:	8e e0       	ldi	r24, 0x0E	; 14
  be:	0e 94 3b 00 	call	0x76	; 0x76 <lcd_command>

}
  c2:	08 95       	ret

000000c4 <lcd_data>:
 PORTA=((x<<4)&0xf0); //lower 4 bit
 lcd_command_enable_to_write();
}
void lcd_data(char x)
{
 PORTA=(x&0xf0);  //upper 4 bit
  c4:	28 2f       	mov	r18, r24
  c6:	20 7f       	andi	r18, 0xF0	; 240
  c8:	2b bb       	out	0x1b, r18	; 27
 PORTA=((x<<4)&0xf0); //lower 4 bit
 lcd_data_enable_to_write();
}
void lcd_data_enable_to_write()
{
 PORTA=PORTA |(1<<0);//RS=0;
  ca:	d8 9a       	sbi	0x1b, 0	; 27
 PORTA=PORTA&~(1<<1);//RW=0;
  cc:	d9 98       	cbi	0x1b, 1	; 27
 PORTA=PORTA |(1<<2);//EN=1;
  ce:	da 9a       	sbi	0x1b, 2	; 27
  d0:	20 ed       	ldi	r18, 0xD0	; 208
  d2:	37 e0       	ldi	r19, 0x07	; 7
  d4:	f9 01       	movw	r30, r18
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <lcd_data+0x12>
 _delay_ms(1);
 PORTA=PORTA&~(1<<2);//EN=0;
  da:	da 98       	cbi	0x1b, 2	; 27
  dc:	f9 01       	movw	r30, r18
  de:	31 97       	sbiw	r30, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <lcd_data+0x1a>
}
void lcd_data(char x)
{
 PORTA=(x&0xf0);  //upper 4 bit
 lcd_data_enable_to_write();
 PORTA=((x<<4)&0xf0); //lower 4 bit
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	54 e0       	ldi	r21, 0x04	; 4
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	5a 95       	dec	r21
  ec:	e1 f7       	brne	.-8      	; 0xe6 <lcd_data+0x22>
  ee:	8b bb       	out	0x1b, r24	; 27
 lcd_data_enable_to_write();
}
void lcd_data_enable_to_write()
{
 PORTA=PORTA |(1<<0);//RS=0;
  f0:	d8 9a       	sbi	0x1b, 0	; 27
 PORTA=PORTA&~(1<<1);//RW=0;
  f2:	d9 98       	cbi	0x1b, 1	; 27
 PORTA=PORTA |(1<<2);//EN=1;
  f4:	da 9a       	sbi	0x1b, 2	; 27
  f6:	c9 01       	movw	r24, r18
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <lcd_data+0x34>
 _delay_ms(1);
 PORTA=PORTA&~(1<<2);//EN=0;
  fc:	da 98       	cbi	0x1b, 2	; 27
  fe:	c9 01       	movw	r24, r18
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <lcd_data+0x3c>
{
 PORTA=(x&0xf0);  //upper 4 bit
 lcd_data_enable_to_write();
 PORTA=((x<<4)&0xf0); //lower 4 bit
 lcd_data_enable_to_write();
}
 104:	08 95       	ret

00000106 <b2a>:
  }
  while((TIFR&(1<<TOV0))==0);
 }
}
void b2a(int a)//254
{
 106:	ef 92       	push	r14
 108:	ff 92       	push	r15
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	f8 2e       	mov	r15, r24
 110:	09 2f       	mov	r16, r25
 112:	15 e8       	ldi	r17, 0x85	; 133
  char pos=0x85;
  int a1,i;
  for(i=0;i<6;i++)//0//1//2
  {
  	a1=a%10;//4//5//2
 114:	8f 2d       	mov	r24, r15
 116:	90 2f       	mov	r25, r16
 118:	6a e0       	ldi	r22, 0x0A	; 10
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	0e 94 c9 00 	call	0x192	; 0x192 <__divmodhi4>
 120:	e8 2e       	mov	r14, r24
  	a=a/10;//25//2//0
 122:	8f 2d       	mov	r24, r15
 124:	90 2f       	mov	r25, r16
 126:	6a e0       	ldi	r22, 0x0A	; 10
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	0e 94 c9 00 	call	0x192	; 0x192 <__divmodhi4>
 12e:	f6 2e       	mov	r15, r22
 130:	07 2f       	mov	r16, r23
  	lcd_command(pos);
 132:	81 2f       	mov	r24, r17
 134:	0e 94 3b 00 	call	0x76	; 0x76 <lcd_command>
  	lcd_data(a1+48);//'4'//'5'//'2'
 138:	8e 2d       	mov	r24, r14
 13a:	80 5d       	subi	r24, 0xD0	; 208
 13c:	0e 94 62 00 	call	0xc4	; 0xc4 <lcd_data>
  	pos--;//81//80
 140:	11 50       	subi	r17, 0x01	; 1
}
void b2a(int a)//254
{
  char pos=0x85;
  int a1,i;
  for(i=0;i<6;i++)//0//1//2
 142:	1f 37       	cpi	r17, 0x7F	; 127
 144:	39 f7       	brne	.-50     	; 0x114 <b2a+0xe>
  	a=a/10;//25//2//0
  	lcd_command(pos);
  	lcd_data(a1+48);//'4'//'5'//'2'
  	pos--;//81//80
  }
}
 146:	1f 91       	pop	r17
 148:	0f 91       	pop	r16
 14a:	ff 90       	pop	r15
 14c:	ef 90       	pop	r14
 14e:	08 95       	ret

00000150 <main>:
void lcd_command_enable_to_write();
void lcd_data(char );
void b2a(int );
int main()
{
 lcd_init();
 150:	0e 94 56 00 	call	0xac	; 0xac <lcd_init>
  }
}
void counter_init()
{

 DDRB=DDRB&~(1<<0);
 154:	b8 98       	cbi	0x17, 0	; 23
 TCNT0=0;//0!='0'
 156:	12 be       	out	0x32, r1	; 50
 TCCR0=0x06;
 158:	86 e0       	ldi	r24, 0x06	; 6
 15a:	83 bf       	out	0x33, r24	; 51
 counter_init();
 while(1)
 {
  do
  {
	b2a(TCNT0);
 15c:	82 b7       	in	r24, 0x32	; 50
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 83 00 	call	0x106	; 0x106 <b2a>
  }
  while((TIFR&(1<<TOV0))==0);
 164:	88 b7       	in	r24, 0x38	; 56
 166:	fa cf       	rjmp	.-12     	; 0x15c <main+0xc>

00000168 <lcd_data_enable_to_write>:
 PORTA=((x<<4)&0xf0); //lower 4 bit
 lcd_data_enable_to_write();
}
void lcd_data_enable_to_write()
{
 PORTA=PORTA |(1<<0);//RS=0;
 168:	d8 9a       	sbi	0x1b, 0	; 27
 PORTA=PORTA&~(1<<1);//RW=0;
 16a:	d9 98       	cbi	0x1b, 1	; 27
 PORTA=PORTA |(1<<2);//EN=1;
 16c:	da 9a       	sbi	0x1b, 2	; 27
 16e:	80 ed       	ldi	r24, 0xD0	; 208
 170:	97 e0       	ldi	r25, 0x07	; 7
 172:	fc 01       	movw	r30, r24
 174:	31 97       	sbiw	r30, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <lcd_data_enable_to_write+0xc>
 _delay_ms(1);
 PORTA=PORTA&~(1<<2);//EN=0;
 178:	da 98       	cbi	0x1b, 2	; 27
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <lcd_data_enable_to_write+0x12>
 _delay_ms(1);
}
 17e:	08 95       	ret

00000180 <lcd_command_enable_to_write>:

void lcd_command_enable_to_write()
{
 PORTA=PORTA&~(1<<0);//RS=0;
 180:	d8 98       	cbi	0x1b, 0	; 27
 PORTA=PORTA&~(1<<1);//RW=0;
 182:	d9 98       	cbi	0x1b, 1	; 27
 PORTA=PORTA |(1<<2);//EN=1;
 184:	da 9a       	sbi	0x1b, 2	; 27
 PORTA=PORTA&~(1<<2);//EN=0;
 186:	da 98       	cbi	0x1b, 2	; 27
 188:	80 ed       	ldi	r24, 0xD0	; 208
 18a:	97 e0       	ldi	r25, 0x07	; 7
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <lcd_command_enable_to_write+0xc>
 _delay_ms(1);
}
 190:	08 95       	ret

00000192 <__divmodhi4>:
 192:	97 fb       	bst	r25, 7
 194:	09 2e       	mov	r0, r25
 196:	07 26       	eor	r0, r23
 198:	0a d0       	rcall	.+20     	; 0x1ae <__divmodhi4_neg1>
 19a:	77 fd       	sbrc	r23, 7
 19c:	04 d0       	rcall	.+8      	; 0x1a6 <__divmodhi4_neg2>
 19e:	0c d0       	rcall	.+24     	; 0x1b8 <__udivmodhi4>
 1a0:	06 d0       	rcall	.+12     	; 0x1ae <__divmodhi4_neg1>
 1a2:	00 20       	and	r0, r0
 1a4:	1a f4       	brpl	.+6      	; 0x1ac <__divmodhi4_exit>

000001a6 <__divmodhi4_neg2>:
 1a6:	70 95       	com	r23
 1a8:	61 95       	neg	r22
 1aa:	7f 4f       	sbci	r23, 0xFF	; 255

000001ac <__divmodhi4_exit>:
 1ac:	08 95       	ret

000001ae <__divmodhi4_neg1>:
 1ae:	f6 f7       	brtc	.-4      	; 0x1ac <__divmodhi4_exit>
 1b0:	90 95       	com	r25
 1b2:	81 95       	neg	r24
 1b4:	9f 4f       	sbci	r25, 0xFF	; 255
 1b6:	08 95       	ret

000001b8 <__udivmodhi4>:
 1b8:	aa 1b       	sub	r26, r26
 1ba:	bb 1b       	sub	r27, r27
 1bc:	51 e1       	ldi	r21, 0x11	; 17
 1be:	07 c0       	rjmp	.+14     	; 0x1ce <__udivmodhi4_ep>

000001c0 <__udivmodhi4_loop>:
 1c0:	aa 1f       	adc	r26, r26
 1c2:	bb 1f       	adc	r27, r27
 1c4:	a6 17       	cp	r26, r22
 1c6:	b7 07       	cpc	r27, r23
 1c8:	10 f0       	brcs	.+4      	; 0x1ce <__udivmodhi4_ep>
 1ca:	a6 1b       	sub	r26, r22
 1cc:	b7 0b       	sbc	r27, r23

000001ce <__udivmodhi4_ep>:
 1ce:	88 1f       	adc	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	5a 95       	dec	r21
 1d4:	a9 f7       	brne	.-22     	; 0x1c0 <__udivmodhi4_loop>
 1d6:	80 95       	com	r24
 1d8:	90 95       	com	r25
 1da:	bc 01       	movw	r22, r24
 1dc:	cd 01       	movw	r24, r26
 1de:	08 95       	ret

000001e0 <_exit>:
 1e0:	f8 94       	cli

000001e2 <__stop_program>:
 1e2:	ff cf       	rjmp	.-2      	; 0x1e2 <__stop_program>
