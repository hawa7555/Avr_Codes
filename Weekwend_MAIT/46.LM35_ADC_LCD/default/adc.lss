
adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000097  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000439  00000000  00000000  000002ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000018b  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000364  00000000  00000000  000008c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000090  00000000  00000000  00000c28  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000130  00000000  00000000  00000cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000c1  00000000  00000000  00000de8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a9 00 	call	0x152	; 0x152 <main>
  64:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <adc_init>:
	b2a(ADC/4);
  }
}
void adc_init()
{
  DDRA=DDRA&~(1<<0);
  6c:	d0 98       	cbi	0x1a, 0	; 26
  ADMUX=0xC0;//Vref=2.56V
  6e:	80 ec       	ldi	r24, 0xC0	; 192
  70:	87 b9       	out	0x07, r24	; 7
  //ADMUX=0x00;//Aref
  ADCSRA=0xA7;
  72:	87 ea       	ldi	r24, 0xA7	; 167
  74:	86 b9       	out	0x06, r24	; 6
  //ADCSRA=0x87;
}
  76:	08 95       	ret

00000078 <lcd_command>:
	lcd_command(0x0E);

}
void lcd_command(char x)
{
 PORTD=(x&0xf0);  //upper 4 bit
  78:	28 2f       	mov	r18, r24
  7a:	20 7f       	andi	r18, 0xF0	; 240
  7c:	22 bb       	out	0x12, r18	; 18
 _delay_ms(1);
}

void lcd_command_enable_to_write()
{
 PORTD=PORTD&~(1<<0);//RS=0;
  7e:	90 98       	cbi	0x12, 0	; 18
 PORTD=PORTD&~(1<<1);//RW=0;
  80:	91 98       	cbi	0x12, 1	; 18
 PORTD=PORTD |(1<<2);//EN=1;
  82:	92 9a       	sbi	0x12, 2	; 18
 PORTD=PORTD&~(1<<2);//EN=0;
  84:	92 98       	cbi	0x12, 2	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  86:	20 ed       	ldi	r18, 0xD0	; 208
  88:	37 e0       	ldi	r19, 0x07	; 7
  8a:	f9 01       	movw	r30, r18
  8c:	31 97       	sbiw	r30, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <lcd_command+0x14>
}
void lcd_command(char x)
{
 PORTD=(x&0xf0);  //upper 4 bit
 lcd_command_enable_to_write();
 PORTD=((x<<4)&0xf0); //lower 4 bit
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	44 e0       	ldi	r20, 0x04	; 4
  94:	88 0f       	add	r24, r24
  96:	99 1f       	adc	r25, r25
  98:	4a 95       	dec	r20
  9a:	e1 f7       	brne	.-8      	; 0x94 <lcd_command+0x1c>
  9c:	82 bb       	out	0x12, r24	; 18
 _delay_ms(1);
}

void lcd_command_enable_to_write()
{
 PORTD=PORTD&~(1<<0);//RS=0;
  9e:	90 98       	cbi	0x12, 0	; 18
 PORTD=PORTD&~(1<<1);//RW=0;
  a0:	91 98       	cbi	0x12, 1	; 18
 PORTD=PORTD |(1<<2);//EN=1;
  a2:	92 9a       	sbi	0x12, 2	; 18
 PORTD=PORTD&~(1<<2);//EN=0;
  a4:	92 98       	cbi	0x12, 2	; 18
  a6:	c9 01       	movw	r24, r18
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <lcd_command+0x30>
{
 PORTD=(x&0xf0);  //upper 4 bit
 lcd_command_enable_to_write();
 PORTD=((x<<4)&0xf0); //lower 4 bit
 lcd_command_enable_to_write();
}
  ac:	08 95       	ret

000000ae <lcd_init>:
  	pos--;//81//80
  }
}
void lcd_init()
{
    DDRD=0xff;
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	81 bb       	out	0x11, r24	; 17
	lcd_command(0x02);
  b2:	82 e0       	ldi	r24, 0x02	; 2
  b4:	0e 94 3c 00 	call	0x78	; 0x78 <lcd_command>
    lcd_command(0x28);
  b8:	88 e2       	ldi	r24, 0x28	; 40
  ba:	0e 94 3c 00 	call	0x78	; 0x78 <lcd_command>
	lcd_command(0x0E);
  be:	8e e0       	ldi	r24, 0x0E	; 14
  c0:	0e 94 3c 00 	call	0x78	; 0x78 <lcd_command>

}
  c4:	08 95       	ret

000000c6 <lcd_data>:
 PORTD=((x<<4)&0xf0); //lower 4 bit
 lcd_command_enable_to_write();
}
void lcd_data(char x)
{
 PORTD=(x&0xf0);  //upper 4 bit
  c6:	28 2f       	mov	r18, r24
  c8:	20 7f       	andi	r18, 0xF0	; 240
  ca:	22 bb       	out	0x12, r18	; 18
 PORTD=((x<<4)&0xf0); //lower 4 bit
 lcd_data_enable_to_write();
}
void lcd_data_enable_to_write()
{
 PORTD=PORTD |(1<<0);//RS=0;
  cc:	90 9a       	sbi	0x12, 0	; 18
 PORTD=PORTD&~(1<<1);//RW=0;
  ce:	91 98       	cbi	0x12, 1	; 18
 PORTD=PORTD |(1<<2);//EN=1;
  d0:	92 9a       	sbi	0x12, 2	; 18
  d2:	20 ed       	ldi	r18, 0xD0	; 208
  d4:	37 e0       	ldi	r19, 0x07	; 7
  d6:	f9 01       	movw	r30, r18
  d8:	31 97       	sbiw	r30, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <lcd_data+0x12>
 _delay_ms(1);
 PORTD=PORTD&~(1<<2);//EN=0;
  dc:	92 98       	cbi	0x12, 2	; 18
  de:	f9 01       	movw	r30, r18
  e0:	31 97       	sbiw	r30, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <lcd_data+0x1a>
}
void lcd_data(char x)
{
 PORTD=(x&0xf0);  //upper 4 bit
 lcd_data_enable_to_write();
 PORTD=((x<<4)&0xf0); //lower 4 bit
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	54 e0       	ldi	r21, 0x04	; 4
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	5a 95       	dec	r21
  ee:	e1 f7       	brne	.-8      	; 0xe8 <lcd_data+0x22>
  f0:	82 bb       	out	0x12, r24	; 18
 lcd_data_enable_to_write();
}
void lcd_data_enable_to_write()
{
 PORTD=PORTD |(1<<0);//RS=0;
  f2:	90 9a       	sbi	0x12, 0	; 18
 PORTD=PORTD&~(1<<1);//RW=0;
  f4:	91 98       	cbi	0x12, 1	; 18
 PORTD=PORTD |(1<<2);//EN=1;
  f6:	92 9a       	sbi	0x12, 2	; 18
  f8:	c9 01       	movw	r24, r18
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <lcd_data+0x34>
 _delay_ms(1);
 PORTD=PORTD&~(1<<2);//EN=0;
  fe:	92 98       	cbi	0x12, 2	; 18
 100:	c9 01       	movw	r24, r18
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <lcd_data+0x3c>
{
 PORTD=(x&0xf0);  //upper 4 bit
 lcd_data_enable_to_write();
 PORTD=((x<<4)&0xf0); //lower 4 bit
 lcd_data_enable_to_write();
}
 106:	08 95       	ret

00000108 <b2a>:
  //ADMUX=0x00;//Aref
  ADCSRA=0xA7;
  //ADCSRA=0x87;
}
void b2a(int a)//254
{
 108:	ef 92       	push	r14
 10a:	ff 92       	push	r15
 10c:	0f 93       	push	r16
 10e:	1f 93       	push	r17
 110:	f8 2e       	mov	r15, r24
 112:	09 2f       	mov	r16, r25
 114:	15 e8       	ldi	r17, 0x85	; 133
  char pos=0x85;
  int a1,i;
  for(i=0;i<6;i++)//0//1//2
  {
  	a1=a%10;//4//5//2
 116:	8f 2d       	mov	r24, r15
 118:	90 2f       	mov	r25, r16
 11a:	6a e0       	ldi	r22, 0x0A	; 10
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <__divmodhi4>
 122:	e8 2e       	mov	r14, r24
  	a=a/10;//25//2//0
 124:	8f 2d       	mov	r24, r15
 126:	90 2f       	mov	r25, r16
 128:	6a e0       	ldi	r22, 0x0A	; 10
 12a:	70 e0       	ldi	r23, 0x00	; 0
 12c:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <__divmodhi4>
 130:	f6 2e       	mov	r15, r22
 132:	07 2f       	mov	r16, r23
  	lcd_command(pos);
 134:	81 2f       	mov	r24, r17
 136:	0e 94 3c 00 	call	0x78	; 0x78 <lcd_command>
  	lcd_data(a1+48);//'4'//'5'//'2'
 13a:	8e 2d       	mov	r24, r14
 13c:	80 5d       	subi	r24, 0xD0	; 208
 13e:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_data>
  	pos--;//81//80
 142:	11 50       	subi	r17, 0x01	; 1
}
void b2a(int a)//254
{
  char pos=0x85;
  int a1,i;
  for(i=0;i<6;i++)//0//1//2
 144:	1f 37       	cpi	r17, 0x7F	; 127
 146:	39 f7       	brne	.-50     	; 0x116 <b2a+0xe>
  	a=a/10;//25//2//0
  	lcd_command(pos);
  	lcd_data(a1+48);//'4'//'5'//'2'
  	pos--;//81//80
  }
}
 148:	1f 91       	pop	r17
 14a:	0f 91       	pop	r16
 14c:	ff 90       	pop	r15
 14e:	ef 90       	pop	r14
 150:	08 95       	ret

00000152 <main>:
	b2a(ADC/4);
  }
}
void adc_init()
{
  DDRA=DDRA&~(1<<0);
 152:	d0 98       	cbi	0x1a, 0	; 26
  ADMUX=0xC0;//Vref=2.56V
 154:	80 ec       	ldi	r24, 0xC0	; 192
 156:	87 b9       	out	0x07, r24	; 7
  //ADMUX=0x00;//Aref
  ADCSRA=0xA7;
 158:	87 ea       	ldi	r24, 0xA7	; 167
 15a:	86 b9       	out	0x06, r24	; 6
void lcd_data(char );
void b2a(int );
int main()
{
  adc_init();
  lcd_init();
 15c:	0e 94 57 00 	call	0xae	; 0xae <lcd_init>
  while(1)
  {
    ADCSRA=ADCSRA|(1<<ADSC);
 160:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA&(1<ADIF))==0);
 162:	30 9b       	sbis	0x06, 0	; 6
 164:	fe cf       	rjmp	.-4      	; 0x162 <main+0x10>
	b2a(ADC/4);
 166:	84 b1       	in	r24, 0x04	; 4
 168:	95 b1       	in	r25, 0x05	; 5
 16a:	96 95       	lsr	r25
 16c:	87 95       	ror	r24
 16e:	96 95       	lsr	r25
 170:	87 95       	ror	r24
 172:	0e 94 84 00 	call	0x108	; 0x108 <b2a>
 176:	f4 cf       	rjmp	.-24     	; 0x160 <main+0xe>

00000178 <lcd_data_enable_to_write>:
 PORTD=((x<<4)&0xf0); //lower 4 bit
 lcd_data_enable_to_write();
}
void lcd_data_enable_to_write()
{
 PORTD=PORTD |(1<<0);//RS=0;
 178:	90 9a       	sbi	0x12, 0	; 18
 PORTD=PORTD&~(1<<1);//RW=0;
 17a:	91 98       	cbi	0x12, 1	; 18
 PORTD=PORTD |(1<<2);//EN=1;
 17c:	92 9a       	sbi	0x12, 2	; 18
 17e:	80 ed       	ldi	r24, 0xD0	; 208
 180:	97 e0       	ldi	r25, 0x07	; 7
 182:	fc 01       	movw	r30, r24
 184:	31 97       	sbiw	r30, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <lcd_data_enable_to_write+0xc>
 _delay_ms(1);
 PORTD=PORTD&~(1<<2);//EN=0;
 188:	92 98       	cbi	0x12, 2	; 18
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <lcd_data_enable_to_write+0x12>
 _delay_ms(1);
}
 18e:	08 95       	ret

00000190 <lcd_command_enable_to_write>:

void lcd_command_enable_to_write()
{
 PORTD=PORTD&~(1<<0);//RS=0;
 190:	90 98       	cbi	0x12, 0	; 18
 PORTD=PORTD&~(1<<1);//RW=0;
 192:	91 98       	cbi	0x12, 1	; 18
 PORTD=PORTD |(1<<2);//EN=1;
 194:	92 9a       	sbi	0x12, 2	; 18
 PORTD=PORTD&~(1<<2);//EN=0;
 196:	92 98       	cbi	0x12, 2	; 18
 198:	80 ed       	ldi	r24, 0xD0	; 208
 19a:	97 e0       	ldi	r25, 0x07	; 7
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <lcd_command_enable_to_write+0xc>
 _delay_ms(1);
}
 1a0:	08 95       	ret

000001a2 <__divmodhi4>:
 1a2:	97 fb       	bst	r25, 7
 1a4:	09 2e       	mov	r0, r25
 1a6:	07 26       	eor	r0, r23
 1a8:	0a d0       	rcall	.+20     	; 0x1be <__divmodhi4_neg1>
 1aa:	77 fd       	sbrc	r23, 7
 1ac:	04 d0       	rcall	.+8      	; 0x1b6 <__divmodhi4_neg2>
 1ae:	0c d0       	rcall	.+24     	; 0x1c8 <__udivmodhi4>
 1b0:	06 d0       	rcall	.+12     	; 0x1be <__divmodhi4_neg1>
 1b2:	00 20       	and	r0, r0
 1b4:	1a f4       	brpl	.+6      	; 0x1bc <__divmodhi4_exit>

000001b6 <__divmodhi4_neg2>:
 1b6:	70 95       	com	r23
 1b8:	61 95       	neg	r22
 1ba:	7f 4f       	sbci	r23, 0xFF	; 255

000001bc <__divmodhi4_exit>:
 1bc:	08 95       	ret

000001be <__divmodhi4_neg1>:
 1be:	f6 f7       	brtc	.-4      	; 0x1bc <__divmodhi4_exit>
 1c0:	90 95       	com	r25
 1c2:	81 95       	neg	r24
 1c4:	9f 4f       	sbci	r25, 0xFF	; 255
 1c6:	08 95       	ret

000001c8 <__udivmodhi4>:
 1c8:	aa 1b       	sub	r26, r26
 1ca:	bb 1b       	sub	r27, r27
 1cc:	51 e1       	ldi	r21, 0x11	; 17
 1ce:	07 c0       	rjmp	.+14     	; 0x1de <__udivmodhi4_ep>

000001d0 <__udivmodhi4_loop>:
 1d0:	aa 1f       	adc	r26, r26
 1d2:	bb 1f       	adc	r27, r27
 1d4:	a6 17       	cp	r26, r22
 1d6:	b7 07       	cpc	r27, r23
 1d8:	10 f0       	brcs	.+4      	; 0x1de <__udivmodhi4_ep>
 1da:	a6 1b       	sub	r26, r22
 1dc:	b7 0b       	sbc	r27, r23

000001de <__udivmodhi4_ep>:
 1de:	88 1f       	adc	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	5a 95       	dec	r21
 1e4:	a9 f7       	brne	.-22     	; 0x1d0 <__udivmodhi4_loop>
 1e6:	80 95       	com	r24
 1e8:	90 95       	com	r25
 1ea:	bc 01       	movw	r22, r24
 1ec:	cd 01       	movw	r24, r26
 1ee:	08 95       	ret

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>
