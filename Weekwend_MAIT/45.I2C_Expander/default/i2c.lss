
i2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000172  00800060  000002a0  00000314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000486  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000006d  00000000  00000000  000004a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000520  00000000  00000000  00000513  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000018b  00000000  00000000  00000a33  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004f6  00000000  00000000  00000bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  000010b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000010e  00000000  00000000  00001134  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000031e  00000000  00000000  00001242  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000360  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ea       	ldi	r30, 0xA0	; 160
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 3d       	cpi	r26, 0xD2	; 210
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 20 01 	call	0x240	; 0x240 <main>
  7a:	0c 94 4e 01 	jmp	0x29c	; 0x29c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <uart_init>:
  }
  i2c_stop();
}
void uart_init()
{
 UBRRL=0x33;//Fosc=8Mhz,BR=9600
  82:	83 e3       	ldi	r24, 0x33	; 51
  84:	89 b9       	out	0x09, r24	; 9
 UCSRB=UCSRB|(1<<TXEN);
  86:	53 9a       	sbi	0x0a, 3	; 10
 UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
  88:	80 b5       	in	r24, 0x20	; 32
  8a:	86 68       	ori	r24, 0x86	; 134
  8c:	80 bd       	out	0x20, r24	; 32

}
  8e:	08 95       	ret

00000090 <tx_string>:
void tx_string(char *x)
{
  90:	dc 01       	movw	r26, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  92:	28 ec       	ldi	r18, 0xC8	; 200
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	09 c0       	rjmp	.+18     	; 0xaa <tx_string+0x1a>
 while(*x)
 {
   UDR=*x++;
  98:	8c b9       	out	0x0c, r24	; 12
  9a:	88 ee       	ldi	r24, 0xE8	; 232
  9c:	93 e0       	ldi	r25, 0x03	; 3
  9e:	f9 01       	movw	r30, r18
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <tx_string+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a6:	d9 f7       	brne	.-10     	; 0x9e <tx_string+0xe>
  a8:	11 96       	adiw	r26, 0x01	; 1
 UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);

}
void tx_string(char *x)
{
 while(*x)
  aa:	8c 91       	ld	r24, X
  ac:	88 23       	and	r24, r24
  ae:	a1 f7       	brne	.-24     	; 0x98 <tx_string+0x8>
 {
   UDR=*x++;
   _delay_ms(100);
 }
}
  b0:	08 95       	ret

000000b2 <i2c_start>:
void i2c_start()
{
  TWBR=8;
  b2:	88 e0       	ldi	r24, 0x08	; 8
  b4:	80 b9       	out	0x00, r24	; 0
  TWCR=TWCR|(1<<TWINT)|(1<<TWEN)|(1<<TWEA)|(1<<TWSTA);
  b6:	86 b7       	in	r24, 0x36	; 54
  b8:	84 6e       	ori	r24, 0xE4	; 228
  ba:	86 bf       	out	0x36, r24	; 54
  while( (TWCR&(1<<TWINT))==0);
  bc:	06 b6       	in	r0, 0x36	; 54
  be:	07 fe       	sbrs	r0, 7
  c0:	fd cf       	rjmp	.-6      	; 0xbc <i2c_start+0xa>
  switch(TWSR)
  c2:	81 b1       	in	r24, 0x01	; 1
  c4:	88 30       	cpi	r24, 0x08	; 8
  c6:	61 f0       	breq	.+24     	; 0xe0 <i2c_start+0x2e>
  c8:	80 31       	cpi	r24, 0x10	; 16
  ca:	29 f0       	breq	.+10     	; 0xd6 <i2c_start+0x24>
  cc:	a0 e6       	ldi	r26, 0x60	; 96
  ce:	b0 e0       	ldi	r27, 0x00	; 0
  d0:	28 ec       	ldi	r18, 0xC8	; 200
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	2d c0       	rjmp	.+90     	; 0x130 <i2c_start+0x7e>
  d6:	aa e7       	ldi	r26, 0x7A	; 122
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	28 ec       	ldi	r18, 0xC8	; 200
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	1b c0       	rjmp	.+54     	; 0x116 <i2c_start+0x64>
  e0:	ab ea       	ldi	r26, 0xAB	; 171
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	28 ec       	ldi	r18, 0xC8	; 200
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	09 c0       	rjmp	.+18     	; 0xfc <i2c_start+0x4a>
}
void tx_string(char *x)
{
 while(*x)
 {
   UDR=*x++;
  ea:	8c b9       	out	0x0c, r24	; 12
  ec:	88 ee       	ldi	r24, 0xE8	; 232
  ee:	93 e0       	ldi	r25, 0x03	; 3
  f0:	f9 01       	movw	r30, r18
  f2:	31 97       	sbiw	r30, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <i2c_start+0x40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f8:	d9 f7       	brne	.-10     	; 0xf0 <i2c_start+0x3e>
  fa:	11 96       	adiw	r26, 0x01	; 1
 UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);

}
void tx_string(char *x)
{
 while(*x)
  fc:	8c 91       	ld	r24, X
  fe:	88 23       	and	r24, r24
 100:	a1 f7       	brne	.-24     	; 0xea <i2c_start+0x38>
 102:	08 95       	ret
 {
   UDR=*x++;
 104:	8c b9       	out	0x0c, r24	; 12
 106:	88 ee       	ldi	r24, 0xE8	; 232
 108:	93 e0       	ldi	r25, 0x03	; 3
 10a:	f9 01       	movw	r30, r18
 10c:	31 97       	sbiw	r30, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <i2c_start+0x5a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 110:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 112:	d9 f7       	brne	.-10     	; 0x10a <i2c_start+0x58>
 114:	11 96       	adiw	r26, 0x01	; 1
 UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);

}
void tx_string(char *x)
{
 while(*x)
 116:	8c 91       	ld	r24, X
 118:	88 23       	and	r24, r24
 11a:	a1 f7       	brne	.-24     	; 0x104 <i2c_start+0x52>
 11c:	08 95       	ret
 {
   UDR=*x++;
 11e:	8c b9       	out	0x0c, r24	; 12
 120:	88 ee       	ldi	r24, 0xE8	; 232
 122:	93 e0       	ldi	r25, 0x03	; 3
 124:	f9 01       	movw	r30, r18
 126:	31 97       	sbiw	r30, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <i2c_start+0x74>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 12a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 12c:	d9 f7       	brne	.-10     	; 0x124 <i2c_start+0x72>
 12e:	11 96       	adiw	r26, 0x01	; 1
 UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);

}
void tx_string(char *x)
{
 while(*x)
 130:	8c 91       	ld	r24, X
 132:	88 23       	and	r24, r24
 134:	a1 f7       	brne	.-24     	; 0x11e <i2c_start+0x6c>
 136:	08 95       	ret

00000138 <i2c_SLA_W>:
  }

}
void i2c_SLA_W(char x)
{
  TWDR=x;
 138:	83 b9       	out	0x03, r24	; 3
  TWCR=TWCR|(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 13a:	86 b7       	in	r24, 0x36	; 54
 13c:	84 6c       	ori	r24, 0xC4	; 196
 13e:	86 bf       	out	0x36, r24	; 54
  while( (TWCR&(1<<TWINT))==0);
 140:	06 b6       	in	r0, 0x36	; 54
 142:	07 fe       	sbrs	r0, 7
 144:	fd cf       	rjmp	.-6      	; 0x140 <i2c_SLA_W+0x8>
  switch(TWSR)
 146:	81 b1       	in	r24, 0x01	; 1
 148:	88 31       	cpi	r24, 0x18	; 24
 14a:	61 f0       	breq	.+24     	; 0x164 <i2c_SLA_W+0x2c>
 14c:	80 32       	cpi	r24, 0x20	; 32
 14e:	29 f0       	breq	.+10     	; 0x15a <i2c_SLA_W+0x22>
 150:	a3 ed       	ldi	r26, 0xD3	; 211
 152:	b0 e0       	ldi	r27, 0x00	; 0
 154:	28 ec       	ldi	r18, 0xC8	; 200
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	2d c0       	rjmp	.+90     	; 0x1b4 <i2c_SLA_W+0x7c>
 15a:	a4 ee       	ldi	r26, 0xE4	; 228
 15c:	b0 e0       	ldi	r27, 0x00	; 0
 15e:	28 ec       	ldi	r18, 0xC8	; 200
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	1b c0       	rjmp	.+54     	; 0x19a <i2c_SLA_W+0x62>
 164:	aa e1       	ldi	r26, 0x1A	; 26
 166:	b1 e0       	ldi	r27, 0x01	; 1
 168:	28 ec       	ldi	r18, 0xC8	; 200
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	09 c0       	rjmp	.+18     	; 0x180 <i2c_SLA_W+0x48>
}
void tx_string(char *x)
{
 while(*x)
 {
   UDR=*x++;
 16e:	8c b9       	out	0x0c, r24	; 12
 170:	88 ee       	ldi	r24, 0xE8	; 232
 172:	93 e0       	ldi	r25, 0x03	; 3
 174:	f9 01       	movw	r30, r18
 176:	31 97       	sbiw	r30, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <i2c_SLA_W+0x3e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 17a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 17c:	d9 f7       	brne	.-10     	; 0x174 <i2c_SLA_W+0x3c>
 17e:	11 96       	adiw	r26, 0x01	; 1
 UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);

}
void tx_string(char *x)
{
 while(*x)
 180:	8c 91       	ld	r24, X
 182:	88 23       	and	r24, r24
 184:	a1 f7       	brne	.-24     	; 0x16e <i2c_SLA_W+0x36>
 186:	08 95       	ret
 {
   UDR=*x++;
 188:	8c b9       	out	0x0c, r24	; 12
 18a:	88 ee       	ldi	r24, 0xE8	; 232
 18c:	93 e0       	ldi	r25, 0x03	; 3
 18e:	f9 01       	movw	r30, r18
 190:	31 97       	sbiw	r30, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <i2c_SLA_W+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 194:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 196:	d9 f7       	brne	.-10     	; 0x18e <i2c_SLA_W+0x56>
 198:	11 96       	adiw	r26, 0x01	; 1
 UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);

}
void tx_string(char *x)
{
 while(*x)
 19a:	8c 91       	ld	r24, X
 19c:	88 23       	and	r24, r24
 19e:	a1 f7       	brne	.-24     	; 0x188 <i2c_SLA_W+0x50>
 1a0:	08 95       	ret
 {
   UDR=*x++;
 1a2:	8c b9       	out	0x0c, r24	; 12
 1a4:	88 ee       	ldi	r24, 0xE8	; 232
 1a6:	93 e0       	ldi	r25, 0x03	; 3
 1a8:	f9 01       	movw	r30, r18
 1aa:	31 97       	sbiw	r30, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <i2c_SLA_W+0x72>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1b0:	d9 f7       	brne	.-10     	; 0x1a8 <i2c_SLA_W+0x70>
 1b2:	11 96       	adiw	r26, 0x01	; 1
 UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);

}
void tx_string(char *x)
{
 while(*x)
 1b4:	8c 91       	ld	r24, X
 1b6:	88 23       	and	r24, r24
 1b8:	a1 f7       	brne	.-24     	; 0x1a2 <i2c_SLA_W+0x6a>
 1ba:	08 95       	ret

000001bc <i2c_data>:

 
}
void i2c_data(char x)
{
  TWDR=x;
 1bc:	83 b9       	out	0x03, r24	; 3
  TWCR=TWCR|(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 1be:	86 b7       	in	r24, 0x36	; 54
 1c0:	84 6c       	ori	r24, 0xC4	; 196
 1c2:	86 bf       	out	0x36, r24	; 54
  while( (TWCR&(1<<TWINT))==0);
 1c4:	06 b6       	in	r0, 0x36	; 54
 1c6:	07 fe       	sbrs	r0, 7
 1c8:	fd cf       	rjmp	.-6      	; 0x1c4 <i2c_data+0x8>
  switch(TWSR)
 1ca:	81 b1       	in	r24, 0x01	; 1
 1cc:	88 32       	cpi	r24, 0x28	; 40
 1ce:	61 f0       	breq	.+24     	; 0x1e8 <i2c_data+0x2c>
 1d0:	80 33       	cpi	r24, 0x30	; 48
 1d2:	29 f0       	breq	.+10     	; 0x1de <i2c_data+0x22>
 1d4:	ad e4       	ldi	r26, 0x4D	; 77
 1d6:	b1 e0       	ldi	r27, 0x01	; 1
 1d8:	28 ec       	ldi	r18, 0xC8	; 200
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	2d c0       	rjmp	.+90     	; 0x238 <i2c_data+0x7c>
 1de:	a2 e6       	ldi	r26, 0x62	; 98
 1e0:	b1 e0       	ldi	r27, 0x01	; 1
 1e2:	28 ec       	ldi	r18, 0xC8	; 200
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	1b c0       	rjmp	.+54     	; 0x21e <i2c_data+0x62>
 1e8:	ac e9       	ldi	r26, 0x9C	; 156
 1ea:	b1 e0       	ldi	r27, 0x01	; 1
 1ec:	28 ec       	ldi	r18, 0xC8	; 200
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	09 c0       	rjmp	.+18     	; 0x204 <i2c_data+0x48>
}
void tx_string(char *x)
{
 while(*x)
 {
   UDR=*x++;
 1f2:	8c b9       	out	0x0c, r24	; 12
 1f4:	88 ee       	ldi	r24, 0xE8	; 232
 1f6:	93 e0       	ldi	r25, 0x03	; 3
 1f8:	f9 01       	movw	r30, r18
 1fa:	31 97       	sbiw	r30, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <i2c_data+0x3e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 200:	d9 f7       	brne	.-10     	; 0x1f8 <i2c_data+0x3c>
 202:	11 96       	adiw	r26, 0x01	; 1
 UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);

}
void tx_string(char *x)
{
 while(*x)
 204:	8c 91       	ld	r24, X
 206:	88 23       	and	r24, r24
 208:	a1 f7       	brne	.-24     	; 0x1f2 <i2c_data+0x36>
 20a:	08 95       	ret
 {
   UDR=*x++;
 20c:	8c b9       	out	0x0c, r24	; 12
 20e:	88 ee       	ldi	r24, 0xE8	; 232
 210:	93 e0       	ldi	r25, 0x03	; 3
 212:	f9 01       	movw	r30, r18
 214:	31 97       	sbiw	r30, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <i2c_data+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 218:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 21a:	d9 f7       	brne	.-10     	; 0x212 <i2c_data+0x56>
 21c:	11 96       	adiw	r26, 0x01	; 1
 UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);

}
void tx_string(char *x)
{
 while(*x)
 21e:	8c 91       	ld	r24, X
 220:	88 23       	and	r24, r24
 222:	a1 f7       	brne	.-24     	; 0x20c <i2c_data+0x50>
 224:	08 95       	ret
 {
   UDR=*x++;
 226:	8c b9       	out	0x0c, r24	; 12
 228:	88 ee       	ldi	r24, 0xE8	; 232
 22a:	93 e0       	ldi	r25, 0x03	; 3
 22c:	f9 01       	movw	r30, r18
 22e:	31 97       	sbiw	r30, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <i2c_data+0x72>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 232:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 234:	d9 f7       	brne	.-10     	; 0x22c <i2c_data+0x70>
 236:	11 96       	adiw	r26, 0x01	; 1
 UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);

}
void tx_string(char *x)
{
 while(*x)
 238:	8c 91       	ld	r24, X
 23a:	88 23       	and	r24, r24
 23c:	a1 f7       	brne	.-24     	; 0x226 <i2c_data+0x6a>
 23e:	08 95       	ret

00000240 <main>:
void i2c_data(char );
void i2c_stop();
void uart_init();
void tx_string(char *);
int main()
{
 240:	0f 93       	push	r16
 242:	1f 93       	push	r17
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
  }
  i2c_stop();
}
void uart_init()
{
 UBRRL=0x33;//Fosc=8Mhz,BR=9600
 248:	83 e3       	ldi	r24, 0x33	; 51
 24a:	89 b9       	out	0x09, r24	; 9
 UCSRB=UCSRB|(1<<TXEN);
 24c:	53 9a       	sbi	0x0a, 3	; 10
 UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
 24e:	80 b5       	in	r24, 0x20	; 32
 250:	86 68       	ori	r24, 0x86	; 134
 252:	80 bd       	out	0x20, r24	; 32
void tx_string(char *);
int main()
{
  int i;
  uart_init();
  i2c_start();
 254:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_start>
  i2c_SLA_W(0x40);
 258:	80 e4       	ldi	r24, 0x40	; 64
 25a:	0e 94 9c 00 	call	0x138	; 0x138 <i2c_SLA_W>
 25e:	c0 e0       	ldi	r28, 0x00	; 0
 260:	d0 e0       	ldi	r29, 0x00	; 0
  for(i=0;i<=7;i++)
  {
    i2c_data(1<<i);
 262:	01 e0       	ldi	r16, 0x01	; 1
 264:	10 e0       	ldi	r17, 0x00	; 0
 266:	c8 01       	movw	r24, r16
 268:	0c 2e       	mov	r0, r28
 26a:	02 c0       	rjmp	.+4      	; 0x270 <main+0x30>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	0a 94       	dec	r0
 272:	e2 f7       	brpl	.-8      	; 0x26c <main+0x2c>
 274:	0e 94 de 00 	call	0x1bc	; 0x1bc <i2c_data>
{
  int i;
  uart_init();
  i2c_start();
  i2c_SLA_W(0x40);
  for(i=0;i<=7;i++)
 278:	21 96       	adiw	r28, 0x01	; 1
 27a:	c8 30       	cpi	r28, 0x08	; 8
 27c:	d1 05       	cpc	r29, r1
 27e:	99 f7       	brne	.-26     	; 0x266 <main+0x26>
 }  

}
void i2c_stop()
{
   TWCR=TWCR|(1<<TWINT)|(1<<TWEN)|(1<<TWEA)|(1<<TWSTO);
 280:	86 b7       	in	r24, 0x36	; 54
 282:	84 6d       	ori	r24, 0xD4	; 212
 284:	86 bf       	out	0x36, r24	; 54
  for(i=0;i<=7;i++)
  {
    i2c_data(1<<i);
  }
  i2c_stop();
}
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	1f 91       	pop	r17
 290:	0f 91       	pop	r16
 292:	08 95       	ret

00000294 <i2c_stop>:
 }  

}
void i2c_stop()
{
   TWCR=TWCR|(1<<TWINT)|(1<<TWEN)|(1<<TWEA)|(1<<TWSTO);
 294:	86 b7       	in	r24, 0x36	; 54
 296:	84 6d       	ori	r24, 0xD4	; 212
 298:	86 bf       	out	0x36, r24	; 54
 
}
 29a:	08 95       	ret

0000029c <_exit>:
 29c:	f8 94       	cli

0000029e <__stop_program>:
 29e:	ff cf       	rjmp	.-2      	; 0x29e <__stop_program>
