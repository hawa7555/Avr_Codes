
lfr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000156  00000000  00000000  0000015b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000d7  00000000  00000000  000002b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001b1  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  0000053c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000cf  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000a0  00000000  00000000  0000062b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000006cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define BOT PORTA
#define ls (PINC&(1<<0))
#define rs (PINC&(1<<1))
int main()
{
  DDRA= 0b11111111;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
  DDRC=DDRC&~((1<<0)|(1<<1));
  70:	84 b3       	in	r24, 0x14	; 20
  72:	8c 7f       	andi	r24, 0xFC	; 252
  74:	84 bb       	out	0x14, r24	; 20
  while(1)
  {
   	if(ls && rs)
   	{
    	BOT=Forward;
  76:	65 e5       	ldi	r22, 0x55	; 85
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  78:	28 ec       	ldi	r18, 0xC8	; 200
  7a:	30 e0       	ldi	r19, 0x00	; 0
   	}
   if( !(ls) && (rs))
   {
    	BOT=Stop;_delay_ms(2000);
		BOT=Left;
  7c:	50 e5       	ldi	r21, 0x50	; 80
   }
   if((ls) && !(rs) )
   {
    	BOT=Stop;_delay_ms(2000);
     	BOT=Right;
  7e:	45 e0       	ldi	r20, 0x05	; 5
{
  DDRA= 0b11111111;
  DDRC=DDRC&~((1<<0)|(1<<1));
  while(1)
  {
   	if(ls && rs)
  80:	98 9b       	sbis	0x13, 0	; 19
  82:	02 c0       	rjmp	.+4      	; 0x88 <main+0x1c>
  84:	99 99       	sbic	0x13, 1	; 19
   	{
    	BOT=Forward;
  86:	6b bb       	out	0x1b, r22	; 27
   	}
   if( !(ls) && (rs))
  88:	98 99       	sbic	0x13, 0	; 19
  8a:	0b c0       	rjmp	.+22     	; 0xa2 <main+0x36>
  8c:	99 9b       	sbis	0x13, 1	; 19
  8e:	09 c0       	rjmp	.+18     	; 0xa2 <main+0x36>
   {
    	BOT=Stop;_delay_ms(2000);
  90:	1b ba       	out	0x1b, r1	; 27
  92:	80 e2       	ldi	r24, 0x20	; 32
  94:	9e e4       	ldi	r25, 0x4E	; 78
  96:	f9 01       	movw	r30, r18
  98:	31 97       	sbiw	r30, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <main+0x2c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  9c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  9e:	d9 f7       	brne	.-10     	; 0x96 <main+0x2a>
		BOT=Left;
  a0:	5b bb       	out	0x1b, r21	; 27
   }
   if((ls) && !(rs) )
  a2:	98 9b       	sbis	0x13, 0	; 19
  a4:	0b c0       	rjmp	.+22     	; 0xbc <main+0x50>
  a6:	99 99       	sbic	0x13, 1	; 19
  a8:	09 c0       	rjmp	.+18     	; 0xbc <main+0x50>
   {
    	BOT=Stop;_delay_ms(2000);
  aa:	1b ba       	out	0x1b, r1	; 27
  ac:	80 e2       	ldi	r24, 0x20	; 32
  ae:	9e e4       	ldi	r25, 0x4E	; 78
  b0:	f9 01       	movw	r30, r18
  b2:	31 97       	sbiw	r30, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <main+0x46>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  b6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  b8:	d9 f7       	brne	.-10     	; 0xb0 <main+0x44>
     	BOT=Right;
  ba:	4b bb       	out	0x1b, r20	; 27
   }
  if( !(ls) && !(rs))
  bc:	98 99       	sbic	0x13, 0	; 19
  be:	e0 cf       	rjmp	.-64     	; 0x80 <main+0x14>
  c0:	99 99       	sbic	0x13, 1	; 19
  c2:	de cf       	rjmp	.-68     	; 0x80 <main+0x14>
 	 {
    	 BOT=Stop;
  c4:	1b ba       	out	0x1b, r1	; 27
  c6:	dc cf       	rjmp	.-72     	; 0x80 <main+0x14>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
