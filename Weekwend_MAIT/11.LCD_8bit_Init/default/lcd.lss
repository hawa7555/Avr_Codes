
lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000038  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002da  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000107  00000000  00000000  0000047e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000272  00000000  00000000  00000585  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  000007f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000ea  00000000  00000000  00000838  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000073  00000000  00000000  00000922  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  64:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <lcd_init>:
{
  lcd_init();
}
void lcd_init()
{
    DDRA=0xff;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	DDRB=DDRB|7;
  70:	87 b3       	in	r24, 0x17	; 23
  72:	87 60       	ori	r24, 0x07	; 7
  74:	87 bb       	out	0x17, r24	; 23
	lcd_command(0x80);
}

void lcd_command(char x)
{
 PORTA=x;
  76:	88 e3       	ldi	r24, 0x38	; 56
  78:	8b bb       	out	0x1b, r24	; 27
 PORTB=PORTB&~(1<<0);//RS=0;
  7a:	c0 98       	cbi	0x18, 0	; 24
 PORTB=PORTB&~(1<<1);//RW=0;
  7c:	c1 98       	cbi	0x18, 1	; 24
 PORTB=PORTB |(1<<2);//EN=1;
  7e:	c2 9a       	sbi	0x18, 2	; 24
 PORTB=PORTB&~(1<<2);//EN=0;
  80:	c2 98       	cbi	0x18, 2	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  82:	20 ed       	ldi	r18, 0xD0	; 208
  84:	37 e0       	ldi	r19, 0x07	; 7
  86:	c9 01       	movw	r24, r18
  88:	01 97       	sbiw	r24, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <lcd_init+0x1c>
	lcd_command(0x80);
}

void lcd_command(char x)
{
 PORTA=x;
  8c:	86 e0       	ldi	r24, 0x06	; 6
  8e:	8b bb       	out	0x1b, r24	; 27
 PORTB=PORTB&~(1<<0);//RS=0;
  90:	c0 98       	cbi	0x18, 0	; 24
 PORTB=PORTB&~(1<<1);//RW=0;
  92:	c1 98       	cbi	0x18, 1	; 24
 PORTB=PORTB |(1<<2);//EN=1;
  94:	c2 9a       	sbi	0x18, 2	; 24
 PORTB=PORTB&~(1<<2);//EN=0;
  96:	c2 98       	cbi	0x18, 2	; 24
  98:	c9 01       	movw	r24, r18
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <lcd_init+0x2e>
	lcd_command(0x80);
}

void lcd_command(char x)
{
 PORTA=x;
  9e:	8e e0       	ldi	r24, 0x0E	; 14
  a0:	8b bb       	out	0x1b, r24	; 27
 PORTB=PORTB&~(1<<0);//RS=0;
  a2:	c0 98       	cbi	0x18, 0	; 24
 PORTB=PORTB&~(1<<1);//RW=0;
  a4:	c1 98       	cbi	0x18, 1	; 24
 PORTB=PORTB |(1<<2);//EN=1;
  a6:	c2 9a       	sbi	0x18, 2	; 24
 PORTB=PORTB&~(1<<2);//EN=0;
  a8:	c2 98       	cbi	0x18, 2	; 24
  aa:	c9 01       	movw	r24, r18
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <lcd_init+0x40>
	lcd_command(0x80);
}

void lcd_command(char x)
{
 PORTA=x;
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	8b bb       	out	0x1b, r24	; 27
 PORTB=PORTB&~(1<<0);//RS=0;
  b4:	c0 98       	cbi	0x18, 0	; 24
 PORTB=PORTB&~(1<<1);//RW=0;
  b6:	c1 98       	cbi	0x18, 1	; 24
 PORTB=PORTB |(1<<2);//EN=1;
  b8:	c2 9a       	sbi	0x18, 2	; 24
 PORTB=PORTB&~(1<<2);//EN=0;
  ba:	c2 98       	cbi	0x18, 2	; 24
  bc:	c9 01       	movw	r24, r18
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <lcd_init+0x52>
	lcd_command(0x80);
}

void lcd_command(char x)
{
 PORTA=x;
  c2:	80 e8       	ldi	r24, 0x80	; 128
  c4:	8b bb       	out	0x1b, r24	; 27
 PORTB=PORTB&~(1<<0);//RS=0;
  c6:	c0 98       	cbi	0x18, 0	; 24
 PORTB=PORTB&~(1<<1);//RW=0;
  c8:	c1 98       	cbi	0x18, 1	; 24
 PORTB=PORTB |(1<<2);//EN=1;
  ca:	c2 9a       	sbi	0x18, 2	; 24
 PORTB=PORTB&~(1<<2);//EN=0;
  cc:	c2 98       	cbi	0x18, 2	; 24
  ce:	c9 01       	movw	r24, r18
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <lcd_init+0x64>
	lcd_command(0x38);
	lcd_command(0x06);
	lcd_command(0x0E);
	lcd_command(0x01);
	lcd_command(0x80);
}
  d4:	08 95       	ret

000000d6 <main>:
#include<util/delay.h>
void lcd_command(char );
void lcd_init(void );
int main()
{
  lcd_init();
  d6:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_init>
}
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	08 95       	ret

000000e0 <lcd_command>:
	lcd_command(0x80);
}

void lcd_command(char x)
{
 PORTA=x;
  e0:	8b bb       	out	0x1b, r24	; 27
 PORTB=PORTB&~(1<<0);//RS=0;
  e2:	c0 98       	cbi	0x18, 0	; 24
 PORTB=PORTB&~(1<<1);//RW=0;
  e4:	c1 98       	cbi	0x18, 1	; 24
 PORTB=PORTB |(1<<2);//EN=1;
  e6:	c2 9a       	sbi	0x18, 2	; 24
 PORTB=PORTB&~(1<<2);//EN=0;
  e8:	c2 98       	cbi	0x18, 2	; 24
  ea:	80 ed       	ldi	r24, 0xD0	; 208
  ec:	97 e0       	ldi	r25, 0x07	; 7
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <lcd_command+0xe>
 _delay_ms(1);
}
  f2:	08 95       	ret

000000f4 <_exit>:
  f4:	f8 94       	cli

000000f6 <__stop_program>:
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <__stop_program>
