
pov.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000000ee  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080006a  0080006a  0000018c  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000033  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000018e  00000000  00000000  000001df  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000ee  00000000  00000000  0000036d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000016d  00000000  00000000  0000045b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000020  00000000  00000000  000005c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000db  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000040  00000000  00000000  000006c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00000703  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ee       	ldi	r30, 0xEE	; 238
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 75 00 	jmp	0xea	; 0xea <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include<util/delay.h>
char a[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
int i,j,k;
int main()
{
   DDRB=DDRA=0xff;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a bb       	out	0x1a, r24	; 26
  96:	8a b3       	in	r24, 0x1a	; 26
  98:	87 bb       	out	0x17, r24	; 23
	    for(j=0;j<=9;j++)
		{
		  for(k=0;k<100;k++)
		  {

		    	PORTB=0b11111110;//ssd0 Select,ssd1 deselect
  9a:	7e ef       	ldi	r23, 0xFE	; 254
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9c:	40 e1       	ldi	r20, 0x10	; 16
  9e:	57 e2       	ldi	r21, 0x27	; 39
				PORTA=a[i];
				_delay_ms(5);
				PORTB=0b11111101;//ssd1 select ,ssd0 deselect
  a0:	6d ef       	ldi	r22, 0xFD	; 253
#include<util/delay.h>
char a[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
int i,j,k;
int main()
{
   DDRB=DDRA=0xff;
  a2:	a0 e6       	ldi	r26, 0x60	; 96
  a4:	b0 e0       	ldi	r27, 0x00	; 0
  a6:	1a c0       	rjmp	.+52     	; 0xdc <main+0x4a>
	    for(j=0;j<=9;j++)
		{
		  for(k=0;k<100;k++)
		  {

		    	PORTB=0b11111110;//ssd0 Select,ssd1 deselect
  a8:	78 bb       	out	0x18, r23	; 24
				PORTA=a[i];
  aa:	8c 91       	ld	r24, X
  ac:	8b bb       	out	0x1b, r24	; 27
  ae:	ca 01       	movw	r24, r20
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <main+0x1e>
				_delay_ms(5);
				PORTB=0b11111101;//ssd1 select ,ssd0 deselect
  b4:	68 bb       	out	0x18, r22	; 24
				PORTA=a[j];
  b6:	80 81       	ld	r24, Z
  b8:	8b bb       	out	0x1b, r24	; 27
  ba:	ca 01       	movw	r24, r20
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <main+0x2a>
  c0:	2f 5f       	subi	r18, 0xFF	; 255
  c2:	3f 4f       	sbci	r19, 0xFF	; 255
   {
      for(i=0;i<=9;i++)
	  {
	    for(j=0;j<=9;j++)
		{
		  for(k=0;k<100;k++)
  c4:	25 36       	cpi	r18, 0x65	; 101
  c6:	31 05       	cpc	r19, r1
  c8:	79 f7       	brne	.-34     	; 0xa8 <main+0x16>
  ca:	31 96       	adiw	r30, 0x01	; 1
   DDRB=DDRA=0xff;
   while(1)
   {
      for(i=0;i<=9;i++)
	  {
	    for(j=0;j<=9;j++)
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	ea 36       	cpi	r30, 0x6A	; 106
  d0:	f8 07       	cpc	r31, r24
  d2:	19 f0       	breq	.+6      	; 0xda <main+0x48>
  d4:	20 e0       	ldi	r18, 0x00	; 0
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	f3 cf       	rjmp	.-26     	; 0xc0 <main+0x2e>
  da:	11 96       	adiw	r26, 0x01	; 1
int main()
{
   DDRB=DDRA=0xff;
   while(1)
   {
      for(i=0;i<=9;i++)
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	aa 36       	cpi	r26, 0x6A	; 106
  e0:	b8 07       	cpc	r27, r24
  e2:	f9 f2       	breq	.-66     	; 0xa2 <main+0x10>
  e4:	e0 e6       	ldi	r30, 0x60	; 96
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	f1 cf       	rjmp	.-30     	; 0xcc <main+0x3a>

000000ea <_exit>:
  ea:	f8 94       	cli

000000ec <__stop_program>:
  ec:	ff cf       	rjmp	.-2      	; 0xec <__stop_program>
