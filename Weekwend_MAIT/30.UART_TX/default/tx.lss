
tx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000000fe  00000172  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000037  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001e7  00000000  00000000  000001db  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000134  00000000  00000000  000003c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001db  00000000  00000000  000004f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  000006d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000e2  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000a8  00000000  00000000  000007f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000c0  00000000  00000000  0000089e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ef       	ldi	r30, 0xFE	; 254
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 7d 00 	jmp	0xfa	; 0xfa <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
 }

}
void uart_init()
{
 UBRRL=0x33;//Fosc=8Mhz,BR=9600
  82:	83 e3       	ldi	r24, 0x33	; 51
  84:	89 b9       	out	0x09, r24	; 9
 UCSRB=UCSRB|(1<<TXEN);
  86:	53 9a       	sbi	0x0a, 3	; 10
 UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
  88:	80 b5       	in	r24, 0x20	; 32
  8a:	86 68       	ori	r24, 0x86	; 134
  8c:	80 bd       	out	0x20, r24	; 32
  8e:	e0 e6       	ldi	r30, 0x60	; 96
  90:	f0 e0       	ldi	r31, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  92:	68 ec       	ldi	r22, 0xC8	; 200
  94:	70 e0       	ldi	r23, 0x00	; 0
  96:	0f c0       	rjmp	.+30     	; 0xb6 <main+0x34>
  98:	83 2f       	mov	r24, r19
  9a:	94 2f       	mov	r25, r20
}
void tx_string(char *x)//2000
{
 while(*x != '\0')
 {
  UDR=*x++;
  9c:	2c b9       	out	0x0c, r18	; 12
  while( (UCSRA&(1<<5))==0);//wait here till UDRE is 0
  9e:	5d 9b       	sbis	0x0b, 5	; 11
  a0:	fe cf       	rjmp	.-4      	; 0x9e <main+0x1c>
  a2:	28 ee       	ldi	r18, 0xE8	; 232
  a4:	33 e0       	ldi	r19, 0x03	; 3
  a6:	fb 01       	movw	r30, r22
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <main+0x26>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  b0:	d1 f7       	brne	.-12     	; 0xa6 <main+0x24>
}
void tx_string(char *x)//2000
{
 while(*x != '\0')
 {
  UDR=*x++;
  b2:	fc 01       	movw	r30, r24
  b4:	31 96       	adiw	r30, 0x01	; 1
 }
return 0;
}
void tx_string(char *x)//2000
{
 while(*x != '\0')
  b6:	20 81       	ld	r18, Z
  b8:	3e 2f       	mov	r19, r30
  ba:	4f 2f       	mov	r20, r31
  bc:	e0 e6       	ldi	r30, 0x60	; 96
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	22 23       	and	r18, r18
  c2:	c9 f3       	breq	.-14     	; 0xb6 <main+0x34>
  c4:	e9 cf       	rjmp	.-46     	; 0x98 <main+0x16>

000000c6 <tx_string>:
  tx_string("RAJA HINDUSTANI\r");
 }
return 0;
}
void tx_string(char *x)//2000
{
  c6:	dc 01       	movw	r26, r24
  c8:	28 ec       	ldi	r18, 0xC8	; 200
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	0b c0       	rjmp	.+22     	; 0xe4 <tx_string+0x1e>
 while(*x != '\0')
 {
  UDR=*x++;
  ce:	8c b9       	out	0x0c, r24	; 12
  while( (UCSRA&(1<<5))==0);//wait here till UDRE is 0
  d0:	5d 9b       	sbis	0x0b, 5	; 11
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <tx_string+0xa>
  d4:	88 ee       	ldi	r24, 0xE8	; 232
  d6:	93 e0       	ldi	r25, 0x03	; 3
  d8:	f9 01       	movw	r30, r18
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <tx_string+0x14>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  de:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e0:	d9 f7       	brne	.-10     	; 0xd8 <tx_string+0x12>
}
void tx_string(char *x)//2000
{
 while(*x != '\0')
 {
  UDR=*x++;
  e2:	11 96       	adiw	r26, 0x01	; 1
 }
return 0;
}
void tx_string(char *x)//2000
{
 while(*x != '\0')
  e4:	8c 91       	ld	r24, X
  e6:	88 23       	and	r24, r24
  e8:	91 f7       	brne	.-28     	; 0xce <tx_string+0x8>
  UDR=*x++;
  while( (UCSRA&(1<<5))==0);//wait here till UDRE is 0
  _delay_ms(100);
 }

}
  ea:	08 95       	ret

000000ec <uart_init>:
void uart_init()
{
 UBRRL=0x33;//Fosc=8Mhz,BR=9600
  ec:	83 e3       	ldi	r24, 0x33	; 51
  ee:	89 b9       	out	0x09, r24	; 9
 UCSRB=UCSRB|(1<<TXEN);
  f0:	53 9a       	sbi	0x0a, 3	; 10
 UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
  f2:	80 b5       	in	r24, 0x20	; 32
  f4:	86 68       	ori	r24, 0x86	; 134
  f6:	80 bd       	out	0x20, r24	; 32

}
  f8:	08 95       	ret

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
