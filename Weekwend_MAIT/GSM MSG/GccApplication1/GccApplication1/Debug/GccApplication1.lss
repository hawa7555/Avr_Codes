
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000156  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00000156  000001ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000948  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004f4  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001a0  00000000  00000000  00000ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036e  00000000  00000000  0000105c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000013cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000136  00000000  00000000  00001430  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b8  00000000  00000000  00001566  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e5       	ldi	r30, 0x56	; 86
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 38       	cpi	r26, 0x8A	; 138
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e8       	ldi	r26, 0x8A	; 138
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 38       	cpi	r26, 0x8A	; 138
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9b 00 	call	0x136	; 0x136 <main>
  8a:	0c 94 a9 00 	jmp	0x152	; 0x152 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <txstring>:
   	
   }
return 0;
}
void txstring(char *x)
{
  92:	fc 01       	movw	r30, r24
  while(*x)
  94:	80 81       	ld	r24, Z
  96:	88 23       	and	r24, r24
  98:	81 f0       	breq	.+32     	; 0xba <txstring+0x28>

   	
   }
return 0;
}
void txstring(char *x)
  9a:	31 96       	adiw	r30, 0x01	; 1
{
  while(*x)
  {
  	UDR=*x;
  9c:	8c b9       	out	0x0c, r24	; 12
  	while( (UCSRA&(1<<UDRE))==0){}
  9e:	5d 9b       	sbis	0x0b, 5	; 11
  a0:	fe cf       	rjmp	.-4      	; 0x9e <txstring+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	90 e7       	ldi	r25, 0x70	; 112
  a6:	a2 e0       	ldi	r26, 0x02	; 2
  a8:	81 50       	subi	r24, 0x01	; 1
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	a0 40       	sbci	r26, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <txstring+0x16>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <txstring+0x20>
  b2:	00 00       	nop
   }
return 0;
}
void txstring(char *x)
{
  while(*x)
  b4:	81 91       	ld	r24, Z+
  b6:	88 23       	and	r24, r24
  b8:	89 f7       	brne	.-30     	; 0x9c <txstring+0xa>
  ba:	08 95       	ret

000000bc <usart_init>:
	_delay_ms(100);
  }
}
void usart_init()
{
	UCSRB=UCSRB|(1<<TXEN);
  bc:	53 9a       	sbi	0x0a, 3	; 10
	UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  be:	80 b5       	in	r24, 0x20	; 32
  c0:	86 68       	ori	r24, 0x86	; 134
  c2:	80 bd       	out	0x20, r24	; 32
	UBRRL=0x33;
  c4:	83 e3       	ldi	r24, 0x33	; 51
  c6:	89 b9       	out	0x09, r24	; 9
}
  c8:	08 95       	ret

000000ca <gsm>:

   void gsm()
{
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	0f 92       	push	r0
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
   char ctrlz[]={26};
  d4:	8a e1       	ldi	r24, 0x1A	; 26
  d6:	89 83       	std	Y+1, r24	; 0x01
txstring("AT+CMGF=1\r");
  d8:	80 e6       	ldi	r24, 0x60	; 96
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 49 00 	call	0x92	; 0x92 <txstring>
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	94 e3       	ldi	r25, 0x34	; 52
  e4:	ac e0       	ldi	r26, 0x0C	; 12
  e6:	81 50       	subi	r24, 0x01	; 1
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	a0 40       	sbci	r26, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <gsm+0x1c>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <gsm+0x26>
  f0:	00 00       	nop
_delay_ms(500);
txstring("AT+CMGS=\"8700070981\"\r");
  f2:	8b e6       	ldi	r24, 0x6B	; 107
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 49 00 	call	0x92	; 0x92 <txstring>
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	93 ed       	ldi	r25, 0xD3	; 211
  fe:	a0 e3       	ldi	r26, 0x30	; 48
 100:	81 50       	subi	r24, 0x01	; 1
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	a0 40       	sbci	r26, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <gsm+0x36>
 108:	00 c0       	rjmp	.+0      	; 0x10a <gsm+0x40>
 10a:	00 00       	nop
_delay_ms(2000);
txstring("HELLOOOO");
 10c:	81 e8       	ldi	r24, 0x81	; 129
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 49 00 	call	0x92	; 0x92 <txstring>
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	91 ee       	ldi	r25, 0xE1	; 225
 118:	a4 e0       	ldi	r26, 0x04	; 4
 11a:	81 50       	subi	r24, 0x01	; 1
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	a0 40       	sbci	r26, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <gsm+0x50>
 122:	00 c0       	rjmp	.+0      	; 0x124 <gsm+0x5a>
 124:	00 00       	nop
_delay_ms(200);
txstring(ctrlz);
 126:	ce 01       	movw	r24, r28
 128:	01 96       	adiw	r24, 0x01	; 1
 12a:	0e 94 49 00 	call	0x92	; 0x92 <txstring>

}
 12e:	0f 90       	pop	r0
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <main>:
void txstring(char *);
void usart_init();
void gsm();
int main()
{
	DDRA=0x00;
 136:	1a ba       	out	0x1a, r1	; 26
	DDRB=0x01;
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	87 bb       	out	0x17, r24	; 23
   usart_init();
 13c:	0e 94 5e 00 	call	0xbc	; 0xbc <usart_init>
   while(1)
   {
	   if(PINA&0x01)
	   {
            gsm();
			PORTB=0x01;
 140:	c1 e0       	ldi	r28, 0x01	; 1
	DDRA=0x00;
	DDRB=0x01;
   usart_init();
   while(1)
   {
	   if(PINA&0x01)
 142:	c8 9b       	sbis	0x19, 0	; 25
 144:	04 c0       	rjmp	.+8      	; 0x14e <main+0x18>
	   {
            gsm();
 146:	0e 94 65 00 	call	0xca	; 0xca <gsm>
			PORTB=0x01;
 14a:	c8 bb       	out	0x18, r28	; 24
 14c:	fa cf       	rjmp	.-12     	; 0x142 <main+0xc>
	   }	
	   else
	   PORTB=0x00;
 14e:	18 ba       	out	0x18, r1	; 24
 150:	f8 cf       	rjmp	.-16     	; 0x142 <main+0xc>

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
