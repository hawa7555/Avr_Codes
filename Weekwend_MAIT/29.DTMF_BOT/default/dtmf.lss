
dtmf.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000007f  00000000  00000000  00000153  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000004c  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000be  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000002dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000008e  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define Right    0b00100000
#define Stop 	 0b00000000
#define BOT PORTC
int main()
{
  DDRA=DDRA &~ 0x0F;
  6c:	8a b3       	in	r24, 0x1a	; 26
  6e:	80 7f       	andi	r24, 0xF0	; 240
  70:	8a bb       	out	0x1a, r24	; 26
  DDRC=DDRC | (0x0F<<2);
  72:	84 b3       	in	r24, 0x14	; 20
  74:	8c 63       	ori	r24, 0x3C	; 60
  76:	84 bb       	out	0x14, r24	; 20
	  x=x & 0x0F;
	  switch(x)
	  {
	   case 2: BOT=Forward;break;
	    case 4: BOT=Left;break;
		 case 6: BOT=Right;break;
  78:	50 e2       	ldi	r21, 0x20	; 32
		  case 8: BOT=Backward;break;
  7a:	48 e2       	ldi	r20, 0x28	; 40
	{
	  x=PINA;
	  x=x & 0x0F;
	  switch(x)
	  {
	   case 2: BOT=Forward;break;
  7c:	34 e1       	ldi	r19, 0x14	; 20
	    case 4: BOT=Left;break;
  7e:	24 e0       	ldi	r18, 0x04	; 4
  DDRA=DDRA &~ 0x0F;
  DDRC=DDRC | (0x0F<<2);
  int x;
  while(1)
	{
	  x=PINA;
  80:	89 b3       	in	r24, 0x19	; 25
  82:	90 e0       	ldi	r25, 0x00	; 0
	  x=x & 0x0F;
	  switch(x)
  84:	8f 70       	andi	r24, 0x0F	; 15
  86:	90 70       	andi	r25, 0x00	; 0
  88:	85 30       	cpi	r24, 0x05	; 5
  8a:	91 05       	cpc	r25, r1
  8c:	b9 f0       	breq	.+46     	; 0xbc <main+0x50>
  8e:	86 30       	cpi	r24, 0x06	; 6
  90:	91 05       	cpc	r25, r1
  92:	34 f4       	brge	.+12     	; 0xa0 <main+0x34>
  94:	82 30       	cpi	r24, 0x02	; 2
  96:	91 05       	cpc	r25, r1
  98:	49 f0       	breq	.+18     	; 0xac <main+0x40>
  9a:	04 97       	sbiw	r24, 0x04	; 4
  9c:	79 f4       	brne	.+30     	; 0xbc <main+0x50>
  9e:	08 c0       	rjmp	.+16     	; 0xb0 <main+0x44>
  a0:	86 30       	cpi	r24, 0x06	; 6
  a2:	91 05       	cpc	r25, r1
  a4:	39 f0       	breq	.+14     	; 0xb4 <main+0x48>
  a6:	08 97       	sbiw	r24, 0x08	; 8
  a8:	49 f4       	brne	.+18     	; 0xbc <main+0x50>
  aa:	06 c0       	rjmp	.+12     	; 0xb8 <main+0x4c>
	  {
	   case 2: BOT=Forward;break;
  ac:	35 bb       	out	0x15, r19	; 21
  ae:	e8 cf       	rjmp	.-48     	; 0x80 <main+0x14>
	    case 4: BOT=Left;break;
  b0:	25 bb       	out	0x15, r18	; 21
  b2:	e6 cf       	rjmp	.-52     	; 0x80 <main+0x14>
		 case 6: BOT=Right;break;
  b4:	55 bb       	out	0x15, r21	; 21
  b6:	e4 cf       	rjmp	.-56     	; 0x80 <main+0x14>
		  case 8: BOT=Backward;break;
  b8:	45 bb       	out	0x15, r20	; 21
  ba:	e2 cf       	rjmp	.-60     	; 0x80 <main+0x14>
		   case 5: BOT=Stop;break;
 			default: BOT=Stop;
  bc:	15 ba       	out	0x15, r1	; 21
  be:	e0 cf       	rjmp	.-64     	; 0x80 <main+0x14>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
