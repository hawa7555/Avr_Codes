
counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000096  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000002c  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000a2  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000006c  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000bb  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000300  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000bd  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
 }
}

void counter_init()
{
 DDRA=0xff;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
 DDRB=DDRB&~(1<<0);
  70:	b8 98       	cbi	0x17, 0	; 23
 TCNT0=253;
  72:	8d ef       	ldi	r24, 0xFD	; 253
  74:	82 bf       	out	0x32, r24	; 50
 TCCR0=0x06;
  76:	86 e0       	ldi	r24, 0x06	; 6
  78:	83 bf       	out	0x33, r24	; 51
 counter_init();
 while(1)
 {
  do
  {
	PORTA=TCNT0;
  7a:	82 b7       	in	r24, 0x32	; 50
  7c:	8b bb       	out	0x1b, r24	; 27
  }
  while((TIFR&(1<<TOV0))==0);
  7e:	88 b7       	in	r24, 0x38	; 56
  80:	fc cf       	rjmp	.-8      	; 0x7a <main+0xe>

00000082 <counter_init>:
 }
}

void counter_init()
{
 DDRA=0xff;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	8a bb       	out	0x1a, r24	; 26
 DDRB=DDRB&~(1<<0);
  86:	b8 98       	cbi	0x17, 0	; 23
 TCNT0=253;
  88:	8d ef       	ldi	r24, 0xFD	; 253
  8a:	82 bf       	out	0x32, r24	; 50
 TCCR0=0x06;
  8c:	86 e0       	ldi	r24, 0x06	; 6
  8e:	83 bf       	out	0x33, r24	; 51
}
  90:	08 95       	ret

00000092 <_exit>:
  92:	f8 94       	cli

00000094 <__stop_program>:
  94:	ff cf       	rjmp	.-2      	; 0x94 <__stop_program>
