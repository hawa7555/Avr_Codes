
rfid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000066  00800060  000002b2  00000346  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  008000c6  008000c6  000003ac  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000cd  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000053a  00000000  00000000  00000499  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001d5  00000000  00000000  000009d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000048a  00000000  00000000  00000ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00001034  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000015d  00000000  00000000  000010c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000376  00000000  00000000  00001221  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00001597  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 eb       	ldi	r30, 0xB2	; 178
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 3c       	cpi	r26, 0xC6	; 198
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 ec       	ldi	r26, 0xC6	; 198
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 3d       	cpi	r26, 0xD3	; 211
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 be 00 	call	0x17c	; 0x17c <main>
  8a:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <uart_init>:
   _delay_ms(100);
 }
}
void uart_init()
{
 UBRRL=0x33;//Fosc=8Mhz,BR=9600
  92:	83 e3       	ldi	r24, 0x33	; 51
  94:	89 b9       	out	0x09, r24	; 9
 UCSRB=UCSRB|(1<<RXEN);
  96:	54 9a       	sbi	0x0a, 4	; 10
 UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
  98:	80 b5       	in	r24, 0x20	; 32
  9a:	86 68       	ori	r24, 0x86	; 134
  9c:	80 bd       	out	0x20, r24	; 32

}
  9e:	08 95       	ret

000000a0 <lcd_command>:
	lcd_command(0x0E);

}
void lcd_command(char x)
{
 PORTA=(x&0xf0);  //upper 4 bit
  a0:	28 2f       	mov	r18, r24
  a2:	20 7f       	andi	r18, 0xF0	; 240
  a4:	2b bb       	out	0x1b, r18	; 27
 _delay_ms(1);
}

void lcd_command_enable_to_write()
{
 PORTA=PORTA&~(1<<0);//RS=0;
  a6:	d8 98       	cbi	0x1b, 0	; 27
 PORTA=PORTA&~(1<<1);//RW=0;
  a8:	d9 98       	cbi	0x1b, 1	; 27
 PORTA=PORTA |(1<<2);//EN=1;
  aa:	da 9a       	sbi	0x1b, 2	; 27
 PORTA=PORTA&~(1<<2);//EN=0;
  ac:	da 98       	cbi	0x1b, 2	; 27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ae:	20 ed       	ldi	r18, 0xD0	; 208
  b0:	37 e0       	ldi	r19, 0x07	; 7
  b2:	f9 01       	movw	r30, r18
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <lcd_command+0x14>
}
void lcd_command(char x)
{
 PORTA=(x&0xf0);  //upper 4 bit
 lcd_command_enable_to_write();
 PORTA=((x<<4)&0xf0); //lower 4 bit
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	44 e0       	ldi	r20, 0x04	; 4
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	4a 95       	dec	r20
  c2:	e1 f7       	brne	.-8      	; 0xbc <lcd_command+0x1c>
  c4:	8b bb       	out	0x1b, r24	; 27
 _delay_ms(1);
}

void lcd_command_enable_to_write()
{
 PORTA=PORTA&~(1<<0);//RS=0;
  c6:	d8 98       	cbi	0x1b, 0	; 27
 PORTA=PORTA&~(1<<1);//RW=0;
  c8:	d9 98       	cbi	0x1b, 1	; 27
 PORTA=PORTA |(1<<2);//EN=1;
  ca:	da 9a       	sbi	0x1b, 2	; 27
 PORTA=PORTA&~(1<<2);//EN=0;
  cc:	da 98       	cbi	0x1b, 2	; 27
  ce:	c9 01       	movw	r24, r18
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <lcd_command+0x30>
{
 PORTA=(x&0xf0);  //upper 4 bit
 lcd_command_enable_to_write();
 PORTA=((x<<4)&0xf0); //lower 4 bit
 lcd_command_enable_to_write();
}
  d4:	08 95       	ret

000000d6 <lcd_init>:

}

void lcd_init()
{
    DDRA=0xff;
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	8a bb       	out	0x1a, r24	; 26
	lcd_command(0x02);
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_command>
    lcd_command(0x28);
  e0:	88 e2       	ldi	r24, 0x28	; 40
  e2:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_command>
	lcd_command(0x0E);
  e6:	8e e0       	ldi	r24, 0x0E	; 14
  e8:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_command>

}
  ec:	08 95       	ret

000000ee <lcd_data>:
 PORTA=((x<<4)&0xf0); //lower 4 bit
 lcd_command_enable_to_write();
}
void lcd_data(char x)
{
 PORTA=(x&0xf0);  //upper 4 bit
  ee:	28 2f       	mov	r18, r24
  f0:	20 7f       	andi	r18, 0xF0	; 240
  f2:	2b bb       	out	0x1b, r18	; 27
 PORTA=((x<<4)&0xf0); //lower 4 bit
 lcd_data_enable_to_write();
}
void lcd_data_enable_to_write()
{
 PORTA=PORTA |(1<<0);//RS=0;
  f4:	d8 9a       	sbi	0x1b, 0	; 27
 PORTA=PORTA&~(1<<1);//RW=0;
  f6:	d9 98       	cbi	0x1b, 1	; 27
 PORTA=PORTA |(1<<2);//EN=1;
  f8:	da 9a       	sbi	0x1b, 2	; 27
 PORTA=PORTA&~(1<<2);//EN=0;
  fa:	da 98       	cbi	0x1b, 2	; 27
  fc:	20 ed       	ldi	r18, 0xD0	; 208
  fe:	37 e0       	ldi	r19, 0x07	; 7
 100:	f9 01       	movw	r30, r18
 102:	31 97       	sbiw	r30, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <lcd_data+0x14>
}
void lcd_data(char x)
{
 PORTA=(x&0xf0);  //upper 4 bit
 lcd_data_enable_to_write();
 PORTA=((x<<4)&0xf0); //lower 4 bit
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	54 e0       	ldi	r21, 0x04	; 4
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	5a 95       	dec	r21
 110:	e1 f7       	brne	.-8      	; 0x10a <lcd_data+0x1c>
 112:	8b bb       	out	0x1b, r24	; 27
 lcd_data_enable_to_write();
}
void lcd_data_enable_to_write()
{
 PORTA=PORTA |(1<<0);//RS=0;
 114:	d8 9a       	sbi	0x1b, 0	; 27
 PORTA=PORTA&~(1<<1);//RW=0;
 116:	d9 98       	cbi	0x1b, 1	; 27
 PORTA=PORTA |(1<<2);//EN=1;
 118:	da 9a       	sbi	0x1b, 2	; 27
 PORTA=PORTA&~(1<<2);//EN=0;
 11a:	da 98       	cbi	0x1b, 2	; 27
 11c:	c9 01       	movw	r24, r18
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <lcd_data+0x30>
{
 PORTA=(x&0xf0);  //upper 4 bit
 lcd_data_enable_to_write();
 PORTA=((x<<4)&0xf0); //lower 4 bit
 lcd_data_enable_to_write();
}
 122:	08 95       	ret

00000124 <lcd_string>:
 }
 }
return 0;
}
void lcd_string(char *x)
{
 124:	0f 93       	push	r16
 126:	1f 93       	push	r17
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	ec 01       	movw	r28, r24
 12e:	08 ec       	ldi	r16, 0xC8	; 200
 130:	10 e0       	ldi	r17, 0x00	; 0
 132:	0a c0       	rjmp	.+20     	; 0x148 <lcd_string+0x24>
 while(*x)
 {
   lcd_data(*x++);
 134:	0e 94 77 00 	call	0xee	; 0xee <lcd_data>
 138:	88 ee       	ldi	r24, 0xE8	; 232
 13a:	93 e0       	ldi	r25, 0x03	; 3
 13c:	f8 01       	movw	r30, r16
 13e:	31 97       	sbiw	r30, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <lcd_string+0x1a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 142:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 144:	d9 f7       	brne	.-10     	; 0x13c <lcd_string+0x18>
 146:	21 96       	adiw	r28, 0x01	; 1
 }
return 0;
}
void lcd_string(char *x)
{
 while(*x)
 148:	88 81       	ld	r24, Y
 14a:	88 23       	and	r24, r24
 14c:	99 f7       	brne	.-26     	; 0x134 <lcd_string+0x10>
 {
   lcd_data(*x++);
   _delay_ms(100);
 }
}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	1f 91       	pop	r17
 154:	0f 91       	pop	r16
 156:	08 95       	ret

00000158 <lcd_data_enable_to_write>:
 PORTA=((x<<4)&0xf0); //lower 4 bit
 lcd_data_enable_to_write();
}
void lcd_data_enable_to_write()
{
 PORTA=PORTA |(1<<0);//RS=0;
 158:	d8 9a       	sbi	0x1b, 0	; 27
 PORTA=PORTA&~(1<<1);//RW=0;
 15a:	d9 98       	cbi	0x1b, 1	; 27
 PORTA=PORTA |(1<<2);//EN=1;
 15c:	da 9a       	sbi	0x1b, 2	; 27
 PORTA=PORTA&~(1<<2);//EN=0;
 15e:	da 98       	cbi	0x1b, 2	; 27
 160:	80 ed       	ldi	r24, 0xD0	; 208
 162:	97 e0       	ldi	r25, 0x07	; 7
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <lcd_data_enable_to_write+0xc>
 _delay_ms(1);
}
 168:	08 95       	ret

0000016a <lcd_command_enable_to_write>:

void lcd_command_enable_to_write()
{
 PORTA=PORTA&~(1<<0);//RS=0;
 16a:	d8 98       	cbi	0x1b, 0	; 27
 PORTA=PORTA&~(1<<1);//RW=0;
 16c:	d9 98       	cbi	0x1b, 1	; 27
 PORTA=PORTA |(1<<2);//EN=1;
 16e:	da 9a       	sbi	0x1b, 2	; 27
 PORTA=PORTA&~(1<<2);//EN=0;
 170:	da 98       	cbi	0x1b, 2	; 27
 172:	80 ed       	ldi	r24, 0xD0	; 208
 174:	97 e0       	ldi	r25, 0x07	; 7
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <lcd_command_enable_to_write+0xc>
 _delay_ms(1);
}
 17a:	08 95       	ret

0000017c <main>:
char pappu[]="42006B40026B";
char a[13];


int main()
{
 17c:	1f 93       	push	r17
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 int i;
 DDRB=3;
 182:	83 e0       	ldi	r24, 0x03	; 3
 184:	87 bb       	out	0x17, r24	; 23
 lcd_init();
 186:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_init>
   _delay_ms(100);
 }
}
void uart_init()
{
 UBRRL=0x33;//Fosc=8Mhz,BR=9600
 18a:	83 e3       	ldi	r24, 0x33	; 51
 18c:	89 b9       	out	0x09, r24	; 9
 UCSRB=UCSRB|(1<<RXEN);
 18e:	54 9a       	sbi	0x0a, 4	; 10
 UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
 190:	80 b5       	in	r24, 0x20	; 32
 192:	86 68       	ori	r24, 0x86	; 134
 194:	80 bd       	out	0x20, r24	; 32
 196:	a0 e0       	ldi	r26, 0x00	; 0
 198:	b0 e0       	ldi	r27, 0x00	; 0
 19a:	c8 ec       	ldi	r28, 0xC8	; 200
 19c:	d0 e0       	ldi	r29, 0x00	; 0
  {
    lcd_command(0x01);
	lcd_string("Hi Pappu");
	PORTB=0b00000001;
	_delay_ms(5000);
	PORTB=0b00000010;
 19e:	12 e0       	ldi	r17, 0x02	; 2
 1a0:	08 c0       	rjmp	.+16     	; 0x1b2 <main+0x36>
 uart_init();
 while(1)
 {
    for(i=0;i<12;i++)
	{
		while( (UCSRA &(1<<7))==0);
 1a2:	5f 9b       	sbis	0x0b, 7	; 11
 1a4:	fe cf       	rjmp	.-4      	; 0x1a2 <main+0x26>
    	a[i]=UDR;
 1a6:	8c b1       	in	r24, 0x0c	; 12
 1a8:	fd 01       	movw	r30, r26
 1aa:	ea 53       	subi	r30, 0x3A	; 58
 1ac:	ff 4f       	sbci	r31, 0xFF	; 255
 1ae:	80 83       	st	Z, r24
 DDRB=3;
 lcd_init();
 uart_init();
 while(1)
 {
    for(i=0;i<12;i++)
 1b0:	11 96       	adiw	r26, 0x01	; 1
 1b2:	ac 30       	cpi	r26, 0x0C	; 12
 1b4:	b1 05       	cpc	r27, r1
 1b6:	ac f3       	brlt	.-22     	; 0x1a2 <main+0x26>
	{
		while( (UCSRA &(1<<7))==0);
    	a[i]=UDR;
    }
  a[i]='\0';
 1b8:	aa 53       	subi	r26, 0x3A	; 58
 1ba:	bf 4f       	sbci	r27, 0xFF	; 255
 1bc:	1c 92       	st	X, r1
  
  if( (strcmp(a,yash))==0)
 1be:	86 ec       	ldi	r24, 0xC6	; 198
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	61 e9       	ldi	r22, 0x91	; 145
 1c4:	70 e0       	ldi	r23, 0x00	; 0
 1c6:	0e 94 4e 01 	call	0x29c	; 0x29c <strcmp>
 1ca:	00 97       	sbiw	r24, 0x00	; 0
 1cc:	89 f4       	brne	.+34     	; 0x1f0 <main+0x74>
  {
    lcd_command(0x01);
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_command>
	lcd_string("HiYash");
 1d4:	80 e6       	ldi	r24, 0x60	; 96
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 92 00 	call	0x124	; 0x124 <lcd_string>
	PORTB=0b00000001;
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	88 bb       	out	0x18, r24	; 24
 1e0:	80 e5       	ldi	r24, 0x50	; 80
 1e2:	93 ec       	ldi	r25, 0xC3	; 195
 1e4:	fe 01       	movw	r30, r28
 1e6:	31 97       	sbiw	r30, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <main+0x6a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ec:	d9 f7       	brne	.-10     	; 0x1e4 <main+0x68>
 1ee:	4a c0       	rjmp	.+148    	; 0x284 <main+0x108>
	_delay_ms(5000);
	PORTB=0b00000010;

  }
  else if( (strcmp(a,tushar))==0)
 1f0:	86 ec       	ldi	r24, 0xC6	; 198
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	6e e9       	ldi	r22, 0x9E	; 158
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	0e 94 4e 01 	call	0x29c	; 0x29c <strcmp>
 1fc:	00 97       	sbiw	r24, 0x00	; 0
 1fe:	89 f4       	brne	.+34     	; 0x222 <main+0xa6>
  {
    lcd_command(0x01);
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_command>
	lcd_string("Hi Tushar");
 206:	87 e6       	ldi	r24, 0x67	; 103
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 92 00 	call	0x124	; 0x124 <lcd_string>
	PORTB=0b00000001;
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	88 bb       	out	0x18, r24	; 24
 212:	80 e5       	ldi	r24, 0x50	; 80
 214:	93 ec       	ldi	r25, 0xC3	; 195
 216:	fe 01       	movw	r30, r28
 218:	31 97       	sbiw	r30, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <main+0x9c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 21c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 21e:	d9 f7       	brne	.-10     	; 0x216 <main+0x9a>
 220:	31 c0       	rjmp	.+98     	; 0x284 <main+0x108>
	_delay_ms(5000);
	PORTB=0b00000010;
  }
  else if( (strcmp(a,rishu))==0)
 222:	86 ec       	ldi	r24, 0xC6	; 198
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	6b ea       	ldi	r22, 0xAB	; 171
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	0e 94 4e 01 	call	0x29c	; 0x29c <strcmp>
 22e:	00 97       	sbiw	r24, 0x00	; 0
 230:	89 f4       	brne	.+34     	; 0x254 <main+0xd8>
  {
    lcd_command(0x01);
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_command>
	lcd_string("Hi Rishu");
 238:	81 e7       	ldi	r24, 0x71	; 113
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 92 00 	call	0x124	; 0x124 <lcd_string>
	PORTB=0b00000001;
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	88 bb       	out	0x18, r24	; 24
 244:	80 e5       	ldi	r24, 0x50	; 80
 246:	93 ec       	ldi	r25, 0xC3	; 195
 248:	fe 01       	movw	r30, r28
 24a:	31 97       	sbiw	r30, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <main+0xce>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 24e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 250:	d9 f7       	brne	.-10     	; 0x248 <main+0xcc>
 252:	18 c0       	rjmp	.+48     	; 0x284 <main+0x108>
	_delay_ms(5000);
	PORTB=0b00000010;
  }
  else if( (strcmp(a,pappu))==0)
 254:	86 ec       	ldi	r24, 0xC6	; 198
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	68 eb       	ldi	r22, 0xB8	; 184
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	0e 94 4e 01 	call	0x29c	; 0x29c <strcmp>
 260:	00 97       	sbiw	r24, 0x00	; 0
 262:	91 f4       	brne	.+36     	; 0x288 <main+0x10c>
  {
    lcd_command(0x01);
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_command>
	lcd_string("Hi Pappu");
 26a:	8a e7       	ldi	r24, 0x7A	; 122
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 92 00 	call	0x124	; 0x124 <lcd_string>
	PORTB=0b00000001;
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	88 bb       	out	0x18, r24	; 24
 276:	80 e5       	ldi	r24, 0x50	; 80
 278:	93 ec       	ldi	r25, 0xC3	; 195
 27a:	fe 01       	movw	r30, r28
 27c:	31 97       	sbiw	r30, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <main+0x100>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 280:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 282:	d9 f7       	brne	.-10     	; 0x27a <main+0xfe>
	_delay_ms(5000);
	PORTB=0b00000010;
 284:	18 bb       	out	0x18, r17	; 24
 286:	07 c0       	rjmp	.+14     	; 0x296 <main+0x11a>
  }
 else
 {
    lcd_command(0x01);
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_command>
	lcd_string("Access Denied");
 28e:	83 e8       	ldi	r24, 0x83	; 131
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 92 00 	call	0x124	; 0x124 <lcd_string>
 296:	a0 e0       	ldi	r26, 0x00	; 0
 298:	b0 e0       	ldi	r27, 0x00	; 0
 29a:	8b cf       	rjmp	.-234    	; 0x1b2 <main+0x36>

0000029c <strcmp>:
 29c:	fb 01       	movw	r30, r22
 29e:	dc 01       	movw	r26, r24
 2a0:	8d 91       	ld	r24, X+
 2a2:	01 90       	ld	r0, Z+
 2a4:	80 19       	sub	r24, r0
 2a6:	01 10       	cpse	r0, r1
 2a8:	d9 f3       	breq	.-10     	; 0x2a0 <strcmp+0x4>
 2aa:	99 0b       	sbc	r25, r25
 2ac:	08 95       	ret

000002ae <_exit>:
 2ae:	f8 94       	cli

000002b0 <__stop_program>:
 2b0:	ff cf       	rjmp	.-2      	; 0x2b0 <__stop_program>
