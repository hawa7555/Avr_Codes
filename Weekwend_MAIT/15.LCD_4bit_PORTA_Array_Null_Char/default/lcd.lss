
lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000001fc  00000270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000008e  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003e6  00000000  00000000  0000033a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001aa  00000000  00000000  00000720  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000357  00000000  00000000  000008ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  00000c24  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000141  00000000  00000000  00000ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000a6  00000000  00000000  00000de5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  00000e8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <main>
  7a:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_command>:
	lcd_command(0x0E);

}
void lcd_command(char x)
{
 PORTA=(x&0xf0);  //upper 4 bit
  82:	28 2f       	mov	r18, r24
  84:	20 7f       	andi	r18, 0xF0	; 240
  86:	2b bb       	out	0x1b, r18	; 27
 _delay_ms(1);
}

void lcd_command_enable_to_write()
{
 PORTA=PORTA&~(1<<0);//RS=0;
  88:	d8 98       	cbi	0x1b, 0	; 27
 PORTA=PORTA&~(1<<1);//RW=0;
  8a:	d9 98       	cbi	0x1b, 1	; 27
 PORTA=PORTA |(1<<2);//EN=1;
  8c:	da 9a       	sbi	0x1b, 2	; 27
 PORTA=PORTA&~(1<<2);//EN=0;
  8e:	da 98       	cbi	0x1b, 2	; 27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  90:	20 ed       	ldi	r18, 0xD0	; 208
  92:	37 e0       	ldi	r19, 0x07	; 7
  94:	f9 01       	movw	r30, r18
  96:	31 97       	sbiw	r30, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <lcd_command+0x14>
}
void lcd_command(char x)
{
 PORTA=(x&0xf0);  //upper 4 bit
 lcd_command_enable_to_write();
 PORTA=((x<<4)&0xf0); //lower 4 bit
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	44 e0       	ldi	r20, 0x04	; 4
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	4a 95       	dec	r20
  a4:	e1 f7       	brne	.-8      	; 0x9e <lcd_command+0x1c>
  a6:	8b bb       	out	0x1b, r24	; 27
 _delay_ms(1);
}

void lcd_command_enable_to_write()
{
 PORTA=PORTA&~(1<<0);//RS=0;
  a8:	d8 98       	cbi	0x1b, 0	; 27
 PORTA=PORTA&~(1<<1);//RW=0;
  aa:	d9 98       	cbi	0x1b, 1	; 27
 PORTA=PORTA |(1<<2);//EN=1;
  ac:	da 9a       	sbi	0x1b, 2	; 27
 PORTA=PORTA&~(1<<2);//EN=0;
  ae:	da 98       	cbi	0x1b, 2	; 27
  b0:	c9 01       	movw	r24, r18
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <lcd_command+0x30>
{
 PORTA=(x&0xf0);  //upper 4 bit
 lcd_command_enable_to_write();
 PORTA=((x<<4)&0xf0); //lower 4 bit
 lcd_command_enable_to_write();
}
  b6:	08 95       	ret

000000b8 <lcd_init>:
  _delay_ms(100);
 }
}
void lcd_init()
{
    DDRA=0xff;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	8a bb       	out	0x1a, r24	; 26
	lcd_command(0x02);
  bc:	82 e0       	ldi	r24, 0x02	; 2
  be:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
    lcd_command(0x28);
  c2:	88 e2       	ldi	r24, 0x28	; 40
  c4:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
	lcd_command(0x0E);
  c8:	8e e0       	ldi	r24, 0x0E	; 14
  ca:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>

}
  ce:	08 95       	ret

000000d0 <lcd_data>:
 PORTA=((x<<4)&0xf0); //lower 4 bit
 lcd_command_enable_to_write();
}
void lcd_data(char x)
{
 PORTA=(x&0xf0);  //upper 4 bit
  d0:	28 2f       	mov	r18, r24
  d2:	20 7f       	andi	r18, 0xF0	; 240
  d4:	2b bb       	out	0x1b, r18	; 27
 PORTA=((x<<4)&0xf0); //lower 4 bit
 lcd_data_enable_to_write();
}
void lcd_data_enable_to_write()
{
 PORTA=PORTA |(1<<0);//RS=0;
  d6:	d8 9a       	sbi	0x1b, 0	; 27
 PORTA=PORTA&~(1<<1);//RW=0;
  d8:	d9 98       	cbi	0x1b, 1	; 27
 PORTA=PORTA |(1<<2);//EN=1;
  da:	da 9a       	sbi	0x1b, 2	; 27
 PORTA=PORTA&~(1<<2);//EN=0;
  dc:	da 98       	cbi	0x1b, 2	; 27
  de:	20 ed       	ldi	r18, 0xD0	; 208
  e0:	37 e0       	ldi	r19, 0x07	; 7
  e2:	f9 01       	movw	r30, r18
  e4:	31 97       	sbiw	r30, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <lcd_data+0x14>
}
void lcd_data(char x)
{
 PORTA=(x&0xf0);  //upper 4 bit
 lcd_data_enable_to_write();
 PORTA=((x<<4)&0xf0); //lower 4 bit
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	54 e0       	ldi	r21, 0x04	; 4
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	5a 95       	dec	r21
  f2:	e1 f7       	brne	.-8      	; 0xec <lcd_data+0x1c>
  f4:	8b bb       	out	0x1b, r24	; 27
 lcd_data_enable_to_write();
}
void lcd_data_enable_to_write()
{
 PORTA=PORTA |(1<<0);//RS=0;
  f6:	d8 9a       	sbi	0x1b, 0	; 27
 PORTA=PORTA&~(1<<1);//RW=0;
  f8:	d9 98       	cbi	0x1b, 1	; 27
 PORTA=PORTA |(1<<2);//EN=1;
  fa:	da 9a       	sbi	0x1b, 2	; 27
 PORTA=PORTA&~(1<<2);//EN=0;
  fc:	da 98       	cbi	0x1b, 2	; 27
  fe:	c9 01       	movw	r24, r18
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <lcd_data+0x30>
{
 PORTA=(x&0xf0);  //upper 4 bit
 lcd_data_enable_to_write();
 PORTA=((x<<4)&0xf0); //lower 4 bit
 lcd_data_enable_to_write();
}
 104:	08 95       	ret

00000106 <display>:
return 0;
}


void display()
{
 106:	ef 92       	push	r14
 108:	ff 92       	push	r15
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	df 93       	push	r29
 110:	cf 93       	push	r28
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
 116:	6b 97       	sbiw	r28, 0x1b	; 27
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	f8 94       	cli
 11c:	de bf       	out	0x3e, r29	; 62
 11e:	0f be       	out	0x3f, r0	; 63
 120:	cd bf       	out	0x3d, r28	; 61
 char a[]="GOD IS ONE";
 122:	de 01       	movw	r26, r28
 124:	11 96       	adiw	r26, 0x01	; 1
 126:	e0 e6       	ldi	r30, 0x60	; 96
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	8b e0       	ldi	r24, 0x0B	; 11
 12c:	01 90       	ld	r0, Z+
 12e:	0d 92       	st	X+, r0
 130:	81 50       	subi	r24, 0x01	; 1
 132:	e1 f7       	brne	.-8      	; 0x12c <display+0x26>
 char b[]="BUT WHO BELIEVS";
 134:	de 01       	movw	r26, r28
 136:	1c 96       	adiw	r26, 0x0c	; 12
 138:	eb e6       	ldi	r30, 0x6B	; 107
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 e1       	ldi	r24, 0x10	; 16
 13e:	01 90       	ld	r0, Z+
 140:	0d 92       	st	X+, r0
 142:	81 50       	subi	r24, 0x01	; 1
 144:	e1 f7       	brne	.-8      	; 0x13e <display+0x38>
 int i;

 lcd_command(0x80);
 146:	80 e8       	ldi	r24, 0x80	; 128
 148:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
 14c:	8e 01       	movw	r16, r28
 14e:	0f 5f       	subi	r16, 0xFF	; 255
 150:	1f 4f       	sbci	r17, 0xFF	; 255
 152:	78 ec       	ldi	r23, 0xC8	; 200
 154:	e7 2e       	mov	r14, r23
 156:	f1 2c       	mov	r15, r1
 158:	0b c0       	rjmp	.+22     	; 0x170 <display+0x6a>
 for(i=0;a[i] != '\0'; i++)
 {
  lcd_data(a[i]);
 15a:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_data>
 15e:	88 ee       	ldi	r24, 0xE8	; 232
 160:	93 e0       	ldi	r25, 0x03	; 3
 162:	f7 01       	movw	r30, r14
 164:	31 97       	sbiw	r30, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <display+0x5e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 168:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 16a:	d9 f7       	brne	.-10     	; 0x162 <display+0x5c>
 16c:	0f 5f       	subi	r16, 0xFF	; 255
 16e:	1f 4f       	sbci	r17, 0xFF	; 255
 char a[]="GOD IS ONE";
 char b[]="BUT WHO BELIEVS";
 int i;

 lcd_command(0x80);
 for(i=0;a[i] != '\0'; i++)
 170:	f8 01       	movw	r30, r16
 172:	80 81       	ld	r24, Z
 174:	88 23       	and	r24, r24
 176:	89 f7       	brne	.-30     	; 0x15a <display+0x54>
 {
  lcd_data(a[i]);
  _delay_ms(100);
 }

 lcd_command(0xC0);
 178:	80 ec       	ldi	r24, 0xC0	; 192
 17a:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
 17e:	8e 01       	movw	r16, r28
 180:	04 5f       	subi	r16, 0xF4	; 244
 182:	1f 4f       	sbci	r17, 0xFF	; 255
 184:	68 ec       	ldi	r22, 0xC8	; 200
 186:	e6 2e       	mov	r14, r22
 188:	f1 2c       	mov	r15, r1
 18a:	0b c0       	rjmp	.+22     	; 0x1a2 <display+0x9c>
 for(i=0;b[i] != '\0'; i++)
 {
  lcd_data(b[i]);
 18c:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_data>
 190:	88 ee       	ldi	r24, 0xE8	; 232
 192:	93 e0       	ldi	r25, 0x03	; 3
 194:	f7 01       	movw	r30, r14
 196:	31 97       	sbiw	r30, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <display+0x90>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 19a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 19c:	d9 f7       	brne	.-10     	; 0x194 <display+0x8e>
 19e:	0f 5f       	subi	r16, 0xFF	; 255
 1a0:	1f 4f       	sbci	r17, 0xFF	; 255
  lcd_data(a[i]);
  _delay_ms(100);
 }

 lcd_command(0xC0);
 for(i=0;b[i] != '\0'; i++)
 1a2:	f8 01       	movw	r30, r16
 1a4:	80 81       	ld	r24, Z
 1a6:	88 23       	and	r24, r24
 1a8:	89 f7       	brne	.-30     	; 0x18c <display+0x86>
 {
  lcd_data(b[i]);
  _delay_ms(100);
 }
}
 1aa:	6b 96       	adiw	r28, 0x1b	; 27
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	f8 94       	cli
 1b0:	de bf       	out	0x3e, r29	; 62
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	cd bf       	out	0x3d, r28	; 61
 1b6:	cf 91       	pop	r28
 1b8:	df 91       	pop	r29
 1ba:	1f 91       	pop	r17
 1bc:	0f 91       	pop	r16
 1be:	ff 90       	pop	r15
 1c0:	ef 90       	pop	r14
 1c2:	08 95       	ret

000001c4 <main>:
void lcd_data_enable_to_write();
void lcd_command_enable_to_write();
void lcd_data(char );
int main()
{
  lcd_init();
 1c4:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_init>
  while(1)
  {
    
    display();
 1c8:	0e 94 83 00 	call	0x106	; 0x106 <display>
	lcd_command(0x01);
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
 1d2:	fa cf       	rjmp	.-12     	; 0x1c8 <main+0x4>

000001d4 <lcd_data_enable_to_write>:
 PORTA=((x<<4)&0xf0); //lower 4 bit
 lcd_data_enable_to_write();
}
void lcd_data_enable_to_write()
{
 PORTA=PORTA |(1<<0);//RS=0;
 1d4:	d8 9a       	sbi	0x1b, 0	; 27
 PORTA=PORTA&~(1<<1);//RW=0;
 1d6:	d9 98       	cbi	0x1b, 1	; 27
 PORTA=PORTA |(1<<2);//EN=1;
 1d8:	da 9a       	sbi	0x1b, 2	; 27
 PORTA=PORTA&~(1<<2);//EN=0;
 1da:	da 98       	cbi	0x1b, 2	; 27
 1dc:	80 ed       	ldi	r24, 0xD0	; 208
 1de:	97 e0       	ldi	r25, 0x07	; 7
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <lcd_data_enable_to_write+0xc>
 _delay_ms(1);
}
 1e4:	08 95       	ret

000001e6 <lcd_command_enable_to_write>:

void lcd_command_enable_to_write()
{
 PORTA=PORTA&~(1<<0);//RS=0;
 1e6:	d8 98       	cbi	0x1b, 0	; 27
 PORTA=PORTA&~(1<<1);//RW=0;
 1e8:	d9 98       	cbi	0x1b, 1	; 27
 PORTA=PORTA |(1<<2);//EN=1;
 1ea:	da 9a       	sbi	0x1b, 2	; 27
 PORTA=PORTA&~(1<<2);//EN=0;
 1ec:	da 98       	cbi	0x1b, 2	; 27
 1ee:	80 ed       	ldi	r24, 0xD0	; 208
 1f0:	97 e0       	ldi	r25, 0x07	; 7
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lcd_command_enable_to_write+0xc>
 _delay_ms(1);
}
 1f6:	08 95       	ret

000001f8 <_exit>:
 1f8:	f8 94       	cli

000001fa <__stop_program>:
 1fa:	ff cf       	rjmp	.-2      	; 0x1fa <__stop_program>
