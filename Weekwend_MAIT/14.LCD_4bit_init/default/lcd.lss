
lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000058  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001fd  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000010c  00000000  00000000  000003a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001e7  00000000  00000000  000004af  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  00000698  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000106  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000023  00000000  00000000  000007ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5d 00 	call	0xba	; 0xba <main>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <lcd_command>:
	lcd_command(0x0E);

}
void lcd_command(char x)
{
 PORTA=(x&0xf0);  //upper 4 bit
  6c:	28 2f       	mov	r18, r24
  6e:	20 7f       	andi	r18, 0xF0	; 240
  70:	2b bb       	out	0x1b, r18	; 27
 lcd_commnad_enable_to_write();

}
void lcd_commnad_enable_to_write()
{
 PORTA=PORTA&~(1<<0);//RS=0;
  72:	d8 98       	cbi	0x1b, 0	; 27
 PORTA=PORTA&~(1<<1);//RW=0;
  74:	d9 98       	cbi	0x1b, 1	; 27
 PORTA=PORTA |(1<<2);//EN=1;
  76:	da 9a       	sbi	0x1b, 2	; 27
 PORTA=PORTA&~(1<<2);//EN=0;
  78:	da 98       	cbi	0x1b, 2	; 27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  7a:	20 ed       	ldi	r18, 0xD0	; 208
  7c:	37 e0       	ldi	r19, 0x07	; 7
  7e:	f9 01       	movw	r30, r18
  80:	31 97       	sbiw	r30, 0x01	; 1
  82:	f1 f7       	brne	.-4      	; 0x80 <lcd_command+0x14>
}
void lcd_command(char x)
{
 PORTA=(x&0xf0);  //upper 4 bit
 lcd_commnad_enable_to_write();
 PORTA=((x<<4)&0xf0); //lower 4 bit
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	44 e0       	ldi	r20, 0x04	; 4
  88:	88 0f       	add	r24, r24
  8a:	99 1f       	adc	r25, r25
  8c:	4a 95       	dec	r20
  8e:	e1 f7       	brne	.-8      	; 0x88 <lcd_command+0x1c>
  90:	8b bb       	out	0x1b, r24	; 27
 lcd_commnad_enable_to_write();

}
void lcd_commnad_enable_to_write()
{
 PORTA=PORTA&~(1<<0);//RS=0;
  92:	d8 98       	cbi	0x1b, 0	; 27
 PORTA=PORTA&~(1<<1);//RW=0;
  94:	d9 98       	cbi	0x1b, 1	; 27
 PORTA=PORTA |(1<<2);//EN=1;
  96:	da 9a       	sbi	0x1b, 2	; 27
 PORTA=PORTA&~(1<<2);//EN=0;
  98:	da 98       	cbi	0x1b, 2	; 27
  9a:	c9 01       	movw	r24, r18
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <lcd_command+0x30>
 PORTA=(x&0xf0);  //upper 4 bit
 lcd_commnad_enable_to_write();
 PORTA=((x<<4)&0xf0); //lower 4 bit
 lcd_commnad_enable_to_write();

}
  a0:	08 95       	ret

000000a2 <lcd_init>:
  lcd_init();
}

void lcd_init()
{
    DDRA=0xff;
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	8a bb       	out	0x1a, r24	; 26
	lcd_command(0x02);
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_command>
    lcd_command(0x28);
  ac:	88 e2       	ldi	r24, 0x28	; 40
  ae:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_command>
	lcd_command(0x0E);
  b2:	8e e0       	ldi	r24, 0x0E	; 14
  b4:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_command>

}
  b8:	08 95       	ret

000000ba <main>:
#include<util/delay.h>
void lcd_command(char );
void lcd_init(void );
int main()
{
  lcd_init();
  ba:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_init>
}
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	08 95       	ret

000000c4 <lcd_commnad_enable_to_write>:
 lcd_commnad_enable_to_write();

}
void lcd_commnad_enable_to_write()
{
 PORTA=PORTA&~(1<<0);//RS=0;
  c4:	d8 98       	cbi	0x1b, 0	; 27
 PORTA=PORTA&~(1<<1);//RW=0;
  c6:	d9 98       	cbi	0x1b, 1	; 27
 PORTA=PORTA |(1<<2);//EN=1;
  c8:	da 9a       	sbi	0x1b, 2	; 27
 PORTA=PORTA&~(1<<2);//EN=0;
  ca:	da 98       	cbi	0x1b, 2	; 27
  cc:	80 ed       	ldi	r24, 0xD0	; 208
  ce:	97 e0       	ldi	r25, 0x07	; 7
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <lcd_commnad_enable_to_write+0xc>
 _delay_ms(1);
}
  d4:	08 95       	ret

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
