
Multiplexing_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000110  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000110  00000184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000018e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d2  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e9  00000000  00000000  000008ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b2  00000000  00000000  00000ed7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000118c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000344  00000000  00000000  000011c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000014f  00000000  00000000  00001504  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001653  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#define F_CPU 1000000UL
#include<avr/io.h>
#include<util/delay.h>

void main()
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2a 97       	sbiw	r28, 0x0a	; 10
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	DDRA=0xFF;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	8a bb       	out	0x1a, r24	; 26
	DDRB=DDRB|(3<<0);
  9a:	87 b3       	in	r24, 0x17	; 23
  9c:	83 60       	ori	r24, 0x03	; 3
  9e:	87 bb       	out	0x17, r24	; 23
	char a[]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x6F,0x7F};
  a0:	8a e0       	ldi	r24, 0x0A	; 10
  a2:	e0 e6       	ldi	r30, 0x60	; 96
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	de 01       	movw	r26, r28
  a8:	11 96       	adiw	r26, 0x01	; 1
  aa:	01 90       	ld	r0, Z+
  ac:	0d 92       	st	X+, r0
  ae:	8a 95       	dec	r24
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x28>
  b2:	be 01       	movw	r22, r28
  b4:	65 5f       	subi	r22, 0xF5	; 245
  b6:	7f 4f       	sbci	r23, 0xFF	; 255
		{
			for(int j=0;j<10;j++)
			{
				for(int k=0;k<100;k++)
				{
					PORTB=0b11111110;
  b8:	4e ef       	ldi	r20, 0xFE	; 254
					PORTA=a[i];
					_delay_ms(10);
					
					PORTB=0b11111101;
  ba:	3d ef       	ldi	r19, 0xFD	; 253
#define F_CPU 1000000UL
#include<avr/io.h>
#include<util/delay.h>

void main()
{
  bc:	8e 01       	movw	r16, r28
  be:	0f 5f       	subi	r16, 0xFF	; 255
  c0:	1f 4f       	sbci	r17, 0xFF	; 255
  c2:	21 c0       	rjmp	.+66     	; 0x106 <main+0x84>
		{
			for(int j=0;j<10;j++)
			{
				for(int k=0;k<100;k++)
				{
					PORTB=0b11111110;
  c4:	48 bb       	out	0x18, r20	; 24
					PORTA=a[i];
  c6:	d8 01       	movw	r26, r16
  c8:	2c 91       	ld	r18, X
  ca:	2b bb       	out	0x1b, r18	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	a3 ec       	ldi	r26, 0xC3	; 195
  ce:	b9 e0       	ldi	r27, 0x09	; 9
  d0:	11 97       	sbiw	r26, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x4e>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x54>
  d6:	00 00       	nop
					_delay_ms(10);
					
					PORTB=0b11111101;
  d8:	38 bb       	out	0x18, r19	; 24
					PORTA=a[j];
  da:	20 81       	ld	r18, Z
  dc:	2b bb       	out	0x1b, r18	; 27
  de:	a3 ec       	ldi	r26, 0xC3	; 195
  e0:	b9 e0       	ldi	r27, 0x09	; 9
  e2:	11 97       	sbiw	r26, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <main+0x60>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x66>
  e8:	00 00       	nop
  ea:	01 97       	sbiw	r24, 0x01	; 1
	{
		for(int i=0;i<10;i++)
		{
			for(int j=0;j<10;j++)
			{
				for(int k=0;k<100;k++)
  ec:	59 f7       	brne	.-42     	; 0xc4 <main+0x42>
  ee:	31 96       	adiw	r30, 0x01	; 1
	char a[]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x6F,0x7F};
	while(1)
	{
		for(int i=0;i<10;i++)
		{
			for(int j=0;j<10;j++)
  f0:	6e 17       	cp	r22, r30
  f2:	7f 07       	cpc	r23, r31
  f4:	19 f0       	breq	.+6      	; 0xfc <main+0x7a>
#define F_CPU 1000000UL
#include<avr/io.h>
#include<util/delay.h>

void main()
{
  f6:	84 e6       	ldi	r24, 0x64	; 100
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	e4 cf       	rjmp	.-56     	; 0xc4 <main+0x42>
  fc:	0f 5f       	subi	r16, 0xFF	; 255
  fe:	1f 4f       	sbci	r17, 0xFF	; 255
	DDRA=0xFF;
	DDRB=DDRB|(3<<0);
	char a[]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x6F,0x7F};
	while(1)
	{
		for(int i=0;i<10;i++)
 100:	60 17       	cp	r22, r16
 102:	71 07       	cpc	r23, r17
 104:	d9 f2       	breq	.-74     	; 0xbc <main+0x3a>
#define F_CPU 1000000UL
#include<avr/io.h>
#include<util/delay.h>

void main()
{
 106:	fe 01       	movw	r30, r28
 108:	31 96       	adiw	r30, 0x01	; 1
 10a:	f5 cf       	rjmp	.-22     	; 0xf6 <main+0x74>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
