
Four_messages_Uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000110  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  00000110  00000184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000703  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000629  00000000  00000000  0000095b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c8  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000124c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000357  00000000  00000000  00001290  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000095  00000000  00000000  000015e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000167c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 39       	cpi	r26, 0x98	; 152
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 5d 00 	call	0xba	; 0xba <main>
  7a:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <tx_string>:
}

}
	}
void tx_string(char *x)//2000
{
  82:	fc 01       	movw	r30, r24
	while(*x != '\0')
  84:	90 81       	ld	r25, Z
  86:	99 23       	and	r25, r25
  88:	81 f0       	breq	.+32     	; 0xaa <tx_string+0x28>
  8a:	31 96       	adiw	r30, 0x01	; 1
	{
		UDR=*x++;
  8c:	9c b9       	out	0x0c, r25	; 12
		while( (UCSRA&(1<<5))==0);//wait here till UDRE is 0
  8e:	5d 9b       	sbis	0x0b, 5	; 11
  90:	fe cf       	rjmp	.-4      	; 0x8e <tx_string+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	2f ef       	ldi	r18, 0xFF	; 255
  94:	80 e7       	ldi	r24, 0x70	; 112
  96:	92 e0       	ldi	r25, 0x02	; 2
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	80 40       	sbci	r24, 0x00	; 0
  9c:	90 40       	sbci	r25, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <tx_string+0x16>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <tx_string+0x20>
  a2:	00 00       	nop

}
	}
void tx_string(char *x)//2000
{
	while(*x != '\0')
  a4:	91 91       	ld	r25, Z+
  a6:	91 11       	cpse	r25, r1
  a8:	f1 cf       	rjmp	.-30     	; 0x8c <tx_string+0xa>
  aa:	08 95       	ret

000000ac <uart_init>:
	}

}
void uart_init()
{
	UBRRL=0x33;//Fosc=8Mhz,BR=9600
  ac:	83 e3       	ldi	r24, 0x33	; 51
  ae:	89 b9       	out	0x09, r24	; 9
	UCSRB=UCSRB|(1<<TXEN);
  b0:	53 9a       	sbi	0x0a, 3	; 10
	UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
  b2:	80 b5       	in	r24, 0x20	; 32
  b4:	86 68       	ori	r24, 0x86	; 134
  b6:	80 bd       	out	0x20, r24	; 32
  b8:	08 95       	ret

000000ba <main>:
#include<util/delay.h>
void uart_init(void);
void tx_string(char *);
int main()
{
	DDRB=DDRB&~(0x0F);
  ba:	87 b3       	in	r24, 0x17	; 23
  bc:	80 7f       	andi	r24, 0xF0	; 240
  be:	87 bb       	out	0x17, r24	; 23
	uart_init();
  c0:	0e 94 56 00 	call	0xac	; 0xac <uart_init>
	int x=PINB;
  c4:	06 b3       	in	r16, 0x16	; 22
		case 4:  tx_string("Text number 4");
		          break;
	}*/
while(1)
{
if(x&(1<<0))
  c6:	c0 2f       	mov	r28, r16
  c8:	c1 70       	andi	r28, 0x01	; 1
   	//while(x&(1<<0))
	   {
	   tx_string("Text String 1");
	   }
}
else if(x&(1<<1))
  ca:	d0 2f       	mov	r29, r16
  cc:	d2 70       	andi	r29, 0x02	; 2
{
	tx_string("Text String 2");
}
else if(x&(1<<2))
  ce:	10 2f       	mov	r17, r16
  d0:	14 70       	andi	r17, 0x04	; 4
{
	tx_string("Text String 3");
}
else if(x&(1<<3))
  d2:	08 70       	andi	r16, 0x08	; 8
		case 4:  tx_string("Text number 4");
		          break;
	}*/
while(1)
{
if(x&(1<<0))
  d4:	cc 23       	and	r28, r28
  d6:	29 f0       	breq	.+10     	; 0xe2 <main+0x28>
{
   	//while(x&(1<<0))
	   {
	   tx_string("Text String 1");
  d8:	80 e6       	ldi	r24, 0x60	; 96
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 41 00 	call	0x82	; 0x82 <tx_string>
  e0:	f9 cf       	rjmp	.-14     	; 0xd4 <main+0x1a>
	   }
}
else if(x&(1<<1))
  e2:	dd 23       	and	r29, r29
  e4:	29 f0       	breq	.+10     	; 0xf0 <main+0x36>
{
	tx_string("Text String 2");
  e6:	8e e6       	ldi	r24, 0x6E	; 110
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 41 00 	call	0x82	; 0x82 <tx_string>
  ee:	f2 cf       	rjmp	.-28     	; 0xd4 <main+0x1a>
}
else if(x&(1<<2))
  f0:	11 23       	and	r17, r17
  f2:	29 f0       	breq	.+10     	; 0xfe <main+0x44>
{
	tx_string("Text String 3");
  f4:	8c e7       	ldi	r24, 0x7C	; 124
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 41 00 	call	0x82	; 0x82 <tx_string>
  fc:	eb cf       	rjmp	.-42     	; 0xd4 <main+0x1a>
}
else if(x&(1<<3))
  fe:	00 23       	and	r16, r16
 100:	49 f3       	breq	.-46     	; 0xd4 <main+0x1a>
{
	tx_string("Text String 4");
 102:	8a e8       	ldi	r24, 0x8A	; 138
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 41 00 	call	0x82	; 0x82 <tx_string>
 10a:	e4 cf       	rjmp	.-56     	; 0xd4 <main+0x1a>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
