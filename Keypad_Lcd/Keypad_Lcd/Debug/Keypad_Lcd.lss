
Keypad_Lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000112  00800060  000002a8  0000031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000042e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000460  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b19  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000638  00000000  00000000  0000100d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004c1  00000000  00000000  00001645  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00001b08  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037b  00000000  00000000  00001bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000021e  00000000  00000000  00001f33  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002151  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ea       	ldi	r30, 0xA8	; 168
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 49 01 	call	0x292	; 0x292 <main>
  7a:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_cmd_enable>:
	   lcd_cmd_enable();
     }
  
  void lcd_cmd_enable()
  {
	   PORTC=PORTC&~(1<<0);   //RS=0
  82:	a8 98       	cbi	0x15, 0	; 21
	   PORTC=PORTC&~(1<<1);   //RW=0
  84:	a9 98       	cbi	0x15, 1	; 21
	   PORTC=PORTC|(1<<2);    //EN=1
  86:	aa 9a       	sbi	0x15, 2	; 21
	   PORTC=PORTC&~(1<<2);   //EN=0
  88:	aa 98       	cbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	8f ec       	ldi	r24, 0xCF	; 207
  8c:	97 e0       	ldi	r25, 0x07	; 7
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <lcd_cmd_enable+0xc>
  92:	00 c0       	rjmp	.+0      	; 0x94 <lcd_cmd_enable+0x12>
  94:	00 00       	nop
  96:	08 95       	ret

00000098 <lcd_cmd>:
		lcd_display("Key + is pressed");
	}
}

   void lcd_cmd(char x)
   {
  98:	cf 93       	push	r28
  9a:	c8 2f       	mov	r28, r24
	   PORTC=x&(0xF0);
  9c:	80 7f       	andi	r24, 0xF0	; 240
  9e:	85 bb       	out	0x15, r24	; 21
	   lcd_cmd_enable();
  a0:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd_enable>
	   PORTC=(x<<4)&(0xF0);
  a4:	20 e1       	ldi	r18, 0x10	; 16
  a6:	c2 9f       	mul	r28, r18
  a8:	c0 01       	movw	r24, r0
  aa:	11 24       	eor	r1, r1
  ac:	85 bb       	out	0x15, r24	; 21
	   lcd_cmd_enable();
  ae:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd_enable>
     }
  b2:	cf 91       	pop	r28
  b4:	08 95       	ret

000000b6 <init>:
	   _delay_ms(1);
    }
 
 void init()
 {
	 DDRC=0xFF;
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	84 bb       	out	0x14, r24	; 20
	 lcd_cmd(0x02);
  ba:	82 e0       	ldi	r24, 0x02	; 2
  bc:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_cmd>
	 lcd_cmd(0x28);
  c0:	88 e2       	ldi	r24, 0x28	; 40
  c2:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_cmd>
	 lcd_cmd(0x0E);
  c6:	8e e0       	ldi	r24, 0x0E	; 14
  c8:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_cmd>
	 //lcd_cmd(0x01);
	 //lcd_cmd(0x06);
	 lcd_cmd(0x80);
  cc:	80 e8       	ldi	r24, 0x80	; 128
  ce:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_cmd>
  d2:	08 95       	ret

000000d4 <lcd_data_enable>:
	  lcd_data_enable();
  }
  
  void lcd_data_enable()
  { 
	  PORTC=PORTC|(1<<0);    //RS=1
  d4:	a8 9a       	sbi	0x15, 0	; 21
	  PORTC=PORTC&~(1<<1);   //RW=0
  d6:	a9 98       	cbi	0x15, 1	; 21
	  PORTC=PORTC|(1<<2);    //EN=1
  d8:	aa 9a       	sbi	0x15, 2	; 21
	  PORTC=PORTC&~(1<<2);   //EN=0
  da:	aa 98       	cbi	0x15, 2	; 21
  dc:	8f ec       	ldi	r24, 0xCF	; 207
  de:	97 e0       	ldi	r25, 0x07	; 7
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <lcd_data_enable+0xc>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <lcd_data_enable+0x12>
  e6:	00 00       	nop
  e8:	08 95       	ret

000000ea <lcd_data>:
	 //lcd_cmd(0x06);
	 lcd_cmd(0x80);
   }
  
  void lcd_data(char x)
  {
  ea:	cf 93       	push	r28
  ec:	c8 2f       	mov	r28, r24
	  PORTC=x&(0xF0);
  ee:	80 7f       	andi	r24, 0xF0	; 240
  f0:	85 bb       	out	0x15, r24	; 21
	  lcd_data_enable();
  f2:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_data_enable>
	  PORTC=(x<<4)&(0xF0);
  f6:	20 e1       	ldi	r18, 0x10	; 16
  f8:	c2 9f       	mul	r28, r18
  fa:	c0 01       	movw	r24, r0
  fc:	11 24       	eor	r1, r1
  fe:	85 bb       	out	0x15, r24	; 21
	  lcd_data_enable();
 100:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_data_enable>
  }
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <lcd_display>:
	  PORTC=PORTC&~(1<<2);   //EN=0
	  _delay_ms(1);
    }
	
void lcd_display(char a[])
{
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	ec 01       	movw	r28, r24
	for(int i=0;a[i]!='\0';i++)
 10e:	88 81       	ld	r24, Y
 110:	88 23       	and	r24, r24
 112:	79 f0       	breq	.+30     	; 0x132 <lcd_display+0x2a>
 114:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_data(a[i]);
 116:	0e 94 75 00 	call	0xea	; 0xea <lcd_data>
 11a:	2f e7       	ldi	r18, 0x7F	; 127
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	21 50       	subi	r18, 0x01	; 1
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <lcd_display+0x18>
 128:	00 c0       	rjmp	.+0      	; 0x12a <lcd_display+0x22>
 12a:	00 00       	nop
	  _delay_ms(1);
    }
	
void lcd_display(char a[])
{
	for(int i=0;a[i]!='\0';i++)
 12c:	89 91       	ld	r24, Y+
 12e:	81 11       	cpse	r24, r1
 130:	f2 cf       	rjmp	.-28     	; 0x116 <lcd_display+0xe>
	{
		lcd_data(a[i]);
		//_delay_ms(300);
		_delay_ms(50);
	}
  }
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <keypad>:
void lcd_data_enable();
void lcd_display(char []);

void keypad()
{
	PORTA=PORTA&~(1<<col0);
 138:	dc 98       	cbi	0x1b, 4	; 27
    PORTA=PORTA|(1<<col1)|(1<<col2)|(1<<col3);
 13a:	8b b3       	in	r24, 0x1b	; 27
 13c:	80 6e       	ori	r24, 0xE0	; 224
 13e:	8b bb       	out	0x1b, r24	; 27
	if( (PINA&(1<<row0))==0 )
 140:	c8 99       	sbic	0x19, 0	; 25
 142:	08 c0       	rjmp	.+16     	; 0x154 <keypad+0x1c>
	{
		lcd_cmd(0x01);
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_cmd>
		lcd_display("Key 7 is pressed");
 14a:	80 e6       	ldi	r24, 0x60	; 96
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 84 00 	call	0x108	; 0x108 <lcd_display>
 152:	1d c0       	rjmp	.+58     	; 0x18e <keypad+0x56>
	 }
	
	else if( (PINA&(1<<row1))==0 )
 154:	c9 99       	sbic	0x19, 1	; 25
 156:	08 c0       	rjmp	.+16     	; 0x168 <keypad+0x30>
	 {
		lcd_cmd(0x01);
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_cmd>
		lcd_display("Key 4 is pressed");
 15e:	81 e7       	ldi	r24, 0x71	; 113
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 84 00 	call	0x108	; 0x108 <lcd_display>
 166:	13 c0       	rjmp	.+38     	; 0x18e <keypad+0x56>
	  }
    
	else if( (PINA&(1<<row2))==0 )
 168:	ca 99       	sbic	0x19, 2	; 25
 16a:	08 c0       	rjmp	.+16     	; 0x17c <keypad+0x44>
   {
	 lcd_cmd(0x01);
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_cmd>
	 lcd_display("Key 1 is pressed");
 172:	82 e8       	ldi	r24, 0x82	; 130
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 84 00 	call	0x108	; 0x108 <lcd_display>
 17a:	09 c0       	rjmp	.+18     	; 0x18e <keypad+0x56>
    }
   
   else if( (PINA&(1<<row3))==0 )
 17c:	cb 99       	sbic	0x19, 3	; 25
 17e:	07 c0       	rjmp	.+14     	; 0x18e <keypad+0x56>
    {
	  lcd_cmd(0x01);
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_cmd>
	  lcd_display("Key ON is pressed");
 186:	83 e9       	ldi	r24, 0x93	; 147
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 84 00 	call	0x108	; 0x108 <lcd_display>
     }

 PORTA=PORTA&~(1<<col1);
 18e:	dd 98       	cbi	0x1b, 5	; 27
 PORTA=PORTA|(1<<col0)|(1<<col2)|(1<<col3);
 190:	8b b3       	in	r24, 0x1b	; 27
 192:	80 6d       	ori	r24, 0xD0	; 208
 194:	8b bb       	out	0x1b, r24	; 27
 
 if( (PINA&(1<<row0))==0 )
 196:	c8 99       	sbic	0x19, 0	; 25
 198:	08 c0       	rjmp	.+16     	; 0x1aa <keypad+0x72>
 {
	lcd_cmd(0x01);
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_cmd>
	lcd_display("Key 8 is pressed");
 1a0:	85 ea       	ldi	r24, 0xA5	; 165
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 84 00 	call	0x108	; 0x108 <lcd_display>
 1a8:	1d c0       	rjmp	.+58     	; 0x1e4 <keypad+0xac>
  }
 
 else if( (PINA&(1<<row1))==0 )
 1aa:	c9 99       	sbic	0x19, 1	; 25
 1ac:	08 c0       	rjmp	.+16     	; 0x1be <keypad+0x86>
 {
	lcd_cmd(0x01);
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_cmd>
	lcd_display("Key 5 is pressed");
 1b4:	86 eb       	ldi	r24, 0xB6	; 182
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 84 00 	call	0x108	; 0x108 <lcd_display>
 1bc:	13 c0       	rjmp	.+38     	; 0x1e4 <keypad+0xac>
 }
 
 else if( (PINA&(1<<row2))==0 )
 1be:	ca 99       	sbic	0x19, 2	; 25
 1c0:	08 c0       	rjmp	.+16     	; 0x1d2 <keypad+0x9a>
 {
	lcd_cmd(0x01);
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_cmd>
	lcd_display("Key 2 is pressed");
 1c8:	87 ec       	ldi	r24, 0xC7	; 199
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 84 00 	call	0x108	; 0x108 <lcd_display>
 1d0:	09 c0       	rjmp	.+18     	; 0x1e4 <keypad+0xac>
 }
 
 else if( (PINA&(1<<row3))==0 )
 1d2:	cb 99       	sbic	0x19, 3	; 25
 1d4:	07 c0       	rjmp	.+14     	; 0x1e4 <keypad+0xac>
 {
	lcd_cmd(0x01);
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_cmd>
	lcd_display("Key 0 is pressed");
 1dc:	88 ed       	ldi	r24, 0xD8	; 216
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 84 00 	call	0x108	; 0x108 <lcd_display>
 }
 
    PORTA=PORTA&~(1<<col2);
 1e4:	de 98       	cbi	0x1b, 6	; 27
    PORTA=PORTA|(1<<col0)|(1<<col1)|(1<<col3);
 1e6:	8b b3       	in	r24, 0x1b	; 27
 1e8:	80 6b       	ori	r24, 0xB0	; 176
 1ea:	8b bb       	out	0x1b, r24	; 27
    
	if( (PINA&(1<<row0))==0 )
 1ec:	c8 99       	sbic	0x19, 0	; 25
 1ee:	08 c0       	rjmp	.+16     	; 0x200 <keypad+0xc8>
    {
	    lcd_cmd(0x01);
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_cmd>
	    lcd_display("Key 9 is pressed");
 1f6:	89 ee       	ldi	r24, 0xE9	; 233
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 84 00 	call	0x108	; 0x108 <lcd_display>
 1fe:	1d c0       	rjmp	.+58     	; 0x23a <keypad+0x102>
    }
    
	else if( (PINA&(1<<row1))==0 )
 200:	c9 99       	sbic	0x19, 1	; 25
 202:	08 c0       	rjmp	.+16     	; 0x214 <keypad+0xdc>
    {
	    lcd_cmd(0x01);
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_cmd>
	    lcd_display("Key 6 is pressed");
 20a:	8a ef       	ldi	r24, 0xFA	; 250
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 84 00 	call	0x108	; 0x108 <lcd_display>
 212:	13 c0       	rjmp	.+38     	; 0x23a <keypad+0x102>
    }
    
	else if( (PINA&(1<<row2))==0 )
 214:	ca 99       	sbic	0x19, 2	; 25
 216:	08 c0       	rjmp	.+16     	; 0x228 <keypad+0xf0>
    {
	    lcd_cmd(0x01);
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_cmd>
	    lcd_display("Key 3 is pressed");
 21e:	8b e0       	ldi	r24, 0x0B	; 11
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	0e 94 84 00 	call	0x108	; 0x108 <lcd_display>
 226:	09 c0       	rjmp	.+18     	; 0x23a <keypad+0x102>
    }
    
	else if( (PINA&(1<<row3))==0 )
 228:	cb 99       	sbic	0x19, 3	; 25
 22a:	07 c0       	rjmp	.+14     	; 0x23a <keypad+0x102>
    {
	    lcd_cmd(0x01);
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_cmd>
	    lcd_display("Key = is pressed");
 232:	8c e1       	ldi	r24, 0x1C	; 28
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	0e 94 84 00 	call	0x108	; 0x108 <lcd_display>
    }
	
	PORTA=PORTA&~(1<<col3);
 23a:	df 98       	cbi	0x1b, 7	; 27
	PORTA=PORTA|(1<<col0)|(1<<col1)|(1<<col2);
 23c:	8b b3       	in	r24, 0x1b	; 27
 23e:	80 67       	ori	r24, 0x70	; 112
 240:	8b bb       	out	0x1b, r24	; 27
	
	if( (PINA&(1<<row0))==0 )
 242:	c8 99       	sbic	0x19, 0	; 25
 244:	08 c0       	rjmp	.+16     	; 0x256 <keypad+0x11e>
	{
		lcd_cmd(0x01);
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_cmd>
		lcd_display("Key / is pressed");
 24c:	8d e2       	ldi	r24, 0x2D	; 45
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	0e 94 84 00 	call	0x108	; 0x108 <lcd_display>
 254:	08 95       	ret
	}
	
	else if( (PINA&(1<<row1))==0 )
 256:	c9 99       	sbic	0x19, 1	; 25
 258:	08 c0       	rjmp	.+16     	; 0x26a <keypad+0x132>
	{
		lcd_cmd(0x01);
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_cmd>
		lcd_display("Key * is pressed");
 260:	8e e3       	ldi	r24, 0x3E	; 62
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	0e 94 84 00 	call	0x108	; 0x108 <lcd_display>
 268:	08 95       	ret
	}
	
	else if( (PINA&(1<<row2))==0 )
 26a:	ca 99       	sbic	0x19, 2	; 25
 26c:	08 c0       	rjmp	.+16     	; 0x27e <keypad+0x146>
	{
		lcd_cmd(0x01);
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_cmd>
		lcd_display("Key - is pressed");
 274:	8f e4       	ldi	r24, 0x4F	; 79
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	0e 94 84 00 	call	0x108	; 0x108 <lcd_display>
 27c:	08 95       	ret
	}
	
	else if( (PINA&(1<<row3))==0 )
 27e:	cb 99       	sbic	0x19, 3	; 25
 280:	07 c0       	rjmp	.+14     	; 0x290 <keypad+0x158>
	{
		lcd_cmd(0x01);
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_cmd>
		lcd_display("Key + is pressed");
 288:	80 e6       	ldi	r24, 0x60	; 96
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	0e 94 84 00 	call	0x108	; 0x108 <lcd_display>
 290:	08 95       	ret

00000292 <main>:
	}
  }
	
 void main()
 {
	 PORTA=0x0F;      //just pull up activation
 292:	8f e0       	ldi	r24, 0x0F	; 15
 294:	8b bb       	out	0x1b, r24	; 27
	 DDRA=0xF0;
 296:	80 ef       	ldi	r24, 0xF0	; 240
 298:	8a bb       	out	0x1a, r24	; 26
	 init();
 29a:	0e 94 5b 00 	call	0xb6	; 0xb6 <init>
	 while(1)
	 {
		keypad();
 29e:	0e 94 9c 00 	call	0x138	; 0x138 <keypad>
 2a2:	fd cf       	rjmp	.-6      	; 0x29e <main+0xc>

000002a4 <_exit>:
 2a4:	f8 94       	cli

000002a6 <__stop_program>:
 2a6:	ff cf       	rjmp	.-2      	; 0x2a6 <__stop_program>
