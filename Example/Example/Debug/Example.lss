
Example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000150  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000150  000001c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007dc  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000665  00000000  00000000  00000a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030e  00000000  00000000  000010c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  000013d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000354  00000000  00000000  00001450  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000187  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000192b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e5       	ldi	r30, 0x50	; 80
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 a1 00 	call	0x142	; 0x142 <main>
  7a:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_cmd>:
#define F_CPU 1000000UL
#include <avr/io.h>
#include <util/delay.h>
void lcd_cmd(char x)
{
	PORTA=x;
  82:	8b bb       	out	0x1b, r24	; 27
	PORTB=PORTB&~(1<<0);  //RS=0
  84:	c0 98       	cbi	0x18, 0	; 24
	PORTB=PORTB&~(1<<1);  //RW=0
  86:	c1 98       	cbi	0x18, 1	; 24
	PORTB=PORTB|(1<<2);   //EN=1
  88:	c2 9a       	sbi	0x18, 2	; 24
	PORTB=PORTB&~(1<<2);  //EN=0
  8a:	c2 98       	cbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	89 ef       	ldi	r24, 0xF9	; 249
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	01 97       	sbiw	r24, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <lcd_cmd+0xe>
  94:	00 c0       	rjmp	.+0      	; 0x96 <lcd_cmd+0x14>
  96:	00 00       	nop
  98:	08 95       	ret

0000009a <init>:
	_delay_ms(1);
}
void init()
{
	DDRA=0xFF;
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	8a bb       	out	0x1a, r24	; 26
	DDRB=DDRB|7;
  9e:	87 b3       	in	r24, 0x17	; 23
  a0:	87 60       	ori	r24, 0x07	; 7
  a2:	87 bb       	out	0x17, r24	; 23
	lcd_cmd(0x38);
  a4:	88 e3       	ldi	r24, 0x38	; 56
  a6:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_cmd(0x06);
  aa:	86 e0       	ldi	r24, 0x06	; 6
  ac:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_cmd(0x0E);
  b0:	8e e0       	ldi	r24, 0x0E	; 14
  b2:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_cmd(0x01);
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_cmd(0x80);
  bc:	80 e8       	ldi	r24, 0x80	; 128
  be:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
  c2:	08 95       	ret

000000c4 <lcd_data>:
	
}
void lcd_data(char x)
{
	PORTA=x;
  c4:	8b bb       	out	0x1b, r24	; 27
	PORTB=PORTB|(1<<0);     //RS=1
  c6:	c0 9a       	sbi	0x18, 0	; 24
	PORTB=PORTB&~(1<<1);    //RW=0
  c8:	c1 98       	cbi	0x18, 1	; 24
	PORTB=PORTB|(1<<2);     //EN=1
  ca:	c2 9a       	sbi	0x18, 2	; 24
	PORTB=PORTB&~(1<<2);    //EN=0
  cc:	c2 98       	cbi	0x18, 2	; 24
  ce:	89 ef       	ldi	r24, 0xF9	; 249
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <lcd_data+0xe>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <lcd_data+0x14>
  d8:	00 00       	nop
  da:	08 95       	ret

000000dc <display>:
	_delay_ms(1);
	
}
void display()
{
  dc:	0f 93       	push	r16
  de:	1f 93       	push	r17
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
  e8:	2e 97       	sbiw	r28, 0x0e	; 14
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	f8 94       	cli
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	cd bf       	out	0x3d, r28	; 61
	char a[]="Hello Fraands";
  f4:	8e e0       	ldi	r24, 0x0E	; 14
  f6:	e0 e6       	ldi	r30, 0x60	; 96
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	de 01       	movw	r26, r28
  fc:	11 96       	adiw	r26, 0x01	; 1
  fe:	01 90       	ld	r0, Z+
 100:	0d 92       	st	X+, r0
 102:	8a 95       	dec	r24
 104:	e1 f7       	brne	.-8      	; 0xfe <display+0x22>
	for(int i=0;a[i]!='\0';i++)
 106:	89 81       	ldd	r24, Y+1	; 0x01
 108:	88 23       	and	r24, r24
 10a:	81 f0       	breq	.+32     	; 0x12c <display+0x50>
 10c:	8e 01       	movw	r16, r28
 10e:	0e 5f       	subi	r16, 0xFE	; 254
 110:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		lcd_data(a[i]);
 112:	0e 94 62 00 	call	0xc4	; 0xc4 <lcd_data>
 116:	87 ea       	ldi	r24, 0xA7	; 167
 118:	91 e6       	ldi	r25, 0x61	; 97
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <display+0x3e>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <display+0x44>
 120:	00 00       	nop
	
}
void display()
{
	char a[]="Hello Fraands";
	for(int i=0;a[i]!='\0';i++)
 122:	f8 01       	movw	r30, r16
 124:	81 91       	ld	r24, Z+
 126:	8f 01       	movw	r16, r30
 128:	81 11       	cpse	r24, r1
 12a:	f3 cf       	rjmp	.-26     	; 0x112 <display+0x36>
	{
		lcd_data(a[i]);
		_delay_ms(100);
	}
}
 12c:	2e 96       	adiw	r28, 0x0e	; 14
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	f8 94       	cli
 132:	de bf       	out	0x3e, r29	; 62
 134:	0f be       	out	0x3f, r0	; 63
 136:	cd bf       	out	0x3d, r28	; 61
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	1f 91       	pop	r17
 13e:	0f 91       	pop	r16
 140:	08 95       	ret

00000142 <main>:
void main()
{
	init();
 142:	0e 94 4d 00 	call	0x9a	; 0x9a <init>
	display();
 146:	0e 94 6e 00 	call	0xdc	; 0xdc <display>
 14a:	08 95       	ret

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
