
lcd_zaid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000017c  000001f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008e9  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000064c  00000000  00000000  00000bad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000038c  00000000  00000000  000011f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00001588  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000395  00000000  00000000  00001638  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000260  00000000  00000000  000019cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001c2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e7       	ldi	r30, 0x7C	; 124
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 b4 00 	call	0x168	; 0x168 <main>
  7a:	0c 94 bc 00 	jmp	0x178	; 0x178 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_data_enable_to_write>:
	PORTA=((x<<4)&0xf0); //lower 4 bit
	lcd_data_enable_to_write();
}
void lcd_data_enable_to_write()
{
	PORTA=PORTA |(1<<0);//RS=0;
  82:	d8 9a       	sbi	0x1b, 0	; 27
	PORTA=PORTA&~(1<<1);//RW=0;
  84:	d9 98       	cbi	0x1b, 1	; 27
	PORTA=PORTA |(1<<2);//EN=1;
  86:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	8f ec       	ldi	r24, 0xCF	; 207
  8a:	97 e0       	ldi	r25, 0x07	; 7
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <lcd_data_enable_to_write+0xa>
  90:	00 c0       	rjmp	.+0      	; 0x92 <lcd_data_enable_to_write+0x10>
  92:	00 00       	nop
	_delay_ms(1);
	PORTA=PORTA&~(1<<2);//EN=0;
  94:	da 98       	cbi	0x1b, 2	; 27
  96:	8f ec       	ldi	r24, 0xCF	; 207
  98:	97 e0       	ldi	r25, 0x07	; 7
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <lcd_data_enable_to_write+0x18>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <lcd_data_enable_to_write+0x1e>
  a0:	00 00       	nop
  a2:	08 95       	ret

000000a4 <lcd_data>:
	lcd_command_enable_to_write();
	PORTA=((x<<4)&0xf0); //lower 4 bit
	lcd_command_enable_to_write();
}
void lcd_data(char x)
{
  a4:	cf 93       	push	r28
  a6:	c8 2f       	mov	r28, r24
	PORTA=(x&0xf0);  //upper 4 bit
  a8:	80 7f       	andi	r24, 0xF0	; 240
  aa:	8b bb       	out	0x1b, r24	; 27
	lcd_data_enable_to_write();
  ac:	0e 94 41 00 	call	0x82	; 0x82 <lcd_data_enable_to_write>
	PORTA=((x<<4)&0xf0); //lower 4 bit
  b0:	20 e1       	ldi	r18, 0x10	; 16
  b2:	c2 9f       	mul	r28, r18
  b4:	c0 01       	movw	r24, r0
  b6:	11 24       	eor	r1, r1
  b8:	8b bb       	out	0x1b, r24	; 27
	lcd_data_enable_to_write();
  ba:	0e 94 41 00 	call	0x82	; 0x82 <lcd_data_enable_to_write>
}
  be:	cf 91       	pop	r28
  c0:	08 95       	ret

000000c2 <lcd_string>:
	lcd_string("Gabbar "); //a=2000
	lcd_command(0xc0);
	lcd_string("Singh"); //a=2000
}
void lcd_string(const char *x)//x=2000
{
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	ec 01       	movw	r28, r24
	
	while(*x !=  '\0')
  c8:	88 81       	ld	r24, Y
  ca:	88 23       	and	r24, r24
  cc:	79 f0       	breq	.+30     	; 0xec <lcd_string+0x2a>
  ce:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_data(*x++);
  d0:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_data>
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	82 e5       	ldi	r24, 0x52	; 82
  d8:	97 e0       	ldi	r25, 0x07	; 7
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <lcd_string+0x18>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <lcd_string+0x22>
  e4:	00 00       	nop
	lcd_string("Singh"); //a=2000
}
void lcd_string(const char *x)//x=2000
{
	
	while(*x !=  '\0')
  e6:	89 91       	ld	r24, Y+
  e8:	81 11       	cpse	r24, r1
  ea:	f2 cf       	rjmp	.-28     	; 0xd0 <lcd_string+0xe>
		lcd_data(*x++);
		_delay_ms(300);
		//x++; //2001//2002
	}

}
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	08 95       	ret

000000f2 <lcd_command_enable_to_write>:
	_delay_ms(1);
}

void lcd_command_enable_to_write()
{
	PORTA=PORTA&~(1<<0);//RS=0;
  f2:	d8 98       	cbi	0x1b, 0	; 27
	PORTA=PORTA&~(1<<1);//RW=0;
  f4:	d9 98       	cbi	0x1b, 1	; 27
	PORTA=PORTA |(1<<2);//EN=1;
  f6:	da 9a       	sbi	0x1b, 2	; 27
  f8:	8f ec       	ldi	r24, 0xCF	; 207
  fa:	97 e0       	ldi	r25, 0x07	; 7
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <lcd_command_enable_to_write+0xa>
 100:	00 c0       	rjmp	.+0      	; 0x102 <lcd_command_enable_to_write+0x10>
 102:	00 00       	nop
	_delay_ms(1);
	PORTA=PORTA&~(1<<2);//EN=0;
 104:	da 98       	cbi	0x1b, 2	; 27
 106:	8f ec       	ldi	r24, 0xCF	; 207
 108:	97 e0       	ldi	r25, 0x07	; 7
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <lcd_command_enable_to_write+0x18>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <lcd_command_enable_to_write+0x1e>
 110:	00 00       	nop
 112:	08 95       	ret

00000114 <lcd_command>:
	lcd_command(0x28);
	lcd_command(0x0E);

}
void lcd_command(char x)
{
 114:	cf 93       	push	r28
 116:	c8 2f       	mov	r28, r24
	PORTA=(x&0xf0);  //upper 4 bit
 118:	80 7f       	andi	r24, 0xF0	; 240
 11a:	8b bb       	out	0x1b, r24	; 27
	lcd_command_enable_to_write();
 11c:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_command_enable_to_write>
	PORTA=((x<<4)&0xf0); //lower 4 bit
 120:	20 e1       	ldi	r18, 0x10	; 16
 122:	c2 9f       	mul	r28, r18
 124:	c0 01       	movw	r24, r0
 126:	11 24       	eor	r1, r1
 128:	8b bb       	out	0x1b, r24	; 27
	lcd_command_enable_to_write();
 12a:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_command_enable_to_write>
}
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <display>:


void display()
{

	lcd_command(0x80);
 132:	80 e8       	ldi	r24, 0x80	; 128
 134:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_command>
	lcd_string("Gabbar "); //a=2000
 138:	80 e6       	ldi	r24, 0x60	; 96
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 61 00 	call	0xc2	; 0xc2 <lcd_string>
	lcd_command(0xc0);
 140:	80 ec       	ldi	r24, 0xC0	; 192
 142:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_command>
	lcd_string("Singh"); //a=2000
 146:	88 e6       	ldi	r24, 0x68	; 104
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 61 00 	call	0xc2	; 0xc2 <lcd_string>
 14e:	08 95       	ret

00000150 <lcd_init>:
	}

}
void lcd_init()
{
	DDRA=0xff;
 150:	8f ef       	ldi	r24, 0xFF	; 255
 152:	8a bb       	out	0x1a, r24	; 26
	lcd_command(0x02);
 154:	82 e0       	ldi	r24, 0x02	; 2
 156:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_command>
	lcd_command(0x28);
 15a:	88 e2       	ldi	r24, 0x28	; 40
 15c:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_command>
	lcd_command(0x0E);
 160:	8e e0       	ldi	r24, 0x0E	; 14
 162:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_command>
 166:	08 95       	ret

00000168 <main>:
void lcd_command_enable_to_write();
void lcd_data(char );
void lcd_string(const char *);
int main()
{
	lcd_init();
 168:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_init>
	while(1)
	{
		
		display();
 16c:	0e 94 99 00 	call	0x132	; 0x132 <display>
		lcd_command(0x01);
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_command>
 176:	fa cf       	rjmp	.-12     	; 0x16c <main+0x4>

00000178 <_exit>:
 178:	f8 94       	cli

0000017a <__stop_program>:
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__stop_program>
