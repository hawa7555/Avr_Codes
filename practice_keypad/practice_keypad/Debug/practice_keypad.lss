
practice_keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000226  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000027a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000027a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a74  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000620  00000000  00000000  00000d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000452  00000000  00000000  000013bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001810  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035a  00000000  00000000  00001874  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000272  00000000  00000000  00001bce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001e40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 08 01 	call	0x210	; 0x210 <main>
  64:	0c 94 11 01 	jmp	0x222	; 0x222 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <lcd_cmd>:
#include <avr/io.h>
#include <util/delay.h>

void lcd_cmd(char x)
{
	PORTD=x&(0xF0);
  6c:	98 2f       	mov	r25, r24
  6e:	90 7f       	andi	r25, 0xF0	; 240
  70:	92 bb       	out	0x12, r25	; 18
	PORTD=PORTD&~(1<<0);   //RS=0
  72:	90 98       	cbi	0x12, 0	; 18
	PORTD=PORTD&~(1<<1);   //RW=0
  74:	91 98       	cbi	0x12, 1	; 18
	PORTD=PORTD|(1<<2);    //EN=1
  76:	92 9a       	sbi	0x12, 2	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  78:	ef ec       	ldi	r30, 0xCF	; 207
  7a:	f7 e0       	ldi	r31, 0x07	; 7
  7c:	31 97       	sbiw	r30, 0x01	; 1
  7e:	f1 f7       	brne	.-4      	; 0x7c <lcd_cmd+0x10>
  80:	00 c0       	rjmp	.+0      	; 0x82 <lcd_cmd+0x16>
  82:	00 00       	nop
	_delay_ms(1);
	PORTD=PORTD&~(1<<2);   //EN=0
  84:	92 98       	cbi	0x12, 2	; 18
  86:	ef ec       	ldi	r30, 0xCF	; 207
  88:	f7 e0       	ldi	r31, 0x07	; 7
  8a:	31 97       	sbiw	r30, 0x01	; 1
  8c:	f1 f7       	brne	.-4      	; 0x8a <lcd_cmd+0x1e>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <lcd_cmd+0x24>
  90:	00 00       	nop
	_delay_ms(1);
	//lcd_cmd(x<<4);
	PORTD=(x<<4)&(0xF0);
  92:	f0 e1       	ldi	r31, 0x10	; 16
  94:	8f 9f       	mul	r24, r31
  96:	c0 01       	movw	r24, r0
  98:	11 24       	eor	r1, r1
  9a:	82 bb       	out	0x12, r24	; 18
	PORTD=PORTD&~(1<<0);   //RS=0
  9c:	90 98       	cbi	0x12, 0	; 18
	PORTD=PORTD&~(1<<1);   //RW=0
  9e:	91 98       	cbi	0x12, 1	; 18
	PORTD=PORTD|(1<<2);    //EN=1
  a0:	92 9a       	sbi	0x12, 2	; 18
  a2:	8f ec       	ldi	r24, 0xCF	; 207
  a4:	97 e0       	ldi	r25, 0x07	; 7
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <lcd_cmd+0x3a>
  aa:	00 c0       	rjmp	.+0      	; 0xac <lcd_cmd+0x40>
  ac:	00 00       	nop
	_delay_ms(1);
	PORTD=PORTD&~(1<<2);   //EN=0
  ae:	92 98       	cbi	0x12, 2	; 18
  b0:	ef ec       	ldi	r30, 0xCF	; 207
  b2:	f7 e0       	ldi	r31, 0x07	; 7
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <lcd_cmd+0x48>
  b8:	00 c0       	rjmp	.+0      	; 0xba <lcd_cmd+0x4e>
  ba:	00 00       	nop
  bc:	08 95       	ret

000000be <init>:
	_delay_ms(1);
}
void init()
{
	DDRD=0xFF;
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	81 bb       	out	0x11, r24	; 17
	lcd_cmd(0x02);
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
	lcd_cmd(0x28);
  c8:	88 e2       	ldi	r24, 0x28	; 40
  ca:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
	lcd_cmd(0x0E);
  ce:	8e e0       	ldi	r24, 0x0E	; 14
  d0:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
	//lcd_cmd(0x01);
	//lcd_cmd(0x06);
	lcd_cmd(0x80);
  d4:	80 e8       	ldi	r24, 0x80	; 128
  d6:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
  da:	08 95       	ret

000000dc <lcd_data>:
}
void lcd_data(char x)
{
	PORTD=x&(0xF0);
  dc:	98 2f       	mov	r25, r24
  de:	90 7f       	andi	r25, 0xF0	; 240
  e0:	92 bb       	out	0x12, r25	; 18
	PORTD=PORTD|(1<<0);    //RS=1
  e2:	90 9a       	sbi	0x12, 0	; 18
	PORTD=PORTD&~(1<<1);   //RW=0
  e4:	91 98       	cbi	0x12, 1	; 18
	PORTD=PORTD|(1<<2);    //EN=1
  e6:	92 9a       	sbi	0x12, 2	; 18
  e8:	ef ec       	ldi	r30, 0xCF	; 207
  ea:	f7 e0       	ldi	r31, 0x07	; 7
  ec:	31 97       	sbiw	r30, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <lcd_data+0x10>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <lcd_data+0x16>
  f2:	00 00       	nop
	_delay_ms(1);
	PORTD=PORTD&~(1<<2);   //EN=0
  f4:	92 98       	cbi	0x12, 2	; 18
  f6:	ef ec       	ldi	r30, 0xCF	; 207
  f8:	f7 e0       	ldi	r31, 0x07	; 7
  fa:	31 97       	sbiw	r30, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <lcd_data+0x1e>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <lcd_data+0x24>
 100:	00 00       	nop
	_delay_ms(1);
	//lcd_data(x<<4);
	PORTD=(x<<4)&(0xF0);
 102:	f0 e1       	ldi	r31, 0x10	; 16
 104:	8f 9f       	mul	r24, r31
 106:	c0 01       	movw	r24, r0
 108:	11 24       	eor	r1, r1
 10a:	82 bb       	out	0x12, r24	; 18
	PORTD=PORTD|(1<<0);    //RS=1
 10c:	90 9a       	sbi	0x12, 0	; 18
	PORTD=PORTD&~(1<<1);   //RW=0
 10e:	91 98       	cbi	0x12, 1	; 18
	PORTD=PORTD|(1<<2);    //EN=1
 110:	92 9a       	sbi	0x12, 2	; 18
 112:	8f ec       	ldi	r24, 0xCF	; 207
 114:	97 e0       	ldi	r25, 0x07	; 7
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <lcd_data+0x3a>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <lcd_data+0x40>
 11c:	00 00       	nop
	_delay_ms(1);
	PORTD=PORTD&~(1<<2);
 11e:	92 98       	cbi	0x12, 2	; 18
 120:	ef ec       	ldi	r30, 0xCF	; 207
 122:	f7 e0       	ldi	r31, 0x07	; 7
 124:	31 97       	sbiw	r30, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <lcd_data+0x48>
 128:	00 c0       	rjmp	.+0      	; 0x12a <lcd_data+0x4e>
 12a:	00 00       	nop
 12c:	08 95       	ret

0000012e <keypad>:
	}
	
}*/
void keypad()
{
	PORTA=(PORTA|(1<<1)|(1<<2)|(1<<3))&~(1<<0);
 12e:	8b b3       	in	r24, 0x1b	; 27
 130:	8e 7f       	andi	r24, 0xFE	; 254
 132:	8e 60       	ori	r24, 0x0E	; 14
 134:	8b bb       	out	0x1b, r24	; 27
	if(!(PINA&(1<<4)))
 136:	cc 99       	sbic	0x19, 4	; 25
 138:	06 c0       	rjmp	.+12     	; 0x146 <keypad+0x18>
	{
		lcd_cmd(0x01);
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
		lcd_data('1');
 140:	81 e3       	ldi	r24, 0x31	; 49
 142:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_data>
	}
	if(!(PINA&(1<<5)))
 146:	cd 99       	sbic	0x19, 5	; 25
 148:	06 c0       	rjmp	.+12     	; 0x156 <keypad+0x28>
	{
		lcd_cmd(0x01);
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
		lcd_data('2');
 150:	82 e3       	ldi	r24, 0x32	; 50
 152:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_data>
	}
	if(!(PINA&(1<<6)))
 156:	ce 99       	sbic	0x19, 6	; 25
 158:	06 c0       	rjmp	.+12     	; 0x166 <keypad+0x38>
	{
		lcd_cmd(0x01);
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
		lcd_data('3');
 160:	83 e3       	ldi	r24, 0x33	; 51
 162:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_data>
	 }
	
	PORTA=(PORTA|(1<<0)|(1<<2)|(1<<3))&~(1<<1);
 166:	8b b3       	in	r24, 0x1b	; 27
 168:	8d 7f       	andi	r24, 0xFD	; 253
 16a:	8d 60       	ori	r24, 0x0D	; 13
 16c:	8b bb       	out	0x1b, r24	; 27
	if(!(PINA&(1<<4)))
 16e:	cc 99       	sbic	0x19, 4	; 25
 170:	06 c0       	rjmp	.+12     	; 0x17e <keypad+0x50>
	{
		lcd_cmd(0x01);
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
		lcd_data('4');
 178:	84 e3       	ldi	r24, 0x34	; 52
 17a:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_data>
	}
	if(!(PINA&(1<<5)))
 17e:	cd 99       	sbic	0x19, 5	; 25
 180:	06 c0       	rjmp	.+12     	; 0x18e <keypad+0x60>
	{
		lcd_cmd(0x01);
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
		lcd_data('5');
 188:	85 e3       	ldi	r24, 0x35	; 53
 18a:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_data>
	}
	if(!(PINA&(1<<6)))
 18e:	ce 99       	sbic	0x19, 6	; 25
 190:	06 c0       	rjmp	.+12     	; 0x19e <keypad+0x70>
	{
		lcd_cmd(0x01);
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
		lcd_data('6');
 198:	86 e3       	ldi	r24, 0x36	; 54
 19a:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_data>
	}
	
	PORTA=(PORTA|(1<<0)|(1<<1)|(1<<3))&~(1<<2);
 19e:	8b b3       	in	r24, 0x1b	; 27
 1a0:	8b 7f       	andi	r24, 0xFB	; 251
 1a2:	8b 60       	ori	r24, 0x0B	; 11
 1a4:	8b bb       	out	0x1b, r24	; 27
	if(!(PINA&(1<<4)))
 1a6:	cc 99       	sbic	0x19, 4	; 25
 1a8:	06 c0       	rjmp	.+12     	; 0x1b6 <keypad+0x88>
	{
		lcd_cmd(0x01);
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
		lcd_data('7');
 1b0:	87 e3       	ldi	r24, 0x37	; 55
 1b2:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_data>
	}
	if(!(PINA&(1<<5)))
 1b6:	cd 99       	sbic	0x19, 5	; 25
 1b8:	06 c0       	rjmp	.+12     	; 0x1c6 <keypad+0x98>
	{
		lcd_cmd(0x01);
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
		lcd_data('8');
 1c0:	88 e3       	ldi	r24, 0x38	; 56
 1c2:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_data>
	}
	if(!(PINA&(1<<6)))
 1c6:	ce 99       	sbic	0x19, 6	; 25
 1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <keypad+0xa8>
	{
		lcd_cmd(0x01);
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
		lcd_data('9');
 1d0:	89 e3       	ldi	r24, 0x39	; 57
 1d2:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_data>
	}
	
	PORTA=(PORTA|(1<<0)|(1<<1)|(1<<2))&~(1<<3);
 1d6:	8b b3       	in	r24, 0x1b	; 27
 1d8:	87 7f       	andi	r24, 0xF7	; 247
 1da:	87 60       	ori	r24, 0x07	; 7
 1dc:	8b bb       	out	0x1b, r24	; 27
	if(!(PINA&(1<<4)))
 1de:	cc 99       	sbic	0x19, 4	; 25
 1e0:	06 c0       	rjmp	.+12     	; 0x1ee <keypad+0xc0>
	{
		lcd_cmd(0x01);
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
		lcd_data('*');
 1e8:	8a e2       	ldi	r24, 0x2A	; 42
 1ea:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_data>
      }
	if(!(PINA&(1<<5)))
 1ee:	cd 99       	sbic	0x19, 5	; 25
 1f0:	06 c0       	rjmp	.+12     	; 0x1fe <keypad+0xd0>
	{
		lcd_cmd(0x01);
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
		lcd_data('0');
 1f8:	80 e3       	ldi	r24, 0x30	; 48
 1fa:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_data>
	}
	if(!(PINA&(1<<6)))
 1fe:	ce 99       	sbic	0x19, 6	; 25
 200:	06 c0       	rjmp	.+12     	; 0x20e <keypad+0xe0>
	{
		lcd_cmd(0x01);
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
		lcd_data('#');
 208:	83 e2       	ldi	r24, 0x23	; 35
 20a:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_data>
 20e:	08 95       	ret

00000210 <main>:
}


void main()
{
	PORTA=0xF0;   //pullup activate
 210:	80 ef       	ldi	r24, 0xF0	; 240
 212:	8b bb       	out	0x1b, r24	; 27
	DDRA=0b00001111;
 214:	8f e0       	ldi	r24, 0x0F	; 15
 216:	8a bb       	out	0x1a, r24	; 26
	init();
 218:	0e 94 5f 00 	call	0xbe	; 0xbe <init>
	while(1)
	{
	  keypad();
 21c:	0e 94 97 00 	call	0x12e	; 0x12e <keypad>
 220:	fd cf       	rjmp	.-6      	; 0x21c <main+0xc>

00000222 <_exit>:
 222:	f8 94       	cli

00000224 <__stop_program>:
 224:	ff cf       	rjmp	.-2      	; 0x224 <__stop_program>
