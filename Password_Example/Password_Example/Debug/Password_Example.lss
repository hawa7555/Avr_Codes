
Password_Example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000470  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00000470  00000504  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800088  00800088  0000052c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000055c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d8f  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000069a  00000000  00000000  00001387  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000589  00000000  00000000  00001a21  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001fac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a0  00000000  00000000  0000206c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005c6  00000000  00000000  0000240c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000029d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e7       	ldi	r30, 0x70	; 112
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e8       	ldi	r26, 0x88	; 136
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 38       	cpi	r26, 0x8F	; 143
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 24 02 	call	0x448	; 0x448 <main>
  8a:	0c 94 36 02 	jmp	0x46c	; 0x46c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_cmd_enable>:
	lcd_cmd_enable();
}

void lcd_cmd_enable()
{
	PORTC=PORTC&~(1<<0);   //RS=0
  92:	a8 98       	cbi	0x15, 0	; 21
	PORTC=PORTC&~(1<<1);   //RW=0
  94:	a9 98       	cbi	0x15, 1	; 21
	PORTC=PORTC|(1<<2);    //EN=1
  96:	aa 9a       	sbi	0x15, 2	; 21
	PORTC=PORTC&~(1<<2);   //EN=0
  98:	aa 98       	cbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	8f ec       	ldi	r24, 0xCF	; 207
  9c:	97 e0       	ldi	r25, 0x07	; 7
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <lcd_cmd_enable+0xc>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <lcd_cmd_enable+0x12>
  a4:	00 00       	nop
  a6:	08 95       	ret

000000a8 <lcd_cmd>:
	 password();
	}
}

void lcd_cmd(char x)
{
  a8:	cf 93       	push	r28
  aa:	c8 2f       	mov	r28, r24
	PORTC=x&(0xF0);
  ac:	80 7f       	andi	r24, 0xF0	; 240
  ae:	85 bb       	out	0x15, r24	; 21
	lcd_cmd_enable();
  b0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd_enable>
	PORTC=(x<<4)&(0xF0);
  b4:	20 e1       	ldi	r18, 0x10	; 16
  b6:	c2 9f       	mul	r28, r18
  b8:	c0 01       	movw	r24, r0
  ba:	11 24       	eor	r1, r1
  bc:	85 bb       	out	0x15, r24	; 21
	lcd_cmd_enable();
  be:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd_enable>
}
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <init>:
	_delay_ms(1);
}

void init()
{
	DDRC=0xFF;
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	84 bb       	out	0x14, r24	; 20
	lcd_cmd(0x02);
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
	lcd_cmd(0x28);
  d0:	88 e2       	ldi	r24, 0x28	; 40
  d2:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
	lcd_cmd(0x0E);
  d6:	8e e0       	ldi	r24, 0x0E	; 14
  d8:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
	//lcd_cmd(0x01);
	//lcd_cmd(0x06);
	lcd_cmd(0x80);
  dc:	80 e8       	ldi	r24, 0x80	; 128
  de:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
  e2:	08 95       	ret

000000e4 <lcd_data_enable>:
	lcd_data_enable();
}

void lcd_data_enable()
{
	PORTC=PORTC|(1<<0);    //RS=1
  e4:	a8 9a       	sbi	0x15, 0	; 21
	PORTC=PORTC&~(1<<1);   //RW=0
  e6:	a9 98       	cbi	0x15, 1	; 21
	PORTC=PORTC|(1<<2);    //EN=1
  e8:	aa 9a       	sbi	0x15, 2	; 21
	PORTC=PORTC&~(1<<2);   //EN=0
  ea:	aa 98       	cbi	0x15, 2	; 21
  ec:	8f ec       	ldi	r24, 0xCF	; 207
  ee:	97 e0       	ldi	r25, 0x07	; 7
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <lcd_data_enable+0xc>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <lcd_data_enable+0x12>
  f6:	00 00       	nop
  f8:	08 95       	ret

000000fa <lcd_data>:
	//lcd_cmd(0x06);
	lcd_cmd(0x80);
}

void lcd_data(char x)
{
  fa:	cf 93       	push	r28
  fc:	c8 2f       	mov	r28, r24
	PORTC=x&(0xF0);
  fe:	80 7f       	andi	r24, 0xF0	; 240
 100:	85 bb       	out	0x15, r24	; 21
	lcd_data_enable();
 102:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_data_enable>
	PORTC=(x<<4)&(0xF0);
 106:	20 e1       	ldi	r18, 0x10	; 16
 108:	c2 9f       	mul	r28, r18
 10a:	c0 01       	movw	r24, r0
 10c:	11 24       	eor	r1, r1
 10e:	85 bb       	out	0x15, r24	; 21
	lcd_data_enable();
 110:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_data_enable>
}
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <lcd_display>:
	PORTC=PORTC&~(1<<2);   //EN=0
	_delay_ms(1);
}

void lcd_display(char x[])
{
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	ec 01       	movw	r28, r24
	for(int j=0;x[j]!='\0';j++)
 11e:	88 81       	ld	r24, Y
 120:	88 23       	and	r24, r24
 122:	79 f0       	breq	.+30     	; 0x142 <lcd_display+0x2a>
 124:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_data(x[j]);
 126:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_data>
 12a:	2f e7       	ldi	r18, 0x7F	; 127
 12c:	88 e3       	ldi	r24, 0x38	; 56
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	21 50       	subi	r18, 0x01	; 1
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <lcd_display+0x18>
 138:	00 c0       	rjmp	.+0      	; 0x13a <lcd_display+0x22>
 13a:	00 00       	nop
	_delay_ms(1);
}

void lcd_display(char x[])
{
	for(int j=0;x[j]!='\0';j++)
 13c:	89 91       	ld	r24, Y+
 13e:	81 11       	cpse	r24, r1
 140:	f2 cf       	rjmp	.-28     	; 0x126 <lcd_display+0xe>
	{
		lcd_data(x[j]);
		//_delay_ms(300);
		_delay_ms(50);
	}
}
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <keypad>:
void keypad()
{
	//static int i=0;
	//char a[5];
	
	PORTA=PORTA&~(1<<col0);
 148:	dc 98       	cbi	0x1b, 4	; 27
	PORTA=PORTA|(1<<col1)|(1<<col2)|(1<<col3);
 14a:	8b b3       	in	r24, 0x1b	; 27
 14c:	80 6e       	ori	r24, 0xE0	; 224
 14e:	8b bb       	out	0x1b, r24	; 27
	
	if( (PINA&(1<<row0))==0 )
 150:	c8 99       	sbic	0x19, 0	; 25
 152:	1f c0       	rjmp	.+62     	; 0x192 <keypad+0x4a>
	{
		lcd_display("*");
 154:	80 e6       	ldi	r24, 0x60	; 96
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
	    a[i]='7';
 15c:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <__data_end>
 160:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <__data_end+0x1>
 164:	e6 57       	subi	r30, 0x76	; 118
 166:	ff 4f       	sbci	r31, 0xFF	; 255
 168:	87 e3       	ldi	r24, 0x37	; 55
 16a:	80 83       	st	Z, r24
 16c:	2f ef       	ldi	r18, 0xFF	; 255
 16e:	81 ee       	ldi	r24, 0xE1	; 225
 170:	94 e0       	ldi	r25, 0x04	; 4
 172:	21 50       	subi	r18, 0x01	; 1
 174:	80 40       	sbci	r24, 0x00	; 0
 176:	90 40       	sbci	r25, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <keypad+0x2a>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <keypad+0x34>
 17c:	00 00       	nop
		_delay_ms(200);
		++i;
 17e:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 182:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 186:	01 96       	adiw	r24, 0x01	; 1
 188:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
 18c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
		return;
 190:	08 95       	ret
	}
	
	else if( (PINA&(1<<row1))==0 )
 192:	c9 99       	sbic	0x19, 1	; 25
 194:	1c c0       	rjmp	.+56     	; 0x1ce <keypad+0x86>
	{
		lcd_display("*");
 196:	80 e6       	ldi	r24, 0x60	; 96
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
		a[i]='4';
 19e:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 1a2:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 1a6:	fc 01       	movw	r30, r24
 1a8:	e6 57       	subi	r30, 0x76	; 118
 1aa:	ff 4f       	sbci	r31, 0xFF	; 255
 1ac:	24 e3       	ldi	r18, 0x34	; 52
 1ae:	20 83       	st	Z, r18
		++i;
 1b0:	01 96       	adiw	r24, 0x01	; 1
 1b2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
 1b6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
 1ba:	2f ef       	ldi	r18, 0xFF	; 255
 1bc:	81 ee       	ldi	r24, 0xE1	; 225
 1be:	94 e0       	ldi	r25, 0x04	; 4
 1c0:	21 50       	subi	r18, 0x01	; 1
 1c2:	80 40       	sbci	r24, 0x00	; 0
 1c4:	90 40       	sbci	r25, 0x00	; 0
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <keypad+0x78>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <keypad+0x82>
 1ca:	00 00       	nop
 1cc:	08 95       	ret
		_delay_ms(200);
		return;
	}
	
	else if( (PINA&(1<<row2))==0 )
 1ce:	ca 99       	sbic	0x19, 2	; 25
 1d0:	1c c0       	rjmp	.+56     	; 0x20a <keypad+0xc2>
	{
		lcd_display("*");
 1d2:	80 e6       	ldi	r24, 0x60	; 96
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
		a[i]='1';
 1da:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 1de:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 1e2:	fc 01       	movw	r30, r24
 1e4:	e6 57       	subi	r30, 0x76	; 118
 1e6:	ff 4f       	sbci	r31, 0xFF	; 255
 1e8:	21 e3       	ldi	r18, 0x31	; 49
 1ea:	20 83       	st	Z, r18
		++i;
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
 1f2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
 1f6:	2f ef       	ldi	r18, 0xFF	; 255
 1f8:	81 ee       	ldi	r24, 0xE1	; 225
 1fa:	94 e0       	ldi	r25, 0x04	; 4
 1fc:	21 50       	subi	r18, 0x01	; 1
 1fe:	80 40       	sbci	r24, 0x00	; 0
 200:	90 40       	sbci	r25, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <keypad+0xb4>
 204:	00 c0       	rjmp	.+0      	; 0x206 <keypad+0xbe>
 206:	00 00       	nop
 208:	08 95       	ret
		_delay_ms(200);
		return;
	}
	
	PORTA=PORTA&~(1<<col1);
 20a:	dd 98       	cbi	0x1b, 5	; 27
	PORTA=PORTA|(1<<col0)|(1<<col2)|(1<<col3);
 20c:	8b b3       	in	r24, 0x1b	; 27
 20e:	80 6d       	ori	r24, 0xD0	; 208
 210:	8b bb       	out	0x1b, r24	; 27
	
	if( (PINA&(1<<row0))==0 )
 212:	c8 99       	sbic	0x19, 0	; 25
 214:	1c c0       	rjmp	.+56     	; 0x24e <keypad+0x106>
	{
		lcd_display("*");
 216:	80 e6       	ldi	r24, 0x60	; 96
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
		a[i]='8';
 21e:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 222:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 226:	fc 01       	movw	r30, r24
 228:	e6 57       	subi	r30, 0x76	; 118
 22a:	ff 4f       	sbci	r31, 0xFF	; 255
 22c:	28 e3       	ldi	r18, 0x38	; 56
 22e:	20 83       	st	Z, r18
		++i;
 230:	01 96       	adiw	r24, 0x01	; 1
 232:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
 236:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
 23a:	2f ef       	ldi	r18, 0xFF	; 255
 23c:	81 ee       	ldi	r24, 0xE1	; 225
 23e:	94 e0       	ldi	r25, 0x04	; 4
 240:	21 50       	subi	r18, 0x01	; 1
 242:	80 40       	sbci	r24, 0x00	; 0
 244:	90 40       	sbci	r25, 0x00	; 0
 246:	e1 f7       	brne	.-8      	; 0x240 <keypad+0xf8>
 248:	00 c0       	rjmp	.+0      	; 0x24a <keypad+0x102>
 24a:	00 00       	nop
 24c:	08 95       	ret
		_delay_ms(200);
		return;
	}
	
	else if( (PINA&(1<<row1))==0 )
 24e:	c9 99       	sbic	0x19, 1	; 25
 250:	1c c0       	rjmp	.+56     	; 0x28a <keypad+0x142>
	{
		lcd_display("*");
 252:	80 e6       	ldi	r24, 0x60	; 96
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
	    a[i]='5';
 25a:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 25e:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 262:	fc 01       	movw	r30, r24
 264:	e6 57       	subi	r30, 0x76	; 118
 266:	ff 4f       	sbci	r31, 0xFF	; 255
 268:	25 e3       	ldi	r18, 0x35	; 53
 26a:	20 83       	st	Z, r18
		++i;
 26c:	01 96       	adiw	r24, 0x01	; 1
 26e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
 272:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
 276:	2f ef       	ldi	r18, 0xFF	; 255
 278:	81 ee       	ldi	r24, 0xE1	; 225
 27a:	94 e0       	ldi	r25, 0x04	; 4
 27c:	21 50       	subi	r18, 0x01	; 1
 27e:	80 40       	sbci	r24, 0x00	; 0
 280:	90 40       	sbci	r25, 0x00	; 0
 282:	e1 f7       	brne	.-8      	; 0x27c <keypad+0x134>
 284:	00 c0       	rjmp	.+0      	; 0x286 <keypad+0x13e>
 286:	00 00       	nop
 288:	08 95       	ret
		_delay_ms(200);
		return;
	}
	
	else if( (PINA&(1<<row2))==0 )
 28a:	ca 99       	sbic	0x19, 2	; 25
 28c:	1c c0       	rjmp	.+56     	; 0x2c6 <keypad+0x17e>
	{
		lcd_display("*");
 28e:	80 e6       	ldi	r24, 0x60	; 96
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
		a[i]='2';
 296:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 29a:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 29e:	fc 01       	movw	r30, r24
 2a0:	e6 57       	subi	r30, 0x76	; 118
 2a2:	ff 4f       	sbci	r31, 0xFF	; 255
 2a4:	22 e3       	ldi	r18, 0x32	; 50
 2a6:	20 83       	st	Z, r18
		++i;
 2a8:	01 96       	adiw	r24, 0x01	; 1
 2aa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
 2ae:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
 2b2:	2f ef       	ldi	r18, 0xFF	; 255
 2b4:	81 ee       	ldi	r24, 0xE1	; 225
 2b6:	94 e0       	ldi	r25, 0x04	; 4
 2b8:	21 50       	subi	r18, 0x01	; 1
 2ba:	80 40       	sbci	r24, 0x00	; 0
 2bc:	90 40       	sbci	r25, 0x00	; 0
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <keypad+0x170>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <keypad+0x17a>
 2c2:	00 00       	nop
 2c4:	08 95       	ret
		_delay_ms(200);
		return;
	}
			
	PORTA=PORTA&~(1<<col2);
 2c6:	de 98       	cbi	0x1b, 6	; 27
	PORTA=PORTA|(1<<col0)|(1<<col1)|(1<<col3);
 2c8:	8b b3       	in	r24, 0x1b	; 27
 2ca:	80 6b       	ori	r24, 0xB0	; 176
 2cc:	8b bb       	out	0x1b, r24	; 27
	
	if( (PINA&(1<<row0))==0 )
 2ce:	c8 99       	sbic	0x19, 0	; 25
 2d0:	1c c0       	rjmp	.+56     	; 0x30a <keypad+0x1c2>
	{
		lcd_display("*");
 2d2:	80 e6       	ldi	r24, 0x60	; 96
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
		a[i]='9';
 2da:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 2de:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 2e2:	fc 01       	movw	r30, r24
 2e4:	e6 57       	subi	r30, 0x76	; 118
 2e6:	ff 4f       	sbci	r31, 0xFF	; 255
 2e8:	29 e3       	ldi	r18, 0x39	; 57
 2ea:	20 83       	st	Z, r18
		++i;
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
 2f2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
 2f6:	2f ef       	ldi	r18, 0xFF	; 255
 2f8:	81 ee       	ldi	r24, 0xE1	; 225
 2fa:	94 e0       	ldi	r25, 0x04	; 4
 2fc:	21 50       	subi	r18, 0x01	; 1
 2fe:	80 40       	sbci	r24, 0x00	; 0
 300:	90 40       	sbci	r25, 0x00	; 0
 302:	e1 f7       	brne	.-8      	; 0x2fc <keypad+0x1b4>
 304:	00 c0       	rjmp	.+0      	; 0x306 <keypad+0x1be>
 306:	00 00       	nop
 308:	08 95       	ret
		_delay_ms(200);
		return;
	}
	
	else if( (PINA&(1<<row1))==0 )
 30a:	c9 99       	sbic	0x19, 1	; 25
 30c:	1c c0       	rjmp	.+56     	; 0x346 <keypad+0x1fe>
	{
		lcd_display("*");
 30e:	80 e6       	ldi	r24, 0x60	; 96
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
		a[i]='6';
 316:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 31a:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 31e:	fc 01       	movw	r30, r24
 320:	e6 57       	subi	r30, 0x76	; 118
 322:	ff 4f       	sbci	r31, 0xFF	; 255
 324:	26 e3       	ldi	r18, 0x36	; 54
 326:	20 83       	st	Z, r18
		++i;
 328:	01 96       	adiw	r24, 0x01	; 1
 32a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
 32e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
 332:	2f ef       	ldi	r18, 0xFF	; 255
 334:	81 ee       	ldi	r24, 0xE1	; 225
 336:	94 e0       	ldi	r25, 0x04	; 4
 338:	21 50       	subi	r18, 0x01	; 1
 33a:	80 40       	sbci	r24, 0x00	; 0
 33c:	90 40       	sbci	r25, 0x00	; 0
 33e:	e1 f7       	brne	.-8      	; 0x338 <keypad+0x1f0>
 340:	00 c0       	rjmp	.+0      	; 0x342 <keypad+0x1fa>
 342:	00 00       	nop
 344:	08 95       	ret
		_delay_ms(200);
		return;
	}
	
	else if( (PINA&(1<<row2))==0 )
 346:	ca 99       	sbic	0x19, 2	; 25
 348:	1b c0       	rjmp	.+54     	; 0x380 <keypad+0x238>
	{
		lcd_display("*");
 34a:	80 e6       	ldi	r24, 0x60	; 96
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
		a[i]='3';
 352:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 356:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 35a:	fc 01       	movw	r30, r24
 35c:	e6 57       	subi	r30, 0x76	; 118
 35e:	ff 4f       	sbci	r31, 0xFF	; 255
 360:	23 e3       	ldi	r18, 0x33	; 51
 362:	20 83       	st	Z, r18
		++i;
 364:	01 96       	adiw	r24, 0x01	; 1
 366:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
 36a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
 36e:	2f ef       	ldi	r18, 0xFF	; 255
 370:	81 ee       	ldi	r24, 0xE1	; 225
 372:	94 e0       	ldi	r25, 0x04	; 4
 374:	21 50       	subi	r18, 0x01	; 1
 376:	80 40       	sbci	r24, 0x00	; 0
 378:	90 40       	sbci	r25, 0x00	; 0
 37a:	e1 f7       	brne	.-8      	; 0x374 <keypad+0x22c>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <keypad+0x236>
 37e:	00 00       	nop
 380:	08 95       	ret

00000382 <password>:
 }

void password()
{
	//static int i=0;
	lcd_display("Enter password");
 382:	82 e6       	ldi	r24, 0x62	; 98
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
 38a:	2f ef       	ldi	r18, 0xFF	; 255
 38c:	86 e1       	ldi	r24, 0x16	; 22
 38e:	91 e1       	ldi	r25, 0x11	; 17
 390:	21 50       	subi	r18, 0x01	; 1
 392:	80 40       	sbci	r24, 0x00	; 0
 394:	90 40       	sbci	r25, 0x00	; 0
 396:	e1 f7       	brne	.-8      	; 0x390 <password+0xe>
 398:	00 c0       	rjmp	.+0      	; 0x39a <password+0x18>
 39a:	00 00       	nop
	_delay_ms(700);
	lcd_cmd(0x01);
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
	do
	{
	  keypad();
 3a2:	0e 94 a4 00 	call	0x148	; 0x148 <keypad>
	  //_delay_ms(500);
	}while(i<4);
 3a6:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 3aa:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 3ae:	84 30       	cpi	r24, 0x04	; 4
 3b0:	91 05       	cpc	r25, r1
 3b2:	bc f3       	brlt	.-18     	; 0x3a2 <password+0x20>
			lcd_display("break");
			_delay_ms(500);
			break;
		}*/
	
   a[i]='\0';
 3b4:	fc 01       	movw	r30, r24
 3b6:	e6 57       	subi	r30, 0x76	; 118
 3b8:	ff 4f       	sbci	r31, 0xFF	; 255
 3ba:	10 82       	st	Z, r1
   i=0;
 3bc:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__data_end+0x1>
 3c0:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__data_end>
   
   if((strcmp(a,"1234"))==0)
 3c4:	61 e7       	ldi	r22, 0x71	; 113
 3c6:	70 e0       	ldi	r23, 0x00	; 0
 3c8:	8a e8       	ldi	r24, 0x8A	; 138
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 2d 02 	call	0x45a	; 0x45a <strcmp>
 3d0:	89 2b       	or	r24, r25
 3d2:	a1 f4       	brne	.+40     	; 0x3fc <password+0x7a>
   {
	   lcd_cmd(0x01);
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
	   lcd_display("Welcome");
 3da:	86 e7       	ldi	r24, 0x76	; 118
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
 3e2:	2f ef       	ldi	r18, 0xFF	; 255
 3e4:	89 e6       	ldi	r24, 0x69	; 105
 3e6:	98 e1       	ldi	r25, 0x18	; 24
 3e8:	21 50       	subi	r18, 0x01	; 1
 3ea:	80 40       	sbci	r24, 0x00	; 0
 3ec:	90 40       	sbci	r25, 0x00	; 0
 3ee:	e1 f7       	brne	.-8      	; 0x3e8 <password+0x66>
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <password+0x70>
 3f2:	00 00       	nop
	   _delay_ms(1000);
	   lcd_cmd(0x01);
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
 3fa:	08 95       	ret
   }
   else
   {
	   lcd_cmd(0x01);
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
	   lcd_display(a);
 402:	8a e8       	ldi	r24, 0x8A	; 138
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
 40a:	2f ef       	ldi	r18, 0xFF	; 255
 40c:	89 e6       	ldi	r24, 0x69	; 105
 40e:	98 e1       	ldi	r25, 0x18	; 24
 410:	21 50       	subi	r18, 0x01	; 1
 412:	80 40       	sbci	r24, 0x00	; 0
 414:	90 40       	sbci	r25, 0x00	; 0
 416:	e1 f7       	brne	.-8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 418:	00 c0       	rjmp	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 41a:	00 00       	nop
	   _delay_ms(1000);
	   lcd_cmd(0x01);
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
	   lcd_display("try again");
 422:	8e e7       	ldi	r24, 0x7E	; 126
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
 42a:	2f ef       	ldi	r18, 0xFF	; 255
 42c:	84 e3       	ldi	r24, 0x34	; 52
 42e:	9c e0       	ldi	r25, 0x0C	; 12
 430:	21 50       	subi	r18, 0x01	; 1
 432:	80 40       	sbci	r24, 0x00	; 0
 434:	90 40       	sbci	r25, 0x00	; 0
 436:	e1 f7       	brne	.-8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 438:	00 c0       	rjmp	.+0      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 43a:	00 00       	nop
	   _delay_ms(500);
	   lcd_cmd(0x01);
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
	   password();
 442:	0e 94 c1 01 	call	0x382	; 0x382 <password>
 446:	08 95       	ret

00000448 <main>:
   }
 }

int main()
{
	PORTA=0x0F;      //just pull up activation
 448:	8f e0       	ldi	r24, 0x0F	; 15
 44a:	8b bb       	out	0x1b, r24	; 27
	DDRA=0xF0;
 44c:	80 ef       	ldi	r24, 0xF0	; 240
 44e:	8a bb       	out	0x1a, r24	; 26
	init();
 450:	0e 94 63 00 	call	0xc6	; 0xc6 <init>
	while(1)
	{
	 password();
 454:	0e 94 c1 01 	call	0x382	; 0x382 <password>
 458:	fd cf       	rjmp	.-6      	; 0x454 <main+0xc>

0000045a <strcmp>:
 45a:	fb 01       	movw	r30, r22
 45c:	dc 01       	movw	r26, r24
 45e:	8d 91       	ld	r24, X+
 460:	01 90       	ld	r0, Z+
 462:	80 19       	sub	r24, r0
 464:	01 10       	cpse	r0, r1
 466:	d9 f3       	breq	.-10     	; 0x45e <strcmp+0x4>
 468:	99 0b       	sbc	r25, r25
 46a:	08 95       	ret

0000046c <_exit>:
 46c:	f8 94       	cli

0000046e <__stop_program>:
 46e:	ff cf       	rjmp	.-2      	; 0x46e <__stop_program>
