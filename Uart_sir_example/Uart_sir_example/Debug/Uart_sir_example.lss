
Uart_sir_example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000128  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007da  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000679  00000000  00000000  00000a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036e  00000000  00000000  00001093  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00001404  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a1  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000153  00000000  00000000  00001849  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000199c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 8b 00 	call	0x116	; 0x116 <main>
  64:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <uart_init>:
	a=(char)temp;
	lcd_data(a);
}
void uart_init()
{
	UBRRL=0x33;//Fosc=8Mhz,BR=9600
  6c:	83 e3       	ldi	r24, 0x33	; 51
  6e:	89 b9       	out	0x09, r24	; 9
	UCSRB=UCSRB|(1<<RXEN);
  70:	54 9a       	sbi	0x0a, 4	; 10
	UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
  72:	80 b5       	in	r24, 0x20	; 32
  74:	86 68       	ori	r24, 0x86	; 134
  76:	80 bd       	out	0x20, r24	; 32
  78:	08 95       	ret

0000007a <lcd_data_enable_to_write>:
	PORTA=((x<<4)&0xf0); //lower 4 bit
	lcd_data_enable_to_write();
}
void lcd_data_enable_to_write()
{
	PORTA=PORTA |(1<<0);//RS=0;
  7a:	d8 9a       	sbi	0x1b, 0	; 27
	PORTA=PORTA&~(1<<1);//RW=0;
  7c:	d9 98       	cbi	0x1b, 1	; 27
	PORTA=PORTA |(1<<2);//EN=1;
  7e:	da 9a       	sbi	0x1b, 2	; 27
	PORTA=PORTA&~(1<<2);//EN=0;
  80:	da 98       	cbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	8f ec       	ldi	r24, 0xCF	; 207
  84:	97 e0       	ldi	r25, 0x07	; 7
  86:	01 97       	sbiw	r24, 0x01	; 1
  88:	f1 f7       	brne	.-4      	; 0x86 <lcd_data_enable_to_write+0xc>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <lcd_data_enable_to_write+0x12>
  8c:	00 00       	nop
  8e:	08 95       	ret

00000090 <lcd_data>:
	lcd_command_enable_to_write();
	PORTA=((x<<4)&0xf0); //lower 4 bit
	lcd_command_enable_to_write();
}
void lcd_data(char x)
{
  90:	cf 93       	push	r28
  92:	c8 2f       	mov	r28, r24
	PORTA=(x&0xf0);  //upper 4 bit
  94:	80 7f       	andi	r24, 0xF0	; 240
  96:	8b bb       	out	0x1b, r24	; 27
	lcd_data_enable_to_write();
  98:	0e 94 3d 00 	call	0x7a	; 0x7a <lcd_data_enable_to_write>
	PORTA=((x<<4)&0xf0); //lower 4 bit
  9c:	20 e1       	ldi	r18, 0x10	; 16
  9e:	c2 9f       	mul	r28, r18
  a0:	c0 01       	movw	r24, r0
  a2:	11 24       	eor	r1, r1
  a4:	8b bb       	out	0x1b, r24	; 27
	lcd_data_enable_to_write();
  a6:	0e 94 3d 00 	call	0x7a	; 0x7a <lcd_data_enable_to_write>
}
  aa:	cf 91       	pop	r28
  ac:	08 95       	ret

000000ae <rx>:
{
	//while( (UCSRA &(1<<RXC))==0);
	//lcd_data(UDR);
	char a;
	int temp;
	while((UCSRA&(1<<RXC))==0);
  ae:	5f 9b       	sbis	0x0b, 7	; 11
  b0:	fe cf       	rjmp	.-4      	; 0xae <rx>
	a=UDR;
  b2:	8c b1       	in	r24, 0x0c	; 12
	temp=(int)a;
  b4:	90 e0       	ldi	r25, 0x00	; 0
	if(temp>=97 && temp<=122)
  b6:	9c 01       	movw	r18, r24
  b8:	21 56       	subi	r18, 0x61	; 97
  ba:	31 09       	sbc	r19, r1
  bc:	2a 31       	cpi	r18, 0x1A	; 26
  be:	31 05       	cpc	r19, r1
  c0:	08 f4       	brcc	.+2      	; 0xc4 <rx+0x16>
	{
		temp-=32;
  c2:	80 97       	sbiw	r24, 0x20	; 32
		}
	a=(char)temp;
	lcd_data(a);
  c4:	0e 94 48 00 	call	0x90	; 0x90 <lcd_data>
  c8:	08 95       	ret

000000ca <lcd_command_enable_to_write>:
	_delay_ms(1);
}

void lcd_command_enable_to_write()
{
	PORTA=PORTA&~(1<<0);//RS=0;
  ca:	d8 98       	cbi	0x1b, 0	; 27
	PORTA=PORTA&~(1<<1);//RW=0;
  cc:	d9 98       	cbi	0x1b, 1	; 27
	PORTA=PORTA |(1<<2);//EN=1;
  ce:	da 9a       	sbi	0x1b, 2	; 27
	PORTA=PORTA&~(1<<2);//EN=0;
  d0:	da 98       	cbi	0x1b, 2	; 27
  d2:	8f ec       	ldi	r24, 0xCF	; 207
  d4:	97 e0       	ldi	r25, 0x07	; 7
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <lcd_command_enable_to_write+0xc>
  da:	00 c0       	rjmp	.+0      	; 0xdc <lcd_command_enable_to_write+0x12>
  dc:	00 00       	nop
  de:	08 95       	ret

000000e0 <lcd_command>:
	lcd_command(0x28);
	lcd_command(0x0E);

}
void lcd_command(char x)
{
  e0:	cf 93       	push	r28
  e2:	c8 2f       	mov	r28, r24
	PORTA=(x&0xf0);  //upper 4 bit
  e4:	80 7f       	andi	r24, 0xF0	; 240
  e6:	8b bb       	out	0x1b, r24	; 27
	lcd_command_enable_to_write();
  e8:	0e 94 65 00 	call	0xca	; 0xca <lcd_command_enable_to_write>
	PORTA=((x<<4)&0xf0); //lower 4 bit
  ec:	20 e1       	ldi	r18, 0x10	; 16
  ee:	c2 9f       	mul	r28, r18
  f0:	c0 01       	movw	r24, r0
  f2:	11 24       	eor	r1, r1
  f4:	8b bb       	out	0x1b, r24	; 27
	lcd_command_enable_to_write();
  f6:	0e 94 65 00 	call	0xca	; 0xca <lcd_command_enable_to_write>
}
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <lcd_init>:

}

void lcd_init()
{
	DDRA=0xff;
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	8a bb       	out	0x1a, r24	; 26
	lcd_command(0x02);
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_command>
	lcd_command(0x28);
 108:	88 e2       	ldi	r24, 0x28	; 40
 10a:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_command>
	lcd_command(0x0E);
 10e:	8e e0       	ldi	r24, 0x0E	; 14
 110:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_command>
 114:	08 95       	ret

00000116 <main>:
void lcd_data_enable_to_write();
void lcd_command_enable_to_write();
void lcd_data(char );
int main()
{
	lcd_init();
 116:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_init>
	uart_init();
 11a:	0e 94 36 00 	call	0x6c	; 0x6c <uart_init>
	while(1)
	{
		rx();
 11e:	0e 94 57 00 	call	0xae	; 0xae <rx>
 122:	fd cf       	rjmp	.-6      	; 0x11e <main+0x8>

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
