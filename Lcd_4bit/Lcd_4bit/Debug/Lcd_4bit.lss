
Lcd_4bit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000019a  0000020e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000085f  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000673  00000000  00000000  00000b23  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036a  00000000  00000000  00001196  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00001500  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000356  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000217  00000000  00000000  000018d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001aed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e9       	ldi	r30, 0x9A	; 154
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 c3 00 	call	0x186	; 0x186 <main>
  7a:	0c 94 cb 00 	jmp	0x196	; 0x196 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_cmd>:
#define F_CPU 8000000UL
#include <avr/io.h>
#include <util/delay.h>
void lcd_cmd(char x)
{
	PORTA=x&(0xF0);
  82:	98 2f       	mov	r25, r24
  84:	90 7f       	andi	r25, 0xF0	; 240
  86:	9b bb       	out	0x1b, r25	; 27
	PORTA=PORTA&~(1<<0);   //RS=0
  88:	d8 98       	cbi	0x1b, 0	; 27
	PORTA=PORTA&~(1<<1);   //RW=0
  8a:	d9 98       	cbi	0x1b, 1	; 27
	PORTA=PORTA|(1<<2);    //EN=1
  8c:	da 9a       	sbi	0x1b, 2	; 27
	PORTA=PORTA&~(1<<2);   //EN=0
  8e:	da 98       	cbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	ef ec       	ldi	r30, 0xCF	; 207
  92:	f7 e0       	ldi	r31, 0x07	; 7
  94:	31 97       	sbiw	r30, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <lcd_cmd+0x12>
  98:	00 c0       	rjmp	.+0      	; 0x9a <lcd_cmd+0x18>
  9a:	00 00       	nop
	_delay_ms(1);
	//lcd_cmd(x<<4);
	PORTA=(x<<4)&(0xF0);
  9c:	f0 e1       	ldi	r31, 0x10	; 16
  9e:	8f 9f       	mul	r24, r31
  a0:	c0 01       	movw	r24, r0
  a2:	11 24       	eor	r1, r1
  a4:	8b bb       	out	0x1b, r24	; 27
	PORTA=PORTA&~(1<<0);   //RS=0
  a6:	d8 98       	cbi	0x1b, 0	; 27
	PORTA=PORTA&~(1<<1);   //RW=0
  a8:	d9 98       	cbi	0x1b, 1	; 27
	PORTA=PORTA|(1<<2);    //EN=1
  aa:	da 9a       	sbi	0x1b, 2	; 27
	PORTA=PORTA&~(1<<2);   //EN=0
  ac:	da 98       	cbi	0x1b, 2	; 27
  ae:	8f ec       	ldi	r24, 0xCF	; 207
  b0:	97 e0       	ldi	r25, 0x07	; 7
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <lcd_cmd+0x30>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <lcd_cmd+0x36>
  b8:	00 00       	nop
  ba:	08 95       	ret

000000bc <init>:
	_delay_ms(1);
	}
void init()
{
	DDRA=0xFF;
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	8a bb       	out	0x1a, r24	; 26
	lcd_cmd(0x02);
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_cmd(0x28);
  c6:	88 e2       	ldi	r24, 0x28	; 40
  c8:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_cmd(0x0E);
  cc:	8e e0       	ldi	r24, 0x0E	; 14
  ce:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	//lcd_cmd(0x01);
	//lcd_cmd(0x06);
	lcd_cmd(0x80);
  d2:	80 e8       	ldi	r24, 0x80	; 128
  d4:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
  d8:	08 95       	ret

000000da <lcd_data>:
	}
void lcd_data(char x)
{
	PORTA=x&(0xF0);
  da:	98 2f       	mov	r25, r24
  dc:	90 7f       	andi	r25, 0xF0	; 240
  de:	9b bb       	out	0x1b, r25	; 27
	PORTA=PORTA|(1<<0);    //RS=1
  e0:	d8 9a       	sbi	0x1b, 0	; 27
	PORTA=PORTA&~(1<<1);   //RW=0
  e2:	d9 98       	cbi	0x1b, 1	; 27
	PORTA=PORTA|(1<<2);    //EN=1
  e4:	da 9a       	sbi	0x1b, 2	; 27
	PORTA=PORTA&~(1<<2);   //EN=0
  e6:	da 98       	cbi	0x1b, 2	; 27
  e8:	ef ec       	ldi	r30, 0xCF	; 207
  ea:	f7 e0       	ldi	r31, 0x07	; 7
  ec:	31 97       	sbiw	r30, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <lcd_data+0x12>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <lcd_data+0x18>
  f2:	00 00       	nop
	_delay_ms(1);
	//lcd_data(x<<4);
	PORTA=(x<<4)&(0xF0);
  f4:	f0 e1       	ldi	r31, 0x10	; 16
  f6:	8f 9f       	mul	r24, r31
  f8:	c0 01       	movw	r24, r0
  fa:	11 24       	eor	r1, r1
  fc:	8b bb       	out	0x1b, r24	; 27
	PORTA=PORTA|(1<<0);    //RS=1
  fe:	d8 9a       	sbi	0x1b, 0	; 27
	PORTA=PORTA&~(1<<1);   //RW=0
 100:	d9 98       	cbi	0x1b, 1	; 27
	PORTA=PORTA|(1<<2);    //EN=1
 102:	da 9a       	sbi	0x1b, 2	; 27
	PORTA=PORTA&~(1<<2);
 104:	da 98       	cbi	0x1b, 2	; 27
 106:	8f ec       	ldi	r24, 0xCF	; 207
 108:	97 e0       	ldi	r25, 0x07	; 7
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <lcd_data+0x30>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <lcd_data+0x36>
 110:	00 00       	nop
 112:	08 95       	ret

00000114 <display>:
	_delay_ms(1);
}
void display()
{
 114:	0f 93       	push	r16
 116:	1f 93       	push	r17
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62
 120:	2a 97       	sbiw	r28, 0x0a	; 10
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	f8 94       	cli
 126:	de bf       	out	0x3e, r29	; 62
 128:	0f be       	out	0x3f, r0	; 63
 12a:	cd bf       	out	0x3d, r28	; 61
	lcd_cmd(0x80);
 12c:	80 e8       	ldi	r24, 0x80	; 128
 12e:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	char a[]="Hello God";
 132:	8a e0       	ldi	r24, 0x0A	; 10
 134:	e0 e6       	ldi	r30, 0x60	; 96
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	de 01       	movw	r26, r28
 13a:	11 96       	adiw	r26, 0x01	; 1
 13c:	01 90       	ld	r0, Z+
 13e:	0d 92       	st	X+, r0
 140:	8a 95       	dec	r24
 142:	e1 f7       	brne	.-8      	; 0x13c <display+0x28>
	for(int i=0;a[i]!='\0';i++)
 144:	89 81       	ldd	r24, Y+1	; 0x01
 146:	88 23       	and	r24, r24
 148:	99 f0       	breq	.+38     	; 0x170 <display+0x5c>
 14a:	8e 01       	movw	r16, r28
 14c:	0e 5f       	subi	r16, 0xFE	; 254
 14e:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		lcd_data(a[i]);
 150:	0e 94 6d 00 	call	0xda	; 0xda <lcd_data>
 154:	2f ef       	ldi	r18, 0xFF	; 255
 156:	82 e5       	ldi	r24, 0x52	; 82
 158:	97 e0       	ldi	r25, 0x07	; 7
 15a:	21 50       	subi	r18, 0x01	; 1
 15c:	80 40       	sbci	r24, 0x00	; 0
 15e:	90 40       	sbci	r25, 0x00	; 0
 160:	e1 f7       	brne	.-8      	; 0x15a <display+0x46>
 162:	00 c0       	rjmp	.+0      	; 0x164 <display+0x50>
 164:	00 00       	nop
}
void display()
{
	lcd_cmd(0x80);
	char a[]="Hello God";
	for(int i=0;a[i]!='\0';i++)
 166:	f8 01       	movw	r30, r16
 168:	81 91       	ld	r24, Z+
 16a:	8f 01       	movw	r16, r30
 16c:	81 11       	cpse	r24, r1
 16e:	f0 cf       	rjmp	.-32     	; 0x150 <display+0x3c>
		lcd_data(a[i]);
		//lcd_cmd(0x06);
		_delay_ms(300);
	}
	
}
 170:	2a 96       	adiw	r28, 0x0a	; 10
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	f8 94       	cli
 176:	de bf       	out	0x3e, r29	; 62
 178:	0f be       	out	0x3f, r0	; 63
 17a:	cd bf       	out	0x3d, r28	; 61
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	1f 91       	pop	r17
 182:	0f 91       	pop	r16
 184:	08 95       	ret

00000186 <main>:
void main()
{
	init();
 186:	0e 94 5e 00 	call	0xbc	; 0xbc <init>
	while(1)
	{
	 display();
 18a:	0e 94 8a 00 	call	0x114	; 0x114 <display>
	 lcd_cmd(0x01);
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 194:	fa cf       	rjmp	.-12     	; 0x18a <main+0x4>

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
