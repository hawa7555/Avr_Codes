
Password_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  000003a4  00000438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800088  00800088  00000460  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000490  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b18  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000066f  00000000  00000000  00001044  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000053e  00000000  00000000  000016b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000394  00000000  00000000  00001cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000266  00000000  00000000  00002048  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000022ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ea       	ldi	r30, 0xA4	; 164
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e8       	ldi	r26, 0x88	; 136
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 38       	cpi	r26, 0x8F	; 143
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 be 01 	call	0x37c	; 0x37c <main>
  8a:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_cmd_enable>:
	lcd_cmd_enable();
}

void lcd_cmd_enable()
{
	PORTC=PORTC&~(1<<0);   //RS=0
  92:	a8 98       	cbi	0x15, 0	; 21
	PORTC=PORTC&~(1<<1);   //RW=0
  94:	a9 98       	cbi	0x15, 1	; 21
	PORTC=PORTC|(1<<2);    //EN=1
  96:	aa 9a       	sbi	0x15, 2	; 21
	PORTC=PORTC&~(1<<2);   //EN=0
  98:	aa 98       	cbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	8f ec       	ldi	r24, 0xCF	; 207
  9c:	97 e0       	ldi	r25, 0x07	; 7
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <lcd_cmd_enable+0xc>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <lcd_cmd_enable+0x12>
  a4:	00 00       	nop
  a6:	08 95       	ret

000000a8 <lcd_cmd>:
		lcd_display("*");
	}*/
}

void lcd_cmd(char x)
{
  a8:	cf 93       	push	r28
  aa:	c8 2f       	mov	r28, r24
	PORTC=x&(0xF0);
  ac:	80 7f       	andi	r24, 0xF0	; 240
  ae:	85 bb       	out	0x15, r24	; 21
	lcd_cmd_enable();
  b0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd_enable>
	PORTC=(x<<4)&(0xF0);
  b4:	20 e1       	ldi	r18, 0x10	; 16
  b6:	c2 9f       	mul	r28, r18
  b8:	c0 01       	movw	r24, r0
  ba:	11 24       	eor	r1, r1
  bc:	85 bb       	out	0x15, r24	; 21
	lcd_cmd_enable();
  be:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd_enable>
}
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <init>:
	_delay_ms(1);
}

void init()
{
	DDRC=0xFF;
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	84 bb       	out	0x14, r24	; 20
	lcd_cmd(0x02);
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
	lcd_cmd(0x28);
  d0:	88 e2       	ldi	r24, 0x28	; 40
  d2:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
	lcd_cmd(0x0E);
  d6:	8e e0       	ldi	r24, 0x0E	; 14
  d8:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
	//lcd_cmd(0x01);
	//lcd_cmd(0x06);
	lcd_cmd(0x80);
  dc:	80 e8       	ldi	r24, 0x80	; 128
  de:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
  e2:	08 95       	ret

000000e4 <lcd_data_enable>:
	lcd_data_enable();
}

void lcd_data_enable()
{
	PORTC=PORTC|(1<<0);    //RS=1
  e4:	a8 9a       	sbi	0x15, 0	; 21
	PORTC=PORTC&~(1<<1);   //RW=0
  e6:	a9 98       	cbi	0x15, 1	; 21
	PORTC=PORTC|(1<<2);    //EN=1
  e8:	aa 9a       	sbi	0x15, 2	; 21
	PORTC=PORTC&~(1<<2);   //EN=0
  ea:	aa 98       	cbi	0x15, 2	; 21
  ec:	8f ec       	ldi	r24, 0xCF	; 207
  ee:	97 e0       	ldi	r25, 0x07	; 7
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <lcd_data_enable+0xc>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <lcd_data_enable+0x12>
  f6:	00 00       	nop
  f8:	08 95       	ret

000000fa <lcd_data>:
	//lcd_cmd(0x06);
	lcd_cmd(0x80);
}

void lcd_data(char x)
{
  fa:	cf 93       	push	r28
  fc:	c8 2f       	mov	r28, r24
	PORTC=x&(0xF0);
  fe:	80 7f       	andi	r24, 0xF0	; 240
 100:	85 bb       	out	0x15, r24	; 21
	lcd_data_enable();
 102:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_data_enable>
	PORTC=(x<<4)&(0xF0);
 106:	20 e1       	ldi	r18, 0x10	; 16
 108:	c2 9f       	mul	r28, r18
 10a:	c0 01       	movw	r24, r0
 10c:	11 24       	eor	r1, r1
 10e:	85 bb       	out	0x15, r24	; 21
	lcd_data_enable();
 110:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_data_enable>
}
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <lcd_display>:
	PORTC=PORTC&~(1<<2);   //EN=0
	_delay_ms(1);
}

void lcd_display(char x[])
{
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	ec 01       	movw	r28, r24
	for(int j=0;x[j]!='\0';j++)
 11e:	88 81       	ld	r24, Y
 120:	88 23       	and	r24, r24
 122:	79 f0       	breq	.+30     	; 0x142 <lcd_display+0x2a>
 124:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_data(x[j]);
 126:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_data>
 12a:	2f e7       	ldi	r18, 0x7F	; 127
 12c:	88 e3       	ldi	r24, 0x38	; 56
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	21 50       	subi	r18, 0x01	; 1
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <lcd_display+0x18>
 138:	00 c0       	rjmp	.+0      	; 0x13a <lcd_display+0x22>
 13a:	00 00       	nop
	_delay_ms(1);
}

void lcd_display(char x[])
{
	for(int j=0;x[j]!='\0';j++)
 13c:	89 91       	ld	r24, Y+
 13e:	81 11       	cpse	r24, r1
 140:	f2 cf       	rjmp	.-28     	; 0x126 <lcd_display+0xe>
	{
		lcd_data(x[j]);
		//_delay_ms(300);
		_delay_ms(50);
	}
}
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <keypad>:

void keypad()
{
	//static int i=0;
	//char a[4];
	PORTA=PORTA&~(1<<col0);
 148:	dc 98       	cbi	0x1b, 4	; 27
	PORTA=PORTA|(1<<col1)|(1<<col2)|(1<<col3);
 14a:	8b b3       	in	r24, 0x1b	; 27
 14c:	80 6e       	ori	r24, 0xE0	; 224
 14e:	8b bb       	out	0x1b, r24	; 27
	if( (PINA&(1<<row0))==0 )
 150:	c8 99       	sbic	0x19, 0	; 25
 152:	16 c0       	rjmp	.+44     	; 0x180 <keypad+0x38>
	{
		lcd_cmd(0x01);
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
		lcd_display("*");
 15a:	80 e6       	ldi	r24, 0x60	; 96
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
	    a[i]=7;
 162:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 166:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 16a:	fc 01       	movw	r30, r24
 16c:	e6 57       	subi	r30, 0x76	; 118
 16e:	ff 4f       	sbci	r31, 0xFF	; 255
 170:	27 e0       	ldi	r18, 0x07	; 7
 172:	20 83       	st	Z, r18
		i++;
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
 17a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
		return;
 17e:	08 95       	ret
	}
	
	else if( (PINA&(1<<row1))==0 )
 180:	c9 99       	sbic	0x19, 1	; 25
 182:	16 c0       	rjmp	.+44     	; 0x1b0 <keypad+0x68>
	{
		lcd_cmd(0x01);
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
		lcd_display("*");
 18a:	80 e6       	ldi	r24, 0x60	; 96
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
		a[i]=4;
 192:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 196:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 19a:	fc 01       	movw	r30, r24
 19c:	e6 57       	subi	r30, 0x76	; 118
 19e:	ff 4f       	sbci	r31, 0xFF	; 255
 1a0:	24 e0       	ldi	r18, 0x04	; 4
 1a2:	20 83       	st	Z, r18
		i++;
 1a4:	01 96       	adiw	r24, 0x01	; 1
 1a6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
 1aa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
		return;
 1ae:	08 95       	ret
	}
	
	else if( (PINA&(1<<row2))==0 )
 1b0:	ca 99       	sbic	0x19, 2	; 25
 1b2:	16 c0       	rjmp	.+44     	; 0x1e0 <keypad+0x98>
	{
		lcd_cmd(0x01);
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
		lcd_display("*");
 1ba:	80 e6       	ldi	r24, 0x60	; 96
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
		a[i]=1;
 1c2:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 1c6:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 1ca:	fc 01       	movw	r30, r24
 1cc:	e6 57       	subi	r30, 0x76	; 118
 1ce:	ff 4f       	sbci	r31, 0xFF	; 255
 1d0:	21 e0       	ldi	r18, 0x01	; 1
 1d2:	20 83       	st	Z, r18
		i++;
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
 1da:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
		return;
 1de:	08 95       	ret
	}
	


	PORTA=PORTA&~(1<<col1);
 1e0:	dd 98       	cbi	0x1b, 5	; 27
	PORTA=PORTA|(1<<col0)|(1<<col2)|(1<<col3);
 1e2:	8b b3       	in	r24, 0x1b	; 27
 1e4:	80 6d       	ori	r24, 0xD0	; 208
 1e6:	8b bb       	out	0x1b, r24	; 27
	
	if( (PINA&(1<<row0))==0 )
 1e8:	c8 99       	sbic	0x19, 0	; 25
 1ea:	16 c0       	rjmp	.+44     	; 0x218 <keypad+0xd0>
	{
		lcd_cmd(0x01);
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
		lcd_display("*");
 1f2:	80 e6       	ldi	r24, 0x60	; 96
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
		a[i]=8;
 1fa:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 1fe:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 202:	fc 01       	movw	r30, r24
 204:	e6 57       	subi	r30, 0x76	; 118
 206:	ff 4f       	sbci	r31, 0xFF	; 255
 208:	28 e0       	ldi	r18, 0x08	; 8
 20a:	20 83       	st	Z, r18
		i++;
 20c:	01 96       	adiw	r24, 0x01	; 1
 20e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
 212:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
		return;
 216:	08 95       	ret
	}
	
	else if( (PINA&(1<<row1))==0 )
 218:	c9 99       	sbic	0x19, 1	; 25
 21a:	16 c0       	rjmp	.+44     	; 0x248 <keypad+0x100>
	{
		lcd_cmd(0x01);
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
		lcd_display("*");
 222:	80 e6       	ldi	r24, 0x60	; 96
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
	    a[i]=5;
 22a:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 22e:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 232:	fc 01       	movw	r30, r24
 234:	e6 57       	subi	r30, 0x76	; 118
 236:	ff 4f       	sbci	r31, 0xFF	; 255
 238:	25 e0       	ldi	r18, 0x05	; 5
 23a:	20 83       	st	Z, r18
	    i++;
 23c:	01 96       	adiw	r24, 0x01	; 1
 23e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
 242:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
		return;
 246:	08 95       	ret
	}
	
	else if( (PINA&(1<<row2))==0 )
 248:	ca 99       	sbic	0x19, 2	; 25
 24a:	16 c0       	rjmp	.+44     	; 0x278 <keypad+0x130>
	{
		lcd_cmd(0x01);
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
		lcd_display("*");
 252:	80 e6       	ldi	r24, 0x60	; 96
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
		a[i]=2;
 25a:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 25e:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 262:	fc 01       	movw	r30, r24
 264:	e6 57       	subi	r30, 0x76	; 118
 266:	ff 4f       	sbci	r31, 0xFF	; 255
 268:	22 e0       	ldi	r18, 0x02	; 2
 26a:	20 83       	st	Z, r18
		i++;
 26c:	01 96       	adiw	r24, 0x01	; 1
 26e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
 272:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
		return;
 276:	08 95       	ret
	}
	
		
	PORTA=PORTA&~(1<<col2);
 278:	de 98       	cbi	0x1b, 6	; 27
	PORTA=PORTA|(1<<col0)|(1<<col1)|(1<<col3);
 27a:	8b b3       	in	r24, 0x1b	; 27
 27c:	80 6b       	ori	r24, 0xB0	; 176
 27e:	8b bb       	out	0x1b, r24	; 27
	
	if( (PINA&(1<<row0))==0 )
 280:	c8 99       	sbic	0x19, 0	; 25
 282:	16 c0       	rjmp	.+44     	; 0x2b0 <keypad+0x168>
	{
		lcd_cmd(0x01);
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
		lcd_display("*");
 28a:	80 e6       	ldi	r24, 0x60	; 96
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
		a[i]=9;
 292:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 296:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 29a:	fc 01       	movw	r30, r24
 29c:	e6 57       	subi	r30, 0x76	; 118
 29e:	ff 4f       	sbci	r31, 0xFF	; 255
 2a0:	29 e0       	ldi	r18, 0x09	; 9
 2a2:	20 83       	st	Z, r18
		i++;
 2a4:	01 96       	adiw	r24, 0x01	; 1
 2a6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
 2aa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
		return;
 2ae:	08 95       	ret
	}
	
	else if( (PINA&(1<<row1))==0 )
 2b0:	c9 99       	sbic	0x19, 1	; 25
 2b2:	16 c0       	rjmp	.+44     	; 0x2e0 <keypad+0x198>
	{
		lcd_cmd(0x01);
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
		lcd_display("*");
 2ba:	80 e6       	ldi	r24, 0x60	; 96
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
		a[i]=6;
 2c2:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 2c6:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 2ca:	fc 01       	movw	r30, r24
 2cc:	e6 57       	subi	r30, 0x76	; 118
 2ce:	ff 4f       	sbci	r31, 0xFF	; 255
 2d0:	26 e0       	ldi	r18, 0x06	; 6
 2d2:	20 83       	st	Z, r18
		i++;
 2d4:	01 96       	adiw	r24, 0x01	; 1
 2d6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
 2da:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
		return;
 2de:	08 95       	ret
	}
	
	else if( (PINA&(1<<row2))==0 )
 2e0:	ca 99       	sbic	0x19, 2	; 25
 2e2:	15 c0       	rjmp	.+42     	; 0x30e <keypad+0x1c6>
	{
		lcd_cmd(0x01);
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
		lcd_display("*");
 2ea:	80 e6       	ldi	r24, 0x60	; 96
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
		a[i]=3;
 2f2:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 2f6:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 2fa:	fc 01       	movw	r30, r24
 2fc:	e6 57       	subi	r30, 0x76	; 118
 2fe:	ff 4f       	sbci	r31, 0xFF	; 255
 300:	23 e0       	ldi	r18, 0x03	; 3
 302:	20 83       	st	Z, r18
		i++;
 304:	01 96       	adiw	r24, 0x01	; 1
 306:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
 30a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
 30e:	08 95       	ret

00000310 <password>:
	}
}

void password()
{
	lcd_display("Enter password");
 310:	82 e6       	ldi	r24, 0x62	; 98
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
  do{
	  keypad();
 318:	0e 94 a4 00 	call	0x148	; 0x148 <keypad>
	}while(i<5);
 31c:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 320:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 324:	85 30       	cpi	r24, 0x05	; 5
 326:	91 05       	cpc	r25, r1
 328:	bc f3       	brlt	.-18     	; 0x318 <password+0x8>
   
   a[i]='\0';
 32a:	fc 01       	movw	r30, r24
 32c:	e6 57       	subi	r30, 0x76	; 118
 32e:	ff 4f       	sbci	r31, 0xFF	; 255
 330:	10 82       	st	Z, r1
   i=0;
 332:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__data_end+0x1>
 336:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__data_end>
   
   if(strcmp(a,"1234")==0)
 33a:	61 e7       	ldi	r22, 0x71	; 113
 33c:	70 e0       	ldi	r23, 0x00	; 0
 33e:	8a e8       	ldi	r24, 0x8A	; 138
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 c7 01 	call	0x38e	; 0x38e <strcmp>
 346:	89 2b       	or	r24, r25
 348:	29 f4       	brne	.+10     	; 0x354 <password+0x44>
   {
	   lcd_display("Welcome");
 34a:	86 e7       	ldi	r24, 0x76	; 118
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
 352:	08 95       	ret
	   
   }
   else
   {
	   lcd_display("try again");
 354:	8e e7       	ldi	r24, 0x7E	; 126
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
	   lcd_display(a);
 35c:	8a e8       	ldi	r24, 0x8A	; 138
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
 364:	2f ef       	ldi	r18, 0xFF	; 255
 366:	84 e3       	ldi	r24, 0x34	; 52
 368:	9c e0       	ldi	r25, 0x0C	; 12
 36a:	21 50       	subi	r18, 0x01	; 1
 36c:	80 40       	sbci	r24, 0x00	; 0
 36e:	90 40       	sbci	r25, 0x00	; 0
 370:	e1 f7       	brne	.-8      	; 0x36a <password+0x5a>
 372:	00 c0       	rjmp	.+0      	; 0x374 <password+0x64>
 374:	00 00       	nop
	   _delay_ms(500);
	   password();
 376:	0e 94 88 01 	call	0x310	; 0x310 <password>
 37a:	08 95       	ret

0000037c <main>:
   }
 }

void main()
{
	PORTA=0x0F;      //just pull up activation
 37c:	8f e0       	ldi	r24, 0x0F	; 15
 37e:	8b bb       	out	0x1b, r24	; 27
	DDRA=0xF0;
 380:	80 ef       	ldi	r24, 0xF0	; 240
 382:	8a bb       	out	0x1a, r24	; 26
	init();
 384:	0e 94 63 00 	call	0xc6	; 0xc6 <init>
	while(1)
	{
	 password();
 388:	0e 94 88 01 	call	0x310	; 0x310 <password>
 38c:	fd cf       	rjmp	.-6      	; 0x388 <main+0xc>

0000038e <strcmp>:
 38e:	fb 01       	movw	r30, r22
 390:	dc 01       	movw	r26, r24
 392:	8d 91       	ld	r24, X+
 394:	01 90       	ld	r0, Z+
 396:	80 19       	sub	r24, r0
 398:	01 10       	cpse	r0, r1
 39a:	d9 f3       	breq	.-10     	; 0x392 <strcmp+0x4>
 39c:	99 0b       	sbc	r25, r25
 39e:	08 95       	ret

000003a0 <_exit>:
 3a0:	f8 94       	cli

000003a2 <__stop_program>:
 3a2:	ff cf       	rjmp	.-2      	; 0x3a2 <__stop_program>
