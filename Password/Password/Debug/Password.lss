
Password.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000398  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00000398  0000042c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800088  00800088  00000454  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000484  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000afb  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000067e  00000000  00000000  0000101b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000508  00000000  00000000  00001699  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001ba4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000390  00000000  00000000  00001c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000266  00000000  00000000  00001ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000225a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e9       	ldi	r30, 0x98	; 152
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e8       	ldi	r26, 0x88	; 136
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 38       	cpi	r26, 0x8F	; 143
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b8 01 	call	0x370	; 0x370 <main>
  8a:	0c 94 ca 01 	jmp	0x394	; 0x394 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_cmd_enable>:
	lcd_cmd_enable();
}

void lcd_cmd_enable()
{
	PORTC=PORTC&~(1<<0);   //RS=0
  92:	a8 98       	cbi	0x15, 0	; 21
	PORTC=PORTC&~(1<<1);   //RW=0
  94:	a9 98       	cbi	0x15, 1	; 21
	PORTC=PORTC|(1<<2);    //EN=1
  96:	aa 9a       	sbi	0x15, 2	; 21
	PORTC=PORTC&~(1<<2);   //EN=0
  98:	aa 98       	cbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	8f ec       	ldi	r24, 0xCF	; 207
  9c:	97 e0       	ldi	r25, 0x07	; 7
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <lcd_cmd_enable+0xc>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <lcd_cmd_enable+0x12>
  a4:	00 00       	nop
  a6:	08 95       	ret

000000a8 <lcd_cmd>:
		lcd_display("*");
	}*/
}

void lcd_cmd(char x)
{
  a8:	cf 93       	push	r28
  aa:	c8 2f       	mov	r28, r24
	PORTC=x&(0xF0);
  ac:	80 7f       	andi	r24, 0xF0	; 240
  ae:	85 bb       	out	0x15, r24	; 21
	lcd_cmd_enable();
  b0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd_enable>
	PORTC=(x<<4)&(0xF0);
  b4:	20 e1       	ldi	r18, 0x10	; 16
  b6:	c2 9f       	mul	r28, r18
  b8:	c0 01       	movw	r24, r0
  ba:	11 24       	eor	r1, r1
  bc:	85 bb       	out	0x15, r24	; 21
	lcd_cmd_enable();
  be:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd_enable>
}
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <init>:
	_delay_ms(1);
}

void init()
{
	DDRC=0xFF;
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	84 bb       	out	0x14, r24	; 20
	lcd_cmd(0x02);
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
	lcd_cmd(0x28);
  d0:	88 e2       	ldi	r24, 0x28	; 40
  d2:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
	lcd_cmd(0x0E);
  d6:	8e e0       	ldi	r24, 0x0E	; 14
  d8:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
	//lcd_cmd(0x01);
	//lcd_cmd(0x06);
	lcd_cmd(0x80);
  dc:	80 e8       	ldi	r24, 0x80	; 128
  de:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
  e2:	08 95       	ret

000000e4 <lcd_data_enable>:
	lcd_data_enable();
}

void lcd_data_enable()
{
	PORTC=PORTC|(1<<0);    //RS=1
  e4:	a8 9a       	sbi	0x15, 0	; 21
	PORTC=PORTC&~(1<<1);   //RW=0
  e6:	a9 98       	cbi	0x15, 1	; 21
	PORTC=PORTC|(1<<2);    //EN=1
  e8:	aa 9a       	sbi	0x15, 2	; 21
	PORTC=PORTC&~(1<<2);   //EN=0
  ea:	aa 98       	cbi	0x15, 2	; 21
  ec:	8f ec       	ldi	r24, 0xCF	; 207
  ee:	97 e0       	ldi	r25, 0x07	; 7
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <lcd_data_enable+0xc>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <lcd_data_enable+0x12>
  f6:	00 00       	nop
  f8:	08 95       	ret

000000fa <lcd_data>:
	//lcd_cmd(0x06);
	lcd_cmd(0x80);
}

void lcd_data(char x)
{
  fa:	cf 93       	push	r28
  fc:	c8 2f       	mov	r28, r24
	PORTC=x&(0xF0);
  fe:	80 7f       	andi	r24, 0xF0	; 240
 100:	85 bb       	out	0x15, r24	; 21
	lcd_data_enable();
 102:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_data_enable>
	PORTC=(x<<4)&(0xF0);
 106:	20 e1       	ldi	r18, 0x10	; 16
 108:	c2 9f       	mul	r28, r18
 10a:	c0 01       	movw	r24, r0
 10c:	11 24       	eor	r1, r1
 10e:	85 bb       	out	0x15, r24	; 21
	lcd_data_enable();
 110:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_data_enable>
}
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <lcd_display>:
	PORTC=PORTC&~(1<<2);   //EN=0
	_delay_ms(1);
}

void lcd_display(char a[])
{
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	ec 01       	movw	r28, r24
	for(int i=0;a[i]!='\0';i++)
 11e:	88 81       	ld	r24, Y
 120:	88 23       	and	r24, r24
 122:	79 f0       	breq	.+30     	; 0x142 <lcd_display+0x2a>
 124:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_data(a[i]);
 126:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_data>
 12a:	2f e7       	ldi	r18, 0x7F	; 127
 12c:	88 e3       	ldi	r24, 0x38	; 56
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	21 50       	subi	r18, 0x01	; 1
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <lcd_display+0x18>
 138:	00 c0       	rjmp	.+0      	; 0x13a <lcd_display+0x22>
 13a:	00 00       	nop
	_delay_ms(1);
}

void lcd_display(char a[])
{
	for(int i=0;a[i]!='\0';i++)
 13c:	89 91       	ld	r24, Y+
 13e:	81 11       	cpse	r24, r1
 140:	f2 cf       	rjmp	.-28     	; 0x126 <lcd_display+0xe>
	{
		lcd_data(a[i]);
		//_delay_ms(300);
		_delay_ms(50);
	}
}
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <keypad>:

void keypad()
{
	//static int i=0;
	//char a[4];
	PORTA=PORTA&~(1<<col0);
 148:	dc 98       	cbi	0x1b, 4	; 27
	PORTA=PORTA|(1<<col1)|(1<<col2)|(1<<col3);
 14a:	8b b3       	in	r24, 0x1b	; 27
 14c:	80 6e       	ori	r24, 0xE0	; 224
 14e:	8b bb       	out	0x1b, r24	; 27
	if( (PINA&(1<<row0))==0 )
 150:	c8 99       	sbic	0x19, 0	; 25
 152:	16 c0       	rjmp	.+44     	; 0x180 <keypad+0x38>
	{
		lcd_cmd(0x01);
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
		lcd_display("*");
 15a:	80 e6       	ldi	r24, 0x60	; 96
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
	    a[i]=7;
 162:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 166:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 16a:	fc 01       	movw	r30, r24
 16c:	e6 57       	subi	r30, 0x76	; 118
 16e:	ff 4f       	sbci	r31, 0xFF	; 255
 170:	27 e0       	ldi	r18, 0x07	; 7
 172:	20 83       	st	Z, r18
		i++;
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
 17a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
 17e:	2f c0       	rjmp	.+94     	; 0x1de <keypad+0x96>
	}
	
	else if( (PINA&(1<<row1))==0 )
 180:	c9 99       	sbic	0x19, 1	; 25
 182:	16 c0       	rjmp	.+44     	; 0x1b0 <keypad+0x68>
	{
		lcd_cmd(0x01);
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
		lcd_display("*");
 18a:	80 e6       	ldi	r24, 0x60	; 96
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
		a[i]=4;
 192:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 196:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 19a:	fc 01       	movw	r30, r24
 19c:	e6 57       	subi	r30, 0x76	; 118
 19e:	ff 4f       	sbci	r31, 0xFF	; 255
 1a0:	24 e0       	ldi	r18, 0x04	; 4
 1a2:	20 83       	st	Z, r18
		i++;
 1a4:	01 96       	adiw	r24, 0x01	; 1
 1a6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
 1aa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
 1ae:	17 c0       	rjmp	.+46     	; 0x1de <keypad+0x96>
	}
	
	else if( (PINA&(1<<row2))==0 )
 1b0:	ca 99       	sbic	0x19, 2	; 25
 1b2:	15 c0       	rjmp	.+42     	; 0x1de <keypad+0x96>
	{
		lcd_cmd(0x01);
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
		lcd_display("*");
 1ba:	80 e6       	ldi	r24, 0x60	; 96
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
		a[i]=1;
 1c2:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 1c6:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 1ca:	fc 01       	movw	r30, r24
 1cc:	e6 57       	subi	r30, 0x76	; 118
 1ce:	ff 4f       	sbci	r31, 0xFF	; 255
 1d0:	21 e0       	ldi	r18, 0x01	; 1
 1d2:	20 83       	st	Z, r18
		i++;
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
 1da:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
	}
	


	PORTA=PORTA&~(1<<col1);
 1de:	dd 98       	cbi	0x1b, 5	; 27
	PORTA=PORTA|(1<<col0)|(1<<col2)|(1<<col3);
 1e0:	8b b3       	in	r24, 0x1b	; 27
 1e2:	80 6d       	ori	r24, 0xD0	; 208
 1e4:	8b bb       	out	0x1b, r24	; 27
	
	if( (PINA&(1<<row0))==0 )
 1e6:	c8 99       	sbic	0x19, 0	; 25
 1e8:	16 c0       	rjmp	.+44     	; 0x216 <keypad+0xce>
	{
		lcd_cmd(0x01);
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
		lcd_display("*");
 1f0:	80 e6       	ldi	r24, 0x60	; 96
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
		a[i]=8;
 1f8:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 1fc:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 200:	fc 01       	movw	r30, r24
 202:	e6 57       	subi	r30, 0x76	; 118
 204:	ff 4f       	sbci	r31, 0xFF	; 255
 206:	28 e0       	ldi	r18, 0x08	; 8
 208:	20 83       	st	Z, r18
		i++;
 20a:	01 96       	adiw	r24, 0x01	; 1
 20c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
 210:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
 214:	2f c0       	rjmp	.+94     	; 0x274 <keypad+0x12c>
	}
	
	else if( (PINA&(1<<row1))==0 )
 216:	c9 99       	sbic	0x19, 1	; 25
 218:	16 c0       	rjmp	.+44     	; 0x246 <keypad+0xfe>
	{
		lcd_cmd(0x01);
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
		lcd_display("*");
 220:	80 e6       	ldi	r24, 0x60	; 96
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
	    a[i]=5;
 228:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 22c:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 230:	fc 01       	movw	r30, r24
 232:	e6 57       	subi	r30, 0x76	; 118
 234:	ff 4f       	sbci	r31, 0xFF	; 255
 236:	25 e0       	ldi	r18, 0x05	; 5
 238:	20 83       	st	Z, r18
	    i++;
 23a:	01 96       	adiw	r24, 0x01	; 1
 23c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
 240:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
 244:	17 c0       	rjmp	.+46     	; 0x274 <keypad+0x12c>
	}
	
	else if( (PINA&(1<<row2))==0 )
 246:	ca 99       	sbic	0x19, 2	; 25
 248:	15 c0       	rjmp	.+42     	; 0x274 <keypad+0x12c>
	{
		lcd_cmd(0x01);
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
		lcd_display("*");
 250:	80 e6       	ldi	r24, 0x60	; 96
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
		a[i]=2;
 258:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 25c:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 260:	fc 01       	movw	r30, r24
 262:	e6 57       	subi	r30, 0x76	; 118
 264:	ff 4f       	sbci	r31, 0xFF	; 255
 266:	22 e0       	ldi	r18, 0x02	; 2
 268:	20 83       	st	Z, r18
		i++;
 26a:	01 96       	adiw	r24, 0x01	; 1
 26c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
 270:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
	}
	
		
	PORTA=PORTA&~(1<<col2);
 274:	de 98       	cbi	0x1b, 6	; 27
	PORTA=PORTA|(1<<col0)|(1<<col1)|(1<<col3);
 276:	8b b3       	in	r24, 0x1b	; 27
 278:	80 6b       	ori	r24, 0xB0	; 176
 27a:	8b bb       	out	0x1b, r24	; 27
	
	if( (PINA&(1<<row0))==0 )
 27c:	c8 99       	sbic	0x19, 0	; 25
 27e:	16 c0       	rjmp	.+44     	; 0x2ac <keypad+0x164>
	{
		lcd_cmd(0x01);
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
		lcd_display("*");
 286:	80 e6       	ldi	r24, 0x60	; 96
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
		a[i]=9;
 28e:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 292:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 296:	fc 01       	movw	r30, r24
 298:	e6 57       	subi	r30, 0x76	; 118
 29a:	ff 4f       	sbci	r31, 0xFF	; 255
 29c:	29 e0       	ldi	r18, 0x09	; 9
 29e:	20 83       	st	Z, r18
		i++;
 2a0:	01 96       	adiw	r24, 0x01	; 1
 2a2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
 2a6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
 2aa:	08 95       	ret
	}
	
	else if( (PINA&(1<<row1))==0 )
 2ac:	c9 99       	sbic	0x19, 1	; 25
 2ae:	16 c0       	rjmp	.+44     	; 0x2dc <keypad+0x194>
	{
		lcd_cmd(0x01);
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
		lcd_display("*");
 2b6:	80 e6       	ldi	r24, 0x60	; 96
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
		a[i]=6;
 2be:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 2c2:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 2c6:	fc 01       	movw	r30, r24
 2c8:	e6 57       	subi	r30, 0x76	; 118
 2ca:	ff 4f       	sbci	r31, 0xFF	; 255
 2cc:	26 e0       	ldi	r18, 0x06	; 6
 2ce:	20 83       	st	Z, r18
		i++;
 2d0:	01 96       	adiw	r24, 0x01	; 1
 2d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
 2d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
 2da:	08 95       	ret
	}
	
	else if( (PINA&(1<<row2))==0 )
 2dc:	ca 99       	sbic	0x19, 2	; 25
 2de:	15 c0       	rjmp	.+42     	; 0x30a <keypad+0x1c2>
	{
		lcd_cmd(0x01);
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
		lcd_display("*");
 2e6:	80 e6       	ldi	r24, 0x60	; 96
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
		a[i]=3;
 2ee:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 2f2:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 2f6:	fc 01       	movw	r30, r24
 2f8:	e6 57       	subi	r30, 0x76	; 118
 2fa:	ff 4f       	sbci	r31, 0xFF	; 255
 2fc:	23 e0       	ldi	r18, 0x03	; 3
 2fe:	20 83       	st	Z, r18
		i++;
 300:	01 96       	adiw	r24, 0x01	; 1
 302:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
 306:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
 30a:	08 95       	ret

0000030c <password>:
	}
}

void password()
{
	lcd_display("Enter password");
 30c:	82 e6       	ldi	r24, 0x62	; 98
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
	do
	{
	  keypad();
 314:	0e 94 a4 00 	call	0x148	; 0x148 <keypad>
	}while(i<5);
 318:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 31c:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 320:	85 30       	cpi	r24, 0x05	; 5
 322:	91 05       	cpc	r25, r1
 324:	bc f3       	brlt	.-18     	; 0x314 <password+0x8>
   
   a[++i]='\0';
 326:	fc 01       	movw	r30, r24
 328:	e6 57       	subi	r30, 0x76	; 118
 32a:	ff 4f       	sbci	r31, 0xFF	; 255
 32c:	11 82       	std	Z+1, r1	; 0x01
   i=0;
 32e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__data_end+0x1>
 332:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__data_end>
   
   if(strcmp(a,"1234")==0)
 336:	61 e7       	ldi	r22, 0x71	; 113
 338:	70 e0       	ldi	r23, 0x00	; 0
 33a:	8a e8       	ldi	r24, 0x8A	; 138
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	0e 94 c1 01 	call	0x382	; 0x382 <strcmp>
 342:	89 2b       	or	r24, r25
 344:	29 f4       	brne	.+10     	; 0x350 <password+0x44>
   {
	   lcd_display("Welcome");
 346:	86 e7       	ldi	r24, 0x76	; 118
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
 34e:	08 95       	ret
	   
   }
   else
   {
	   lcd_display("try again");
 350:	8e e7       	ldi	r24, 0x7E	; 126
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
 358:	2f ef       	ldi	r18, 0xFF	; 255
 35a:	84 e3       	ldi	r24, 0x34	; 52
 35c:	9c e0       	ldi	r25, 0x0C	; 12
 35e:	21 50       	subi	r18, 0x01	; 1
 360:	80 40       	sbci	r24, 0x00	; 0
 362:	90 40       	sbci	r25, 0x00	; 0
 364:	e1 f7       	brne	.-8      	; 0x35e <password+0x52>
 366:	00 c0       	rjmp	.+0      	; 0x368 <password+0x5c>
 368:	00 00       	nop
	   _delay_ms(500);
	   password();
 36a:	0e 94 86 01 	call	0x30c	; 0x30c <password>
 36e:	08 95       	ret

00000370 <main>:
   }
 }

void main()
{
	PORTA=0x0F;      //just pull up activation
 370:	8f e0       	ldi	r24, 0x0F	; 15
 372:	8b bb       	out	0x1b, r24	; 27
	DDRA=0xF0;
 374:	80 ef       	ldi	r24, 0xF0	; 240
 376:	8a bb       	out	0x1a, r24	; 26
	init();
 378:	0e 94 63 00 	call	0xc6	; 0xc6 <init>
	while(1)
	{
	 password();
 37c:	0e 94 86 01 	call	0x30c	; 0x30c <password>
 380:	fd cf       	rjmp	.-6      	; 0x37c <main+0xc>

00000382 <strcmp>:
 382:	fb 01       	movw	r30, r22
 384:	dc 01       	movw	r26, r24
 386:	8d 91       	ld	r24, X+
 388:	01 90       	ld	r0, Z+
 38a:	80 19       	sub	r24, r0
 38c:	01 10       	cpse	r0, r1
 38e:	d9 f3       	breq	.-10     	; 0x386 <strcmp+0x4>
 390:	99 0b       	sbc	r25, r25
 392:	08 95       	ret

00000394 <_exit>:
 394:	f8 94       	cli

00000396 <__stop_program>:
 396:	ff cf       	rjmp	.-2      	; 0x396 <__stop_program>
