
Lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006cd  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000060c  00000000  00000000  00000875  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000285  00000000  00000000  00000e81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001108  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000332  00000000  00000000  0000114c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000067  00000000  00000000  0000147e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000014e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 57 00 	call	0xae	; 0xae <main>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <lcd_cmd>:
#include <avr/io.h>
#include <util/delay.h>
 
void lcd_cmd(char x)
  { 
	 PORTA=x;
  6c:	8b bb       	out	0x1b, r24	; 27
	 PORTB=PORTB&~(1<<0);  //RS=0
  6e:	c0 98       	cbi	0x18, 0	; 24
	 PORTB=PORTB&~(1<<1);  //RW=0
  70:	c1 98       	cbi	0x18, 1	; 24
	 PORTB=PORTB|(1<<2);   //EN=1
  72:	c2 9a       	sbi	0x18, 2	; 24
	 PORTB=PORTB&~(1<<2);  //EN=0
  74:	c2 98       	cbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  76:	2f ef       	ldi	r18, 0xFF	; 255
  78:	89 e6       	ldi	r24, 0x69	; 105
  7a:	98 e1       	ldi	r25, 0x18	; 24
  7c:	21 50       	subi	r18, 0x01	; 1
  7e:	80 40       	sbci	r24, 0x00	; 0
  80:	90 40       	sbci	r25, 0x00	; 0
  82:	e1 f7       	brne	.-8      	; 0x7c <lcd_cmd+0x10>
  84:	00 c0       	rjmp	.+0      	; 0x86 <lcd_cmd+0x1a>
  86:	00 00       	nop
  88:	08 95       	ret

0000008a <init>:
	 _delay_ms(1000);
   }
void init()
  {
	DDRA=0xFF;
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	8a bb       	out	0x1a, r24	; 26
	DDRB=DDRB|7;
  8e:	87 b3       	in	r24, 0x17	; 23
  90:	87 60       	ori	r24, 0x07	; 7
  92:	87 bb       	out	0x17, r24	; 23
	lcd_cmd(0x38);
  94:	88 e3       	ldi	r24, 0x38	; 56
  96:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
	lcd_cmd(0x0E);
  9a:	8e e0       	ldi	r24, 0x0E	; 14
  9c:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
	lcd_cmd(0x01);
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
	lcd_cmd(0x80);
  a6:	80 e8       	ldi	r24, 0x80	; 128
  a8:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
  ac:	08 95       	ret

000000ae <main>:
	
   }
void main()
{
	init();
  ae:	0e 94 45 00 	call	0x8a	; 0x8a <init>
  b2:	08 95       	ret

000000b4 <_exit>:
  b4:	f8 94       	cli

000000b6 <__stop_program>:
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <__stop_program>
