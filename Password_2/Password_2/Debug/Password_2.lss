
Password_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  000003c2  00000456  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080008e  0080008e  00000484  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b6c  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000067e  00000000  00000000  000010bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000053e  00000000  00000000  0000173a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001c78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000394  00000000  00000000  00001d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002f6  00000000  00000000  000020cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000023c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ec       	ldi	r30, 0xC2	; 194
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 38       	cpi	r26, 0x8E	; 142
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e8       	ldi	r26, 0x8E	; 142
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 39       	cpi	r26, 0x95	; 149
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 cd 01 	call	0x39a	; 0x39a <main>
  8a:	0c 94 df 01 	jmp	0x3be	; 0x3be <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_cmd_enable>:
	lcd_cmd_enable();
}

void lcd_cmd_enable()
{
	PORTC=PORTC&~(1<<0);   //RS=0
  92:	a8 98       	cbi	0x15, 0	; 21
	PORTC=PORTC&~(1<<1);   //RW=0
  94:	a9 98       	cbi	0x15, 1	; 21
	PORTC=PORTC|(1<<2);    //EN=1
  96:	aa 9a       	sbi	0x15, 2	; 21
	PORTC=PORTC&~(1<<2);   //EN=0
  98:	aa 98       	cbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	8f ec       	ldi	r24, 0xCF	; 207
  9c:	97 e0       	ldi	r25, 0x07	; 7
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <lcd_cmd_enable+0xc>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <lcd_cmd_enable+0x12>
  a4:	00 00       	nop
  a6:	08 95       	ret

000000a8 <lcd_cmd>:
		return;
	}
 }

void lcd_cmd(char x)
{
  a8:	cf 93       	push	r28
  aa:	c8 2f       	mov	r28, r24
	PORTC=x&(0xF0);
  ac:	80 7f       	andi	r24, 0xF0	; 240
  ae:	85 bb       	out	0x15, r24	; 21
	lcd_cmd_enable();
  b0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd_enable>
	PORTC=(x<<4)&(0xF0);
  b4:	20 e1       	ldi	r18, 0x10	; 16
  b6:	c2 9f       	mul	r28, r18
  b8:	c0 01       	movw	r24, r0
  ba:	11 24       	eor	r1, r1
  bc:	85 bb       	out	0x15, r24	; 21
	lcd_cmd_enable();
  be:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd_enable>
}
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <init>:
	_delay_ms(1);
}

void init()
{
	DDRC=0xFF;
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	84 bb       	out	0x14, r24	; 20
	lcd_cmd(0x02);
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
	lcd_cmd(0x28);
  d0:	88 e2       	ldi	r24, 0x28	; 40
  d2:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
	lcd_cmd(0x0E);
  d6:	8e e0       	ldi	r24, 0x0E	; 14
  d8:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
	//lcd_cmd(0x01);
	//lcd_cmd(0x06);
	lcd_cmd(0x80);
  dc:	80 e8       	ldi	r24, 0x80	; 128
  de:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
  e2:	08 95       	ret

000000e4 <lcd_data_enable>:
	lcd_data_enable();
}

void lcd_data_enable()
{
	PORTC=PORTC|(1<<0);    //RS=1
  e4:	a8 9a       	sbi	0x15, 0	; 21
	PORTC=PORTC&~(1<<1);   //RW=0
  e6:	a9 98       	cbi	0x15, 1	; 21
	PORTC=PORTC|(1<<2);    //EN=1
  e8:	aa 9a       	sbi	0x15, 2	; 21
	PORTC=PORTC&~(1<<2);   //EN=0
  ea:	aa 98       	cbi	0x15, 2	; 21
  ec:	8f ec       	ldi	r24, 0xCF	; 207
  ee:	97 e0       	ldi	r25, 0x07	; 7
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <lcd_data_enable+0xc>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <lcd_data_enable+0x12>
  f6:	00 00       	nop
  f8:	08 95       	ret

000000fa <lcd_data>:
	//lcd_cmd(0x06);
	lcd_cmd(0x80);
}

void lcd_data(char x)
{
  fa:	cf 93       	push	r28
  fc:	c8 2f       	mov	r28, r24
	PORTC=x&(0xF0);
  fe:	80 7f       	andi	r24, 0xF0	; 240
 100:	85 bb       	out	0x15, r24	; 21
	lcd_data_enable();
 102:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_data_enable>
	PORTC=(x<<4)&(0xF0);
 106:	20 e1       	ldi	r18, 0x10	; 16
 108:	c2 9f       	mul	r28, r18
 10a:	c0 01       	movw	r24, r0
 10c:	11 24       	eor	r1, r1
 10e:	85 bb       	out	0x15, r24	; 21
	lcd_data_enable();
 110:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_data_enable>
}
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <lcd_display>:
	PORTC=PORTC&~(1<<2);   //EN=0
	_delay_ms(1);
}

void lcd_display(char a[])
{
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	ec 01       	movw	r28, r24
	for(int j=0;a[j]!='\0';j++)
 11e:	88 81       	ld	r24, Y
 120:	88 23       	and	r24, r24
 122:	79 f0       	breq	.+30     	; 0x142 <lcd_display+0x2a>
 124:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_data(a[j]);
 126:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_data>
 12a:	2f e7       	ldi	r18, 0x7F	; 127
 12c:	88 e3       	ldi	r24, 0x38	; 56
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	21 50       	subi	r18, 0x01	; 1
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <lcd_display+0x18>
 138:	00 c0       	rjmp	.+0      	; 0x13a <lcd_display+0x22>
 13a:	00 00       	nop
	_delay_ms(1);
}

void lcd_display(char a[])
{
	for(int j=0;a[j]!='\0';j++)
 13c:	89 91       	ld	r24, Y+
 13e:	81 11       	cpse	r24, r1
 140:	f2 cf       	rjmp	.-28     	; 0x126 <lcd_display+0xe>
	{
		lcd_data(a[j]);
		//_delay_ms(300);
		_delay_ms(50);
	}
}
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <keypad>:
void keypad()
{
	//static int i=0;
	//char a[4];
	
	PORTA=PORTA&~(1<<col0);
 148:	dc 98       	cbi	0x1b, 4	; 27
	PORTA=PORTA|(1<<col1)|(1<<col2)|(1<<col3);
 14a:	8b b3       	in	r24, 0x1b	; 27
 14c:	80 6e       	ori	r24, 0xE0	; 224
 14e:	8b bb       	out	0x1b, r24	; 27
	
	if( (PINA&(1<<row0))==0 )
 150:	c8 99       	sbic	0x19, 0	; 25
 152:	13 c0       	rjmp	.+38     	; 0x17a <keypad+0x32>
	{
		lcd_display("*");
 154:	80 e6       	ldi	r24, 0x60	; 96
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
	    a[i]=7;
 15c:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end>
 160:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <__data_end+0x1>
 164:	fc 01       	movw	r30, r24
 166:	e0 57       	subi	r30, 0x70	; 112
 168:	ff 4f       	sbci	r31, 0xFF	; 255
 16a:	27 e0       	ldi	r18, 0x07	; 7
 16c:	20 83       	st	Z, r18
		i++;
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <__data_end+0x1>
 174:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <__data_end>
		return;
 178:	08 95       	ret
	}
	
	else if( (PINA&(1<<row1))==0 )
 17a:	c9 99       	sbic	0x19, 1	; 25
 17c:	13 c0       	rjmp	.+38     	; 0x1a4 <keypad+0x5c>
	{
		lcd_display("*");
 17e:	80 e6       	ldi	r24, 0x60	; 96
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
		a[i]=4;
 186:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end>
 18a:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <__data_end+0x1>
 18e:	fc 01       	movw	r30, r24
 190:	e0 57       	subi	r30, 0x70	; 112
 192:	ff 4f       	sbci	r31, 0xFF	; 255
 194:	24 e0       	ldi	r18, 0x04	; 4
 196:	20 83       	st	Z, r18
		i++;
 198:	01 96       	adiw	r24, 0x01	; 1
 19a:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <__data_end+0x1>
 19e:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <__data_end>
		return;
 1a2:	08 95       	ret
	}
	
	else if( (PINA&(1<<row2))==0 )
 1a4:	ca 99       	sbic	0x19, 2	; 25
 1a6:	13 c0       	rjmp	.+38     	; 0x1ce <keypad+0x86>
	{
		lcd_display("*");
 1a8:	80 e6       	ldi	r24, 0x60	; 96
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
		a[i]=1;
 1b0:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end>
 1b4:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <__data_end+0x1>
 1b8:	fc 01       	movw	r30, r24
 1ba:	e0 57       	subi	r30, 0x70	; 112
 1bc:	ff 4f       	sbci	r31, 0xFF	; 255
 1be:	21 e0       	ldi	r18, 0x01	; 1
 1c0:	20 83       	st	Z, r18
		i++;
 1c2:	01 96       	adiw	r24, 0x01	; 1
 1c4:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <__data_end+0x1>
 1c8:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <__data_end>
		return;
 1cc:	08 95       	ret
	}
	
	PORTA=PORTA&~(1<<col1);
 1ce:	dd 98       	cbi	0x1b, 5	; 27
	PORTA=PORTA|(1<<col0)|(1<<col2)|(1<<col3);
 1d0:	8b b3       	in	r24, 0x1b	; 27
 1d2:	80 6d       	ori	r24, 0xD0	; 208
 1d4:	8b bb       	out	0x1b, r24	; 27
	
	if( (PINA&(1<<row0))==0 )
 1d6:	c8 99       	sbic	0x19, 0	; 25
 1d8:	13 c0       	rjmp	.+38     	; 0x200 <keypad+0xb8>
	{
		lcd_display("*");
 1da:	80 e6       	ldi	r24, 0x60	; 96
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
		a[i]=8;
 1e2:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end>
 1e6:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <__data_end+0x1>
 1ea:	fc 01       	movw	r30, r24
 1ec:	e0 57       	subi	r30, 0x70	; 112
 1ee:	ff 4f       	sbci	r31, 0xFF	; 255
 1f0:	28 e0       	ldi	r18, 0x08	; 8
 1f2:	20 83       	st	Z, r18
		i++;
 1f4:	01 96       	adiw	r24, 0x01	; 1
 1f6:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <__data_end+0x1>
 1fa:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <__data_end>
		return;
 1fe:	08 95       	ret
	}
	
	else if( (PINA&(1<<row1))==0 )
 200:	c9 99       	sbic	0x19, 1	; 25
 202:	13 c0       	rjmp	.+38     	; 0x22a <keypad+0xe2>
	{
		lcd_display("*");
 204:	80 e6       	ldi	r24, 0x60	; 96
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
	    a[i]=5;
 20c:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end>
 210:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <__data_end+0x1>
 214:	fc 01       	movw	r30, r24
 216:	e0 57       	subi	r30, 0x70	; 112
 218:	ff 4f       	sbci	r31, 0xFF	; 255
 21a:	25 e0       	ldi	r18, 0x05	; 5
 21c:	20 83       	st	Z, r18
	    i++;
 21e:	01 96       	adiw	r24, 0x01	; 1
 220:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <__data_end+0x1>
 224:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <__data_end>
		return;
 228:	08 95       	ret
	}
	
	else if( (PINA&(1<<row2))==0 )
 22a:	ca 99       	sbic	0x19, 2	; 25
 22c:	13 c0       	rjmp	.+38     	; 0x254 <keypad+0x10c>
	{
		lcd_display("*");
 22e:	80 e6       	ldi	r24, 0x60	; 96
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
		a[i]=2;
 236:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end>
 23a:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <__data_end+0x1>
 23e:	fc 01       	movw	r30, r24
 240:	e0 57       	subi	r30, 0x70	; 112
 242:	ff 4f       	sbci	r31, 0xFF	; 255
 244:	22 e0       	ldi	r18, 0x02	; 2
 246:	20 83       	st	Z, r18
		i++;
 248:	01 96       	adiw	r24, 0x01	; 1
 24a:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <__data_end+0x1>
 24e:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <__data_end>
		return;
 252:	08 95       	ret
	}
			
	PORTA=PORTA&~(1<<col2);
 254:	de 98       	cbi	0x1b, 6	; 27
	PORTA=PORTA|(1<<col0)|(1<<col1)|(1<<col3);
 256:	8b b3       	in	r24, 0x1b	; 27
 258:	80 6b       	ori	r24, 0xB0	; 176
 25a:	8b bb       	out	0x1b, r24	; 27
	
	if( (PINA&(1<<row0))==0 )
 25c:	c8 99       	sbic	0x19, 0	; 25
 25e:	13 c0       	rjmp	.+38     	; 0x286 <keypad+0x13e>
	{
		lcd_display("*");
 260:	80 e6       	ldi	r24, 0x60	; 96
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
		a[i]=9;
 268:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end>
 26c:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <__data_end+0x1>
 270:	fc 01       	movw	r30, r24
 272:	e0 57       	subi	r30, 0x70	; 112
 274:	ff 4f       	sbci	r31, 0xFF	; 255
 276:	29 e0       	ldi	r18, 0x09	; 9
 278:	20 83       	st	Z, r18
		i++;
 27a:	01 96       	adiw	r24, 0x01	; 1
 27c:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <__data_end+0x1>
 280:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <__data_end>
		return;
 284:	08 95       	ret
	}
	
	else if( (PINA&(1<<row1))==0 )
 286:	c9 99       	sbic	0x19, 1	; 25
 288:	13 c0       	rjmp	.+38     	; 0x2b0 <keypad+0x168>
	{
		lcd_display("*");
 28a:	80 e6       	ldi	r24, 0x60	; 96
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
		a[i]=6;
 292:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end>
 296:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <__data_end+0x1>
 29a:	fc 01       	movw	r30, r24
 29c:	e0 57       	subi	r30, 0x70	; 112
 29e:	ff 4f       	sbci	r31, 0xFF	; 255
 2a0:	26 e0       	ldi	r18, 0x06	; 6
 2a2:	20 83       	st	Z, r18
		i++;
 2a4:	01 96       	adiw	r24, 0x01	; 1
 2a6:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <__data_end+0x1>
 2aa:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <__data_end>
		return;
 2ae:	08 95       	ret
	}
	
	else if( (PINA&(1<<row2))==0 )
 2b0:	ca 99       	sbic	0x19, 2	; 25
 2b2:	12 c0       	rjmp	.+36     	; 0x2d8 <keypad+0x190>
	{
		lcd_display("*");
 2b4:	80 e6       	ldi	r24, 0x60	; 96
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
		a[i]=3;
 2bc:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end>
 2c0:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <__data_end+0x1>
 2c4:	fc 01       	movw	r30, r24
 2c6:	e0 57       	subi	r30, 0x70	; 112
 2c8:	ff 4f       	sbci	r31, 0xFF	; 255
 2ca:	23 e0       	ldi	r18, 0x03	; 3
 2cc:	20 83       	st	Z, r18
		i++;
 2ce:	01 96       	adiw	r24, 0x01	; 1
 2d0:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <__data_end+0x1>
 2d4:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <__data_end>
 2d8:	08 95       	ret

000002da <password>:
	}
}

void password()
{
	lcd_display("Enter password");
 2da:	82 e6       	ldi	r24, 0x62	; 98
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
	lcd_cmd(0x01);
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
	  keypad();
	  //_delay_ms(500);
	}while(i<5);*/
	while(1)
	{
		keypad();
 2e8:	0e 94 a4 00 	call	0x148	; 0x148 <keypad>
		if(i==4)
 2ec:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end>
 2f0:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <__data_end+0x1>
 2f4:	04 97       	sbiw	r24, 0x04	; 4
 2f6:	c1 f7       	brne	.-16     	; 0x2e8 <password+0xe>
		{
			lcd_cmd(0x01);
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
			lcd_display("break");
 2fe:	81 e7       	ldi	r24, 0x71	; 113
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
 306:	2f ef       	ldi	r18, 0xFF	; 255
 308:	84 e3       	ldi	r24, 0x34	; 52
 30a:	9c e0       	ldi	r25, 0x0C	; 12
 30c:	21 50       	subi	r18, 0x01	; 1
 30e:	80 40       	sbci	r24, 0x00	; 0
 310:	90 40       	sbci	r25, 0x00	; 0
 312:	e1 f7       	brne	.-8      	; 0x30c <password+0x32>
 314:	00 c0       	rjmp	.+0      	; 0x316 <password+0x3c>
 316:	00 00       	nop
			_delay_ms(500);
			break;
		}
	}
   a[i]='\0';
 318:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <__data_end>
 31c:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <__data_end+0x1>
 320:	e0 57       	subi	r30, 0x70	; 112
 322:	ff 4f       	sbci	r31, 0xFF	; 255
 324:	10 82       	st	Z, r1
   i=0;
 326:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <__data_end+0x1>
 32a:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <__data_end>
   
   if(strcmp(a,"1234")==0)
 32e:	67 e7       	ldi	r22, 0x77	; 119
 330:	70 e0       	ldi	r23, 0x00	; 0
 332:	80 e9       	ldi	r24, 0x90	; 144
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 d6 01 	call	0x3ac	; 0x3ac <strcmp>
 33a:	89 2b       	or	r24, r25
 33c:	41 f4       	brne	.+16     	; 0x34e <password+0x74>
   {
	   lcd_cmd(0x01);
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
	   lcd_display("Welcome");
 344:	8c e7       	ldi	r24, 0x7C	; 124
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
 34c:	08 95       	ret
	   
   }
   else
   {
	   lcd_cmd(0x01);
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
	   lcd_display(a);
 354:	80 e9       	ldi	r24, 0x90	; 144
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
 35c:	2f ef       	ldi	r18, 0xFF	; 255
 35e:	89 e6       	ldi	r24, 0x69	; 105
 360:	98 e1       	ldi	r25, 0x18	; 24
 362:	21 50       	subi	r18, 0x01	; 1
 364:	80 40       	sbci	r24, 0x00	; 0
 366:	90 40       	sbci	r25, 0x00	; 0
 368:	e1 f7       	brne	.-8      	; 0x362 <password+0x88>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <password+0x92>
 36c:	00 00       	nop
	   _delay_ms(1000);
	   lcd_cmd(0x01);
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
	   lcd_display("try again");
 374:	84 e8       	ldi	r24, 0x84	; 132
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_display>
 37c:	2f ef       	ldi	r18, 0xFF	; 255
 37e:	84 e3       	ldi	r24, 0x34	; 52
 380:	9c e0       	ldi	r25, 0x0C	; 12
 382:	21 50       	subi	r18, 0x01	; 1
 384:	80 40       	sbci	r24, 0x00	; 0
 386:	90 40       	sbci	r25, 0x00	; 0
 388:	e1 f7       	brne	.-8      	; 0x382 <password+0xa8>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <password+0xb2>
 38c:	00 00       	nop
	   _delay_ms(500);
	   lcd_cmd(0x01);
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_cmd>
	   password();
 394:	0e 94 6d 01 	call	0x2da	; 0x2da <password>
 398:	08 95       	ret

0000039a <main>:
   }
 }

void main()
{
	PORTA=0x0F;      //just pull up activation
 39a:	8f e0       	ldi	r24, 0x0F	; 15
 39c:	8b bb       	out	0x1b, r24	; 27
	DDRA=0xF0;
 39e:	80 ef       	ldi	r24, 0xF0	; 240
 3a0:	8a bb       	out	0x1a, r24	; 26
	init();
 3a2:	0e 94 63 00 	call	0xc6	; 0xc6 <init>
	while(1)
	{
	 password();
 3a6:	0e 94 6d 01 	call	0x2da	; 0x2da <password>
 3aa:	fd cf       	rjmp	.-6      	; 0x3a6 <main+0xc>

000003ac <strcmp>:
 3ac:	fb 01       	movw	r30, r22
 3ae:	dc 01       	movw	r26, r24
 3b0:	8d 91       	ld	r24, X+
 3b2:	01 90       	ld	r0, Z+
 3b4:	80 19       	sub	r24, r0
 3b6:	01 10       	cpse	r0, r1
 3b8:	d9 f3       	breq	.-10     	; 0x3b0 <strcmp+0x4>
 3ba:	99 0b       	sbc	r25, r25
 3bc:	08 95       	ret

000003be <_exit>:
 3be:	f8 94       	cli

000003c0 <__stop_program>:
 3c0:	ff cf       	rjmp	.-2      	; 0x3c0 <__stop_program>
