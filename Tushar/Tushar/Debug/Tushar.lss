
Tushar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007e  00800060  00000a0a  00000a9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000de  008000de  00000b1c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b1c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001341  00000000  00000000  00000be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000075a  00000000  00000000  00001f29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e6  00000000  00000000  00002683  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  00002d6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ca  00000000  00000000  00002e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a25  00000000  00000000  00003226  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00003c4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e0       	ldi	r30, 0x0A	; 10
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3d       	cpi	r26, 0xDE	; 222
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae ed       	ldi	r26, 0xDE	; 222
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3e       	cpi	r26, 0xE2	; 226
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a1 02 	call	0x542	; 0x542 <main>
  8a:	0c 94 03 05 	jmp	0xa06	; 0xa06 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_data_enable_to_write>:
	PORTD=((x<<4)&0xf0); //lower 4 bit
	lcd_data_enable_to_write();
}
void lcd_data_enable_to_write()
{
	PORTD=PORTD |(1<<0);//RS=0;
  92:	90 9a       	sbi	0x12, 0	; 18
	PORTD=PORTD&~(1<<1);//RW=0;
  94:	91 98       	cbi	0x12, 1	; 18
	PORTD=PORTD |(1<<2);//EN=1;
  96:	92 9a       	sbi	0x12, 2	; 18
	PORTD=PORTD&~(1<<2);//EN=0;
  98:	92 98       	cbi	0x12, 2	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	8f ec       	ldi	r24, 0xCF	; 207
  9c:	97 e0       	ldi	r25, 0x07	; 7
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <lcd_data_enable_to_write+0xc>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <lcd_data_enable_to_write+0x12>
  a4:	00 00       	nop
  a6:	08 95       	ret

000000a8 <lcd_data>:
	lcd_command_enable_to_write();
	PORTD=((x<<4)&0xf0); //lower 4 bit
	lcd_command_enable_to_write();
}
void lcd_data(char x)
{
  a8:	cf 93       	push	r28
  aa:	c8 2f       	mov	r28, r24
	PORTD=(x&0xf0);  //upper 4 bit
  ac:	80 7f       	andi	r24, 0xF0	; 240
  ae:	82 bb       	out	0x12, r24	; 18
	lcd_data_enable_to_write();
  b0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_data_enable_to_write>
	PORTD=((x<<4)&0xf0); //lower 4 bit
  b4:	20 e1       	ldi	r18, 0x10	; 16
  b6:	c2 9f       	mul	r28, r18
  b8:	c0 01       	movw	r24, r0
  ba:	11 24       	eor	r1, r1
  bc:	82 bb       	out	0x12, r24	; 18
	lcd_data_enable_to_write();
  be:	0e 94 49 00 	call	0x92	; 0x92 <lcd_data_enable_to_write>
}
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <lcd_command_enable_to_write>:
	PORTD=PORTD&~(1<<2);//EN=0;
	_delay_ms(1);
}
void lcd_command_enable_to_write()
{
	PORTD=PORTD&~(1<<0);//RS=0;
  c6:	90 98       	cbi	0x12, 0	; 18
	PORTD=PORTD&~(1<<1);//RW=0;
  c8:	91 98       	cbi	0x12, 1	; 18
	PORTD=PORTD |(1<<2);//EN=1;
  ca:	92 9a       	sbi	0x12, 2	; 18
	PORTD=PORTD&~(1<<2);//EN=0;
  cc:	92 98       	cbi	0x12, 2	; 18
  ce:	8f ec       	ldi	r24, 0xCF	; 207
  d0:	97 e0       	ldi	r25, 0x07	; 7
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <lcd_command_enable_to_write+0xc>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <lcd_command_enable_to_write+0x12>
  d8:	00 00       	nop
  da:	08 95       	ret

000000dc <lcd_command>:
	lcd_command(0x28);
	lcd_command(0x0E);

}
void lcd_command(char x)
{
  dc:	cf 93       	push	r28
  de:	c8 2f       	mov	r28, r24
	PORTD=(x&0xf0);  //upper 4 bit
  e0:	80 7f       	andi	r24, 0xF0	; 240
  e2:	82 bb       	out	0x12, r24	; 18
	lcd_command_enable_to_write();
  e4:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_command_enable_to_write>
	PORTD=((x<<4)&0xf0); //lower 4 bit
  e8:	20 e1       	ldi	r18, 0x10	; 16
  ea:	c2 9f       	mul	r28, r18
  ec:	c0 01       	movw	r24, r0
  ee:	11 24       	eor	r1, r1
  f0:	82 bb       	out	0x12, r24	; 18
	lcd_command_enable_to_write();
  f2:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_command_enable_to_write>
}
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <lcd_string>:
				lcd_command(0x01);
				password(count,ptrn);
			}
}
void lcd_string(const char *x)//x=2000
{
  fa:	0f 93       	push	r16
  fc:	1f 93       	push	r17
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	8c 01       	movw	r16, r24
	int a=0;
 104:	c0 e0       	ldi	r28, 0x00	; 0
 106:	d0 e0       	ldi	r29, 0x00	; 0
	while(*x !='\0')
 108:	1b c0       	rjmp	.+54     	; 0x140 <lcd_string+0x46>
	{   a++;
 10a:	21 96       	adiw	r28, 0x01	; 1
		if(a>=16)
 10c:	c0 31       	cpi	r28, 0x10	; 16
 10e:	d1 05       	cpc	r29, r1
 110:	ac f0       	brlt	.+42     	; 0x13c <lcd_string+0x42>
		{
			lcd_command(0x8f);
 112:	8f e8       	ldi	r24, 0x8F	; 143
 114:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_command>
			lcd_data(*x++);
 118:	f8 01       	movw	r30, r16
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	80 81       	ld	r24, Z
 11e:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_data>
 122:	2f ef       	ldi	r18, 0xFF	; 255
 124:	80 e7       	ldi	r24, 0x70	; 112
 126:	92 e0       	ldi	r25, 0x02	; 2
 128:	21 50       	subi	r18, 0x01	; 1
 12a:	80 40       	sbci	r24, 0x00	; 0
 12c:	90 40       	sbci	r25, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <lcd_string+0x2e>
 130:	00 c0       	rjmp	.+0      	; 0x132 <lcd_string+0x38>
 132:	00 00       	nop
			_delay_ms(100);
			lcd_command(0x1c);
 134:	8c e1       	ldi	r24, 0x1C	; 28
 136:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_command>
 13a:	02 c0       	rjmp	.+4      	; 0x140 <lcd_string+0x46>
		}
		else
		lcd_data(*x++);
 13c:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_data>
			}
}
void lcd_string(const char *x)//x=2000
{
	int a=0;
	while(*x !='\0')
 140:	f8 01       	movw	r30, r16
 142:	81 91       	ld	r24, Z+
 144:	8f 01       	movw	r16, r30
 146:	81 11       	cpse	r24, r1
 148:	e0 cf       	rjmp	.-64     	; 0x10a <lcd_string+0x10>
		lcd_data(*x++);
		
		//_delay_ms(200);
	}

}
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	1f 91       	pop	r17
 150:	0f 91       	pop	r16
 152:	08 95       	ret

00000154 <keypad>:
			default: return ('\0');	

		}
		
	}*/
	PORTA=PORTA&~(1<<col0);
 154:	dc 98       	cbi	0x1b, 4	; 27
	PORTA=PORTA|(1<<col1)|(1<<col2);
 156:	8b b3       	in	r24, 0x1b	; 27
 158:	80 66       	ori	r24, 0x60	; 96
 15a:	8b bb       	out	0x1b, r24	; 27
	if( (PINA&(1<<row0))==0)
 15c:	c8 99       	sbic	0x19, 0	; 25
 15e:	0f c0       	rjmp	.+30     	; 0x17e <keypad+0x2a>
	{
		lcd_string("*");
 160:	86 e6       	ldi	r24, 0x66	; 102
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_string>
 168:	2f ef       	ldi	r18, 0xFF	; 255
 16a:	81 ee       	ldi	r24, 0xE1	; 225
 16c:	94 e0       	ldi	r25, 0x04	; 4
 16e:	21 50       	subi	r18, 0x01	; 1
 170:	80 40       	sbci	r24, 0x00	; 0
 172:	90 40       	sbci	r25, 0x00	; 0
 174:	e1 f7       	brne	.-8      	; 0x16e <keypad+0x1a>
 176:	00 c0       	rjmp	.+0      	; 0x178 <keypad+0x24>
 178:	00 00       	nop
		_delay_ms(200);
		return('1');
 17a:	81 e3       	ldi	r24, 0x31	; 49
 17c:	08 95       	ret
		
	}
	else if( (PINA&(1<<row1))==0)
 17e:	c9 99       	sbic	0x19, 1	; 25
 180:	0f c0       	rjmp	.+30     	; 0x1a0 <keypad+0x4c>
	{
		lcd_string("*");
 182:	86 e6       	ldi	r24, 0x66	; 102
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_string>
 18a:	2f ef       	ldi	r18, 0xFF	; 255
 18c:	81 ee       	ldi	r24, 0xE1	; 225
 18e:	94 e0       	ldi	r25, 0x04	; 4
 190:	21 50       	subi	r18, 0x01	; 1
 192:	80 40       	sbci	r24, 0x00	; 0
 194:	90 40       	sbci	r25, 0x00	; 0
 196:	e1 f7       	brne	.-8      	; 0x190 <keypad+0x3c>
 198:	00 c0       	rjmp	.+0      	; 0x19a <keypad+0x46>
 19a:	00 00       	nop
		_delay_ms(200);
		return('4');
 19c:	84 e3       	ldi	r24, 0x34	; 52
 19e:	08 95       	ret
		
	}
	else if( (PINA&(1<<row2))==0)
 1a0:	ca 99       	sbic	0x19, 2	; 25
 1a2:	0f c0       	rjmp	.+30     	; 0x1c2 <keypad+0x6e>
	{
		lcd_string("*");
 1a4:	86 e6       	ldi	r24, 0x66	; 102
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_string>
 1ac:	2f ef       	ldi	r18, 0xFF	; 255
 1ae:	81 ee       	ldi	r24, 0xE1	; 225
 1b0:	94 e0       	ldi	r25, 0x04	; 4
 1b2:	21 50       	subi	r18, 0x01	; 1
 1b4:	80 40       	sbci	r24, 0x00	; 0
 1b6:	90 40       	sbci	r25, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <keypad+0x5e>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <keypad+0x68>
 1bc:	00 00       	nop
		_delay_ms(200);
		return('7');
 1be:	87 e3       	ldi	r24, 0x37	; 55
 1c0:	08 95       	ret
		
	}
	else if( (PINA&(1<<row3))==0)
 1c2:	cb 99       	sbic	0x19, 3	; 25
 1c4:	0f c0       	rjmp	.+30     	; 0x1e4 <keypad+0x90>
	{
		lcd_string("*");
 1c6:	86 e6       	ldi	r24, 0x66	; 102
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_string>
 1ce:	2f ef       	ldi	r18, 0xFF	; 255
 1d0:	81 ee       	ldi	r24, 0xE1	; 225
 1d2:	94 e0       	ldi	r25, 0x04	; 4
 1d4:	21 50       	subi	r18, 0x01	; 1
 1d6:	80 40       	sbci	r24, 0x00	; 0
 1d8:	90 40       	sbci	r25, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <keypad+0x80>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <keypad+0x8a>
 1de:	00 00       	nop
		_delay_ms(200);
		return ('*');
 1e0:	8a e2       	ldi	r24, 0x2A	; 42
 1e2:	08 95       	ret
		
	}

	PORTA=PORTA&~(1<<col1);
 1e4:	dd 98       	cbi	0x1b, 5	; 27
	PORTA=PORTA|(1<<col0)|(1<<col2);
 1e6:	8b b3       	in	r24, 0x1b	; 27
 1e8:	80 65       	ori	r24, 0x50	; 80
 1ea:	8b bb       	out	0x1b, r24	; 27
	if( (PINA&(1<<row0))==0)
 1ec:	c8 99       	sbic	0x19, 0	; 25
 1ee:	0f c0       	rjmp	.+30     	; 0x20e <keypad+0xba>
	{
		lcd_string("*");
 1f0:	86 e6       	ldi	r24, 0x66	; 102
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_string>
 1f8:	2f ef       	ldi	r18, 0xFF	; 255
 1fa:	81 ee       	ldi	r24, 0xE1	; 225
 1fc:	94 e0       	ldi	r25, 0x04	; 4
 1fe:	21 50       	subi	r18, 0x01	; 1
 200:	80 40       	sbci	r24, 0x00	; 0
 202:	90 40       	sbci	r25, 0x00	; 0
 204:	e1 f7       	brne	.-8      	; 0x1fe <keypad+0xaa>
 206:	00 c0       	rjmp	.+0      	; 0x208 <keypad+0xb4>
 208:	00 00       	nop
		_delay_ms(200);
		return('2');
 20a:	82 e3       	ldi	r24, 0x32	; 50
 20c:	08 95       	ret
		
	}
	else if( (PINA&(1<<row1))==0)
 20e:	c9 99       	sbic	0x19, 1	; 25
 210:	0f c0       	rjmp	.+30     	; 0x230 <keypad+0xdc>
	{
		lcd_string("*");
 212:	86 e6       	ldi	r24, 0x66	; 102
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_string>
 21a:	2f ef       	ldi	r18, 0xFF	; 255
 21c:	81 ee       	ldi	r24, 0xE1	; 225
 21e:	94 e0       	ldi	r25, 0x04	; 4
 220:	21 50       	subi	r18, 0x01	; 1
 222:	80 40       	sbci	r24, 0x00	; 0
 224:	90 40       	sbci	r25, 0x00	; 0
 226:	e1 f7       	brne	.-8      	; 0x220 <keypad+0xcc>
 228:	00 c0       	rjmp	.+0      	; 0x22a <keypad+0xd6>
 22a:	00 00       	nop
		_delay_ms(200);
		return('5');
 22c:	85 e3       	ldi	r24, 0x35	; 53
 22e:	08 95       	ret
		
	}
	else if( (PINA&(1<<row2))==0)
 230:	ca 99       	sbic	0x19, 2	; 25
 232:	0f c0       	rjmp	.+30     	; 0x252 <keypad+0xfe>
	{
		lcd_string("*");
 234:	86 e6       	ldi	r24, 0x66	; 102
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_string>
 23c:	2f ef       	ldi	r18, 0xFF	; 255
 23e:	81 ee       	ldi	r24, 0xE1	; 225
 240:	94 e0       	ldi	r25, 0x04	; 4
 242:	21 50       	subi	r18, 0x01	; 1
 244:	80 40       	sbci	r24, 0x00	; 0
 246:	90 40       	sbci	r25, 0x00	; 0
 248:	e1 f7       	brne	.-8      	; 0x242 <keypad+0xee>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <keypad+0xf8>
 24c:	00 00       	nop
		_delay_ms(200);
		return('8');
 24e:	88 e3       	ldi	r24, 0x38	; 56
 250:	08 95       	ret
		
	}
	else if( (PINA&(1<<row3))==0)
 252:	cb 99       	sbic	0x19, 3	; 25
 254:	0f c0       	rjmp	.+30     	; 0x274 <keypad+0x120>
	{
		lcd_string("*");
 256:	86 e6       	ldi	r24, 0x66	; 102
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_string>
 25e:	2f ef       	ldi	r18, 0xFF	; 255
 260:	81 ee       	ldi	r24, 0xE1	; 225
 262:	94 e0       	ldi	r25, 0x04	; 4
 264:	21 50       	subi	r18, 0x01	; 1
 266:	80 40       	sbci	r24, 0x00	; 0
 268:	90 40       	sbci	r25, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <keypad+0x110>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <keypad+0x11a>
 26e:	00 00       	nop
		_delay_ms(200);
		return('0');
 270:	80 e3       	ldi	r24, 0x30	; 48
 272:	08 95       	ret
		
	}

	PORTA=PORTA&~(1<<col2);
 274:	de 98       	cbi	0x1b, 6	; 27
	PORTA=PORTA|(1<<col0)|(1<<col1);
 276:	8b b3       	in	r24, 0x1b	; 27
 278:	80 63       	ori	r24, 0x30	; 48
 27a:	8b bb       	out	0x1b, r24	; 27
	if( (PINA&(1<<row0))==0)
 27c:	c8 99       	sbic	0x19, 0	; 25
 27e:	0f c0       	rjmp	.+30     	; 0x29e <keypad+0x14a>
	{
		lcd_string("*");
 280:	86 e6       	ldi	r24, 0x66	; 102
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_string>
 288:	2f ef       	ldi	r18, 0xFF	; 255
 28a:	81 ee       	ldi	r24, 0xE1	; 225
 28c:	94 e0       	ldi	r25, 0x04	; 4
 28e:	21 50       	subi	r18, 0x01	; 1
 290:	80 40       	sbci	r24, 0x00	; 0
 292:	90 40       	sbci	r25, 0x00	; 0
 294:	e1 f7       	brne	.-8      	; 0x28e <keypad+0x13a>
 296:	00 c0       	rjmp	.+0      	; 0x298 <keypad+0x144>
 298:	00 00       	nop
		_delay_ms(200);
		return('3');
 29a:	83 e3       	ldi	r24, 0x33	; 51
 29c:	08 95       	ret
		
	}
	else if( (PINA&(1<<row1))==0)
 29e:	c9 99       	sbic	0x19, 1	; 25
 2a0:	0f c0       	rjmp	.+30     	; 0x2c0 <keypad+0x16c>
	{
		lcd_string("*");
 2a2:	86 e6       	ldi	r24, 0x66	; 102
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_string>
 2aa:	2f ef       	ldi	r18, 0xFF	; 255
 2ac:	81 ee       	ldi	r24, 0xE1	; 225
 2ae:	94 e0       	ldi	r25, 0x04	; 4
 2b0:	21 50       	subi	r18, 0x01	; 1
 2b2:	80 40       	sbci	r24, 0x00	; 0
 2b4:	90 40       	sbci	r25, 0x00	; 0
 2b6:	e1 f7       	brne	.-8      	; 0x2b0 <keypad+0x15c>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <keypad+0x166>
 2ba:	00 00       	nop
		_delay_ms(200);
		return('6');
 2bc:	86 e3       	ldi	r24, 0x36	; 54
 2be:	08 95       	ret
		
	}
	else if( (PINA&(1<<row2))==0)
 2c0:	ca 99       	sbic	0x19, 2	; 25
 2c2:	0f c0       	rjmp	.+30     	; 0x2e2 <keypad+0x18e>
	{
		lcd_string("*");
 2c4:	86 e6       	ldi	r24, 0x66	; 102
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_string>
 2cc:	2f ef       	ldi	r18, 0xFF	; 255
 2ce:	81 ee       	ldi	r24, 0xE1	; 225
 2d0:	94 e0       	ldi	r25, 0x04	; 4
 2d2:	21 50       	subi	r18, 0x01	; 1
 2d4:	80 40       	sbci	r24, 0x00	; 0
 2d6:	90 40       	sbci	r25, 0x00	; 0
 2d8:	e1 f7       	brne	.-8      	; 0x2d2 <keypad+0x17e>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <keypad+0x188>
 2dc:	00 00       	nop
		_delay_ms(200);
		return('9');
 2de:	89 e3       	ldi	r24, 0x39	; 57
 2e0:	08 95       	ret
		
	}
	else if( (PINA&(1<<row3))==0)
 2e2:	cb 99       	sbic	0x19, 3	; 25
 2e4:	0f c0       	rjmp	.+30     	; 0x304 <keypad+0x1b0>
	{
		lcd_string("*");
 2e6:	86 e6       	ldi	r24, 0x66	; 102
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_string>
 2ee:	2f ef       	ldi	r18, 0xFF	; 255
 2f0:	81 ee       	ldi	r24, 0xE1	; 225
 2f2:	94 e0       	ldi	r25, 0x04	; 4
 2f4:	21 50       	subi	r18, 0x01	; 1
 2f6:	80 40       	sbci	r24, 0x00	; 0
 2f8:	90 40       	sbci	r25, 0x00	; 0
 2fa:	e1 f7       	brne	.-8      	; 0x2f4 <keypad+0x1a0>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <keypad+0x1aa>
 2fe:	00 00       	nop
		_delay_ms(200);
		return('#');
 300:	83 e2       	ldi	r24, 0x23	; 35
 302:	08 95       	ret
		
	}
	else
	return ('\0');
 304:	80 e0       	ldi	r24, 0x00	; 0
}
 306:	08 95       	ret

00000308 <password>:
void password(int count,char *ptrn)
{
 308:	cf 92       	push	r12
 30a:	df 92       	push	r13
 30c:	ef 92       	push	r14
 30e:	ff 92       	push	r15
 310:	0f 93       	push	r16
 312:	1f 93       	push	r17
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
 318:	6c 01       	movw	r12, r24
 31a:	8b 01       	movw	r16, r22
			int i,j,q,p;
			char temp,*ptr,temp2;
			ptr=(char*)calloc(1, sizeof(char));
 31c:	61 e0       	ldi	r22, 0x01	; 1
 31e:	70 e0       	ldi	r23, 0x00	; 0
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 b0 02 	call	0x560	; 0x560 <calloc>
 328:	7c 01       	movw	r14, r24
			if(count==2)									//for wrong pass
 32a:	22 e0       	ldi	r18, 0x02	; 2
 32c:	c2 16       	cp	r12, r18
 32e:	d1 04       	cpc	r13, r1
 330:	51 f5       	brne	.+84     	; 0x386 <password+0x7e>
			{
				lcd_command(0x01);
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_command>
				lcd_string("retry in 10 sec");
 338:	88 e6       	ldi	r24, 0x68	; 104
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_string>
 340:	8f ef       	ldi	r24, 0xFF	; 255
 342:	93 e2       	ldi	r25, 0x23	; 35
 344:	24 ef       	ldi	r18, 0xF4	; 244
 346:	81 50       	subi	r24, 0x01	; 1
 348:	90 40       	sbci	r25, 0x00	; 0
 34a:	20 40       	sbci	r18, 0x00	; 0
 34c:	e1 f7       	brne	.-8      	; 0x346 <password+0x3e>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <password+0x48>
 350:	00 00       	nop
				_delay_ms(10000);
				lcd_command(0x01);
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_command>
				lcd_string("Try Again");
 358:	88 e7       	ldi	r24, 0x78	; 120
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_string>
 360:	8f ef       	ldi	r24, 0xFF	; 255
 362:	91 ee       	ldi	r25, 0xE1	; 225
 364:	24 e0       	ldi	r18, 0x04	; 4
 366:	81 50       	subi	r24, 0x01	; 1
 368:	90 40       	sbci	r25, 0x00	; 0
 36a:	20 40       	sbci	r18, 0x00	; 0
 36c:	e1 f7       	brne	.-8      	; 0x366 <password+0x5e>
 36e:	00 c0       	rjmp	.+0      	; 0x370 <password+0x68>
 370:	00 00       	nop
				_delay_ms(200);
				count=0;
				password(count,ptrn);
 372:	b8 01       	movw	r22, r16
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 84 01 	call	0x308	; 0x308 <password>
				lcd_command(0x01);
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_command>
				lcd_string("retry in 10 sec");
				_delay_ms(10000);
				lcd_command(0x01);
				lcd_string("Try Again");
				_delay_ms(200);
				count=0;
 382:	c1 2c       	mov	r12, r1
 384:	d1 2c       	mov	r13, r1
				password(count,ptrn);
				lcd_command(0x01);
			}
			i=0;
 386:	c0 e0       	ldi	r28, 0x00	; 0
 388:	d0 e0       	ldi	r29, 0x00	; 0
			do											//check string  
			{ 
				temp=keypad();
 38a:	0e 94 aa 00 	call	0x154	; 0x154 <keypad>
				if(temp!='\0')
 38e:	88 23       	and	r24, r24
 390:	59 f0       	breq	.+22     	; 0x3a8 <password+0xa0>
				{
					*(ptr+i)=temp;
 392:	f7 01       	movw	r30, r14
 394:	ec 0f       	add	r30, r28
 396:	fd 1f       	adc	r31, r29
 398:	80 83       	st	Z, r24
					ptr=(char*)realloc(ptr, sizeof(char));
 39a:	61 e0       	ldi	r22, 0x01	; 1
 39c:	70 e0       	ldi	r23, 0x00	; 0
 39e:	c7 01       	movw	r24, r14
 3a0:	0e 94 ed 03 	call	0x7da	; 0x7da <realloc>
 3a4:	7c 01       	movw	r14, r24
					i++;
 3a6:	21 96       	adiw	r28, 0x01	; 1
				}
			}while(*(ptrn+i)!='\0');		
 3a8:	f8 01       	movw	r30, r16
 3aa:	ec 0f       	add	r30, r28
 3ac:	fd 1f       	adc	r31, r29
 3ae:	80 81       	ld	r24, Z
 3b0:	81 11       	cpse	r24, r1
 3b2:	eb cf       	rjmp	.-42     	; 0x38a <password+0x82>
			if(strcmp(ptrn,ptr)==0)					//comparison of pass and enter 
 3b4:	b7 01       	movw	r22, r14
 3b6:	c8 01       	movw	r24, r16
 3b8:	0e 94 c3 04 	call	0x986	; 0x986 <strcmp>
 3bc:	89 2b       	or	r24, r25
 3be:	09 f0       	breq	.+2      	; 0x3c2 <password+0xba>
 3c0:	74 c0       	rjmp	.+232    	; 0x4aa <__stack+0x4b>
			{	q=0;
				count=0;
				lcd_command(0xc0);
 3c2:	80 ec       	ldi	r24, 0xC0	; 192
 3c4:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_command>
				lcd_string("Unlocked");
 3c8:	82 e8       	ldi	r24, 0x82	; 130
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_string>
 3d0:	8f ef       	ldi	r24, 0xFF	; 255
 3d2:	93 ed       	ldi	r25, 0xD3	; 211
 3d4:	20 e3       	ldi	r18, 0x30	; 48
 3d6:	81 50       	subi	r24, 0x01	; 1
 3d8:	90 40       	sbci	r25, 0x00	; 0
 3da:	20 40       	sbci	r18, 0x00	; 0
 3dc:	e1 f7       	brne	.-8      	; 0x3d6 <password+0xce>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <password+0xd8>
 3e0:	00 00       	nop
				_delay_ms(2000);
				lcd_command(0x01);
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_command>
				lcd_string("welcome");
 3e8:	8b e8       	ldi	r24, 0x8B	; 139
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_string>
 3f0:	8f ef       	ldi	r24, 0xFF	; 255
 3f2:	93 ed       	ldi	r25, 0xD3	; 211
 3f4:	20 e3       	ldi	r18, 0x30	; 48
 3f6:	81 50       	subi	r24, 0x01	; 1
 3f8:	90 40       	sbci	r25, 0x00	; 0
 3fa:	20 40       	sbci	r18, 0x00	; 0
 3fc:	e1 f7       	brne	.-8      	; 0x3f6 <password+0xee>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <__LOCK_REGION_LENGTH__>
 400:	00 00       	nop
				_delay_ms(2000);
				lcd_command(0x01);
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_command>
				lcd_string("'#' to lock");
 408:	83 e9       	ldi	r24, 0x93	; 147
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_string>
				lcd_command(0xc0);
 410:	80 ec       	ldi	r24, 0xC0	; 192
 412:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_command>
				lcd_string("'*' to reset");
 416:	8f e9       	ldi	r24, 0x9F	; 159
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_string>
				while (q!=1)
				{
					p=0;
					temp=keypad();
 41e:	0e 94 aa 00 	call	0x154	; 0x154 <keypad>
					if(temp!='\0')
 422:	88 23       	and	r24, r24
 424:	e1 f3       	breq	.-8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
					{	
						if(temp=='#')
 426:	83 32       	cpi	r24, 0x23	; 35
 428:	21 f4       	brne	.+8      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
						{
							lcd_command(0x01);
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_command>
 430:	6b c0       	rjmp	.+214    	; 0x508 <__stack+0xa9>
							q=1;
							p=1;
						}
						else if(temp=='*')
 432:	8a 32       	cpi	r24, 0x2A	; 42
 434:	a1 f7       	brne	.-24     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
						{
							q=1;
							lcd_command(0x01);
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_command>
							lcd_string("press '#' for");
 43c:	8c ea       	ldi	r24, 0xAC	; 172
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_string>
							lcd_command(0xc0);
 444:	80 ec       	ldi	r24, 0xC0	; 192
 446:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_command>
							lcd_string("terminating");
 44a:	8a eb       	ldi	r24, 0xBA	; 186
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_string>
 452:	8f ef       	ldi	r24, 0xFF	; 255
 454:	97 ea       	ldi	r25, 0xA7	; 167
 456:	21 e6       	ldi	r18, 0x61	; 97
 458:	81 50       	subi	r24, 0x01	; 1
 45a:	90 40       	sbci	r25, 0x00	; 0
 45c:	20 40       	sbci	r18, 0x00	; 0
 45e:	e1 f7       	brne	.-8      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 460:	00 c0       	rjmp	.+0      	; 0x462 <__stack+0x3>
 462:	00 00       	nop
							_delay_ms(4000);
							lcd_command(0x01);
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_command>
							free(ptr);
 46a:	c7 01       	movw	r24, r14
 46c:	0e 94 64 03 	call	0x6c8	; 0x6c8 <free>
							free(ptrn);
 470:	c8 01       	movw	r24, r16
 472:	0e 94 64 03 	call	0x6c8	; 0x6c8 <free>
							ptrn=(char*)calloc(ptrn,sizeof(char));
 476:	61 e0       	ldi	r22, 0x01	; 1
 478:	70 e0       	ldi	r23, 0x00	; 0
 47a:	c8 01       	movw	r24, r16
 47c:	0e 94 b0 02 	call	0x560	; 0x560 <calloc>
 480:	8c 01       	movw	r16, r24
							j=0;
 482:	c0 e0       	ldi	r28, 0x00	; 0
 484:	d0 e0       	ldi	r29, 0x00	; 0
							while(1)
							{
								temp2=keypad();
 486:	0e 94 aa 00 	call	0x154	; 0x154 <keypad>
								if((temp2!='\0') && (temp2!='#'))
 48a:	88 23       	and	r24, r24
 48c:	e1 f3       	breq	.-8      	; 0x486 <__stack+0x27>
 48e:	83 32       	cpi	r24, 0x23	; 35
 490:	29 f1       	breq	.+74     	; 0x4dc <__stack+0x7d>
								{
									*(ptrn+j)=temp2;
 492:	f8 01       	movw	r30, r16
 494:	ec 0f       	add	r30, r28
 496:	fd 1f       	adc	r31, r29
 498:	80 83       	st	Z, r24
									ptrn=(char*)realloc(ptrn,sizeof(char));
 49a:	61 e0       	ldi	r22, 0x01	; 1
 49c:	70 e0       	ldi	r23, 0x00	; 0
 49e:	c8 01       	movw	r24, r16
 4a0:	0e 94 ed 03 	call	0x7da	; 0x7da <realloc>
 4a4:	8c 01       	movw	r16, r24
									j++;
 4a6:	21 96       	adiw	r28, 0x01	; 1
 4a8:	ee cf       	rjmp	.-36     	; 0x486 <__stack+0x27>
					password(count,ptrn);					
				}							
			}
			else
			{
				lcd_command(0xc0);
 4aa:	80 ec       	ldi	r24, 0xC0	; 192
 4ac:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_command>
				lcd_string("Incorrect");
 4b0:	86 ec       	ldi	r24, 0xC6	; 198
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_string>
 4b8:	8f ef       	ldi	r24, 0xFF	; 255
 4ba:	93 ed       	ldi	r25, 0xD3	; 211
 4bc:	20 e3       	ldi	r18, 0x30	; 48
 4be:	81 50       	subi	r24, 0x01	; 1
 4c0:	90 40       	sbci	r25, 0x00	; 0
 4c2:	20 40       	sbci	r18, 0x00	; 0
 4c4:	e1 f7       	brne	.-8      	; 0x4be <__stack+0x5f>
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <__stack+0x69>
 4c8:	00 00       	nop
				_delay_ms(2000);
				++count;
				lcd_command(0x01);
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_command>
				password(count,ptrn);
 4d0:	b8 01       	movw	r22, r16
 4d2:	c6 01       	movw	r24, r12
 4d4:	01 96       	adiw	r24, 0x01	; 1
 4d6:	0e 94 84 01 	call	0x308	; 0x308 <password>
			}
}
 4da:	1e c0       	rjmp	.+60     	; 0x518 <__stack+0xb9>
									//*(ptrn+j+1)='\0';
									p=1;
									break;
								}							
							}	
							lcd_command(0x01);
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_command>
							lcd_string("New Pass:");
 4e2:	80 ed       	ldi	r24, 0xD0	; 208
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_string>
							lcd_command(0xc0);
 4ea:	80 ec       	ldi	r24, 0xC0	; 192
 4ec:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_command>
							lcd_string(ptrn);
 4f0:	c8 01       	movw	r24, r16
 4f2:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_string>
 4f6:	8f ef       	ldi	r24, 0xFF	; 255
 4f8:	97 ea       	ldi	r25, 0xA7	; 167
 4fa:	21 e6       	ldi	r18, 0x61	; 97
 4fc:	81 50       	subi	r24, 0x01	; 1
 4fe:	90 40       	sbci	r25, 0x00	; 0
 500:	20 40       	sbci	r18, 0x00	; 0
 502:	e1 f7       	brne	.-8      	; 0x4fc <__stack+0x9d>
 504:	00 c0       	rjmp	.+0      	; 0x506 <__stack+0xa7>
 506:	00 00       	nop
					else
					q=0;
				}
				if(p==1)
				{
					lcd_command(0x01);
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_command>
					password(count,ptrn);					
 50e:	b8 01       	movw	r22, r16
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	0e 94 84 01 	call	0x308	; 0x308 <password>
				_delay_ms(2000);
				++count;
				lcd_command(0x01);
				password(count,ptrn);
			}
}
 518:	df 91       	pop	r29
 51a:	cf 91       	pop	r28
 51c:	1f 91       	pop	r17
 51e:	0f 91       	pop	r16
 520:	ff 90       	pop	r15
 522:	ef 90       	pop	r14
 524:	df 90       	pop	r13
 526:	cf 90       	pop	r12
 528:	08 95       	ret

0000052a <lcd_init>:
	}

}
void lcd_init()
{
	DDRD=0xff;
 52a:	8f ef       	ldi	r24, 0xFF	; 255
 52c:	81 bb       	out	0x11, r24	; 17
	lcd_command(0x02);
 52e:	82 e0       	ldi	r24, 0x02	; 2
 530:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_command>
	lcd_command(0x28);
 534:	88 e2       	ldi	r24, 0x28	; 40
 536:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_command>
	lcd_command(0x0E);
 53a:	8e e0       	ldi	r24, 0x0E	; 14
 53c:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_command>
 540:	08 95       	ret

00000542 <main>:
void lcd_string(const char *);
char keypad(void );
void password(int,char *);
int main()
{
	PORTA=0x0F;//activate pull up from PA0 to PA3
 542:	8f e0       	ldi	r24, 0x0F	; 15
 544:	8b bb       	out	0x1b, r24	; 27
	DDRA=0xF0;
 546:	80 ef       	ldi	r24, 0xF0	; 240
 548:	8a bb       	out	0x1a, r24	; 26
	int count=0;
	char *ptrn="123";
	lcd_init();
 54a:	0e 94 95 02 	call	0x52a	; 0x52a <lcd_init>
	password(count,ptrn);
 54e:	6a ed       	ldi	r22, 0xDA	; 218
 550:	70 e0       	ldi	r23, 0x00	; 0
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	0e 94 84 01 	call	0x308	; 0x308 <password>
}
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	08 95       	ret

00000560 <calloc>:
 560:	0f 93       	push	r16
 562:	1f 93       	push	r17
 564:	cf 93       	push	r28
 566:	df 93       	push	r29
 568:	86 9f       	mul	r24, r22
 56a:	80 01       	movw	r16, r0
 56c:	87 9f       	mul	r24, r23
 56e:	10 0d       	add	r17, r0
 570:	96 9f       	mul	r25, r22
 572:	10 0d       	add	r17, r0
 574:	11 24       	eor	r1, r1
 576:	c8 01       	movw	r24, r16
 578:	0e 94 cc 02 	call	0x598	; 0x598 <malloc>
 57c:	ec 01       	movw	r28, r24
 57e:	00 97       	sbiw	r24, 0x00	; 0
 580:	29 f0       	breq	.+10     	; 0x58c <calloc+0x2c>
 582:	a8 01       	movw	r20, r16
 584:	60 e0       	ldi	r22, 0x00	; 0
 586:	70 e0       	ldi	r23, 0x00	; 0
 588:	0e 94 bc 04 	call	0x978	; 0x978 <memset>
 58c:	ce 01       	movw	r24, r28
 58e:	df 91       	pop	r29
 590:	cf 91       	pop	r28
 592:	1f 91       	pop	r17
 594:	0f 91       	pop	r16
 596:	08 95       	ret

00000598 <malloc>:
 598:	0f 93       	push	r16
 59a:	1f 93       	push	r17
 59c:	cf 93       	push	r28
 59e:	df 93       	push	r29
 5a0:	82 30       	cpi	r24, 0x02	; 2
 5a2:	91 05       	cpc	r25, r1
 5a4:	10 f4       	brcc	.+4      	; 0x5aa <malloc+0x12>
 5a6:	82 e0       	ldi	r24, 0x02	; 2
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	e0 91 e0 00 	lds	r30, 0x00E0	; 0x8000e0 <__flp>
 5ae:	f0 91 e1 00 	lds	r31, 0x00E1	; 0x8000e1 <__flp+0x1>
 5b2:	20 e0       	ldi	r18, 0x00	; 0
 5b4:	30 e0       	ldi	r19, 0x00	; 0
 5b6:	a0 e0       	ldi	r26, 0x00	; 0
 5b8:	b0 e0       	ldi	r27, 0x00	; 0
 5ba:	30 97       	sbiw	r30, 0x00	; 0
 5bc:	19 f1       	breq	.+70     	; 0x604 <malloc+0x6c>
 5be:	40 81       	ld	r20, Z
 5c0:	51 81       	ldd	r21, Z+1	; 0x01
 5c2:	02 81       	ldd	r16, Z+2	; 0x02
 5c4:	13 81       	ldd	r17, Z+3	; 0x03
 5c6:	48 17       	cp	r20, r24
 5c8:	59 07       	cpc	r21, r25
 5ca:	c8 f0       	brcs	.+50     	; 0x5fe <malloc+0x66>
 5cc:	84 17       	cp	r24, r20
 5ce:	95 07       	cpc	r25, r21
 5d0:	69 f4       	brne	.+26     	; 0x5ec <malloc+0x54>
 5d2:	10 97       	sbiw	r26, 0x00	; 0
 5d4:	31 f0       	breq	.+12     	; 0x5e2 <malloc+0x4a>
 5d6:	12 96       	adiw	r26, 0x02	; 2
 5d8:	0c 93       	st	X, r16
 5da:	12 97       	sbiw	r26, 0x02	; 2
 5dc:	13 96       	adiw	r26, 0x03	; 3
 5de:	1c 93       	st	X, r17
 5e0:	27 c0       	rjmp	.+78     	; 0x630 <malloc+0x98>
 5e2:	00 93 e0 00 	sts	0x00E0, r16	; 0x8000e0 <__flp>
 5e6:	10 93 e1 00 	sts	0x00E1, r17	; 0x8000e1 <__flp+0x1>
 5ea:	22 c0       	rjmp	.+68     	; 0x630 <malloc+0x98>
 5ec:	21 15       	cp	r18, r1
 5ee:	31 05       	cpc	r19, r1
 5f0:	19 f0       	breq	.+6      	; 0x5f8 <malloc+0x60>
 5f2:	42 17       	cp	r20, r18
 5f4:	53 07       	cpc	r21, r19
 5f6:	18 f4       	brcc	.+6      	; 0x5fe <malloc+0x66>
 5f8:	9a 01       	movw	r18, r20
 5fa:	bd 01       	movw	r22, r26
 5fc:	ef 01       	movw	r28, r30
 5fe:	df 01       	movw	r26, r30
 600:	f8 01       	movw	r30, r16
 602:	db cf       	rjmp	.-74     	; 0x5ba <malloc+0x22>
 604:	21 15       	cp	r18, r1
 606:	31 05       	cpc	r19, r1
 608:	f9 f0       	breq	.+62     	; 0x648 <malloc+0xb0>
 60a:	28 1b       	sub	r18, r24
 60c:	39 0b       	sbc	r19, r25
 60e:	24 30       	cpi	r18, 0x04	; 4
 610:	31 05       	cpc	r19, r1
 612:	80 f4       	brcc	.+32     	; 0x634 <malloc+0x9c>
 614:	8a 81       	ldd	r24, Y+2	; 0x02
 616:	9b 81       	ldd	r25, Y+3	; 0x03
 618:	61 15       	cp	r22, r1
 61a:	71 05       	cpc	r23, r1
 61c:	21 f0       	breq	.+8      	; 0x626 <malloc+0x8e>
 61e:	fb 01       	movw	r30, r22
 620:	93 83       	std	Z+3, r25	; 0x03
 622:	82 83       	std	Z+2, r24	; 0x02
 624:	04 c0       	rjmp	.+8      	; 0x62e <malloc+0x96>
 626:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <__flp+0x1>
 62a:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__flp>
 62e:	fe 01       	movw	r30, r28
 630:	32 96       	adiw	r30, 0x02	; 2
 632:	44 c0       	rjmp	.+136    	; 0x6bc <malloc+0x124>
 634:	fe 01       	movw	r30, r28
 636:	e2 0f       	add	r30, r18
 638:	f3 1f       	adc	r31, r19
 63a:	81 93       	st	Z+, r24
 63c:	91 93       	st	Z+, r25
 63e:	22 50       	subi	r18, 0x02	; 2
 640:	31 09       	sbc	r19, r1
 642:	39 83       	std	Y+1, r19	; 0x01
 644:	28 83       	st	Y, r18
 646:	3a c0       	rjmp	.+116    	; 0x6bc <malloc+0x124>
 648:	20 91 de 00 	lds	r18, 0x00DE	; 0x8000de <__data_end>
 64c:	30 91 df 00 	lds	r19, 0x00DF	; 0x8000df <__data_end+0x1>
 650:	23 2b       	or	r18, r19
 652:	41 f4       	brne	.+16     	; 0x664 <malloc+0xcc>
 654:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
 658:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
 65c:	30 93 df 00 	sts	0x00DF, r19	; 0x8000df <__data_end+0x1>
 660:	20 93 de 00 	sts	0x00DE, r18	; 0x8000de <__data_end>
 664:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 668:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
 66c:	21 15       	cp	r18, r1
 66e:	31 05       	cpc	r19, r1
 670:	41 f4       	brne	.+16     	; 0x682 <malloc+0xea>
 672:	2d b7       	in	r18, 0x3d	; 61
 674:	3e b7       	in	r19, 0x3e	; 62
 676:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
 67a:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
 67e:	24 1b       	sub	r18, r20
 680:	35 0b       	sbc	r19, r21
 682:	e0 91 de 00 	lds	r30, 0x00DE	; 0x8000de <__data_end>
 686:	f0 91 df 00 	lds	r31, 0x00DF	; 0x8000df <__data_end+0x1>
 68a:	e2 17       	cp	r30, r18
 68c:	f3 07       	cpc	r31, r19
 68e:	a0 f4       	brcc	.+40     	; 0x6b8 <malloc+0x120>
 690:	2e 1b       	sub	r18, r30
 692:	3f 0b       	sbc	r19, r31
 694:	28 17       	cp	r18, r24
 696:	39 07       	cpc	r19, r25
 698:	78 f0       	brcs	.+30     	; 0x6b8 <malloc+0x120>
 69a:	ac 01       	movw	r20, r24
 69c:	4e 5f       	subi	r20, 0xFE	; 254
 69e:	5f 4f       	sbci	r21, 0xFF	; 255
 6a0:	24 17       	cp	r18, r20
 6a2:	35 07       	cpc	r19, r21
 6a4:	48 f0       	brcs	.+18     	; 0x6b8 <malloc+0x120>
 6a6:	4e 0f       	add	r20, r30
 6a8:	5f 1f       	adc	r21, r31
 6aa:	50 93 df 00 	sts	0x00DF, r21	; 0x8000df <__data_end+0x1>
 6ae:	40 93 de 00 	sts	0x00DE, r20	; 0x8000de <__data_end>
 6b2:	81 93       	st	Z+, r24
 6b4:	91 93       	st	Z+, r25
 6b6:	02 c0       	rjmp	.+4      	; 0x6bc <malloc+0x124>
 6b8:	e0 e0       	ldi	r30, 0x00	; 0
 6ba:	f0 e0       	ldi	r31, 0x00	; 0
 6bc:	cf 01       	movw	r24, r30
 6be:	df 91       	pop	r29
 6c0:	cf 91       	pop	r28
 6c2:	1f 91       	pop	r17
 6c4:	0f 91       	pop	r16
 6c6:	08 95       	ret

000006c8 <free>:
 6c8:	cf 93       	push	r28
 6ca:	df 93       	push	r29
 6cc:	00 97       	sbiw	r24, 0x00	; 0
 6ce:	09 f4       	brne	.+2      	; 0x6d2 <free+0xa>
 6d0:	81 c0       	rjmp	.+258    	; 0x7d4 <free+0x10c>
 6d2:	fc 01       	movw	r30, r24
 6d4:	32 97       	sbiw	r30, 0x02	; 2
 6d6:	13 82       	std	Z+3, r1	; 0x03
 6d8:	12 82       	std	Z+2, r1	; 0x02
 6da:	a0 91 e0 00 	lds	r26, 0x00E0	; 0x8000e0 <__flp>
 6de:	b0 91 e1 00 	lds	r27, 0x00E1	; 0x8000e1 <__flp+0x1>
 6e2:	10 97       	sbiw	r26, 0x00	; 0
 6e4:	81 f4       	brne	.+32     	; 0x706 <free+0x3e>
 6e6:	20 81       	ld	r18, Z
 6e8:	31 81       	ldd	r19, Z+1	; 0x01
 6ea:	82 0f       	add	r24, r18
 6ec:	93 1f       	adc	r25, r19
 6ee:	20 91 de 00 	lds	r18, 0x00DE	; 0x8000de <__data_end>
 6f2:	30 91 df 00 	lds	r19, 0x00DF	; 0x8000df <__data_end+0x1>
 6f6:	28 17       	cp	r18, r24
 6f8:	39 07       	cpc	r19, r25
 6fa:	51 f5       	brne	.+84     	; 0x750 <free+0x88>
 6fc:	f0 93 df 00 	sts	0x00DF, r31	; 0x8000df <__data_end+0x1>
 700:	e0 93 de 00 	sts	0x00DE, r30	; 0x8000de <__data_end>
 704:	67 c0       	rjmp	.+206    	; 0x7d4 <free+0x10c>
 706:	ed 01       	movw	r28, r26
 708:	20 e0       	ldi	r18, 0x00	; 0
 70a:	30 e0       	ldi	r19, 0x00	; 0
 70c:	ce 17       	cp	r28, r30
 70e:	df 07       	cpc	r29, r31
 710:	40 f4       	brcc	.+16     	; 0x722 <free+0x5a>
 712:	4a 81       	ldd	r20, Y+2	; 0x02
 714:	5b 81       	ldd	r21, Y+3	; 0x03
 716:	9e 01       	movw	r18, r28
 718:	41 15       	cp	r20, r1
 71a:	51 05       	cpc	r21, r1
 71c:	f1 f0       	breq	.+60     	; 0x75a <free+0x92>
 71e:	ea 01       	movw	r28, r20
 720:	f5 cf       	rjmp	.-22     	; 0x70c <free+0x44>
 722:	d3 83       	std	Z+3, r29	; 0x03
 724:	c2 83       	std	Z+2, r28	; 0x02
 726:	40 81       	ld	r20, Z
 728:	51 81       	ldd	r21, Z+1	; 0x01
 72a:	84 0f       	add	r24, r20
 72c:	95 1f       	adc	r25, r21
 72e:	c8 17       	cp	r28, r24
 730:	d9 07       	cpc	r29, r25
 732:	59 f4       	brne	.+22     	; 0x74a <free+0x82>
 734:	88 81       	ld	r24, Y
 736:	99 81       	ldd	r25, Y+1	; 0x01
 738:	84 0f       	add	r24, r20
 73a:	95 1f       	adc	r25, r21
 73c:	02 96       	adiw	r24, 0x02	; 2
 73e:	91 83       	std	Z+1, r25	; 0x01
 740:	80 83       	st	Z, r24
 742:	8a 81       	ldd	r24, Y+2	; 0x02
 744:	9b 81       	ldd	r25, Y+3	; 0x03
 746:	93 83       	std	Z+3, r25	; 0x03
 748:	82 83       	std	Z+2, r24	; 0x02
 74a:	21 15       	cp	r18, r1
 74c:	31 05       	cpc	r19, r1
 74e:	29 f4       	brne	.+10     	; 0x75a <free+0x92>
 750:	f0 93 e1 00 	sts	0x00E1, r31	; 0x8000e1 <__flp+0x1>
 754:	e0 93 e0 00 	sts	0x00E0, r30	; 0x8000e0 <__flp>
 758:	3d c0       	rjmp	.+122    	; 0x7d4 <free+0x10c>
 75a:	e9 01       	movw	r28, r18
 75c:	fb 83       	std	Y+3, r31	; 0x03
 75e:	ea 83       	std	Y+2, r30	; 0x02
 760:	49 91       	ld	r20, Y+
 762:	59 91       	ld	r21, Y+
 764:	c4 0f       	add	r28, r20
 766:	d5 1f       	adc	r29, r21
 768:	ec 17       	cp	r30, r28
 76a:	fd 07       	cpc	r31, r29
 76c:	61 f4       	brne	.+24     	; 0x786 <free+0xbe>
 76e:	80 81       	ld	r24, Z
 770:	91 81       	ldd	r25, Z+1	; 0x01
 772:	84 0f       	add	r24, r20
 774:	95 1f       	adc	r25, r21
 776:	02 96       	adiw	r24, 0x02	; 2
 778:	e9 01       	movw	r28, r18
 77a:	99 83       	std	Y+1, r25	; 0x01
 77c:	88 83       	st	Y, r24
 77e:	82 81       	ldd	r24, Z+2	; 0x02
 780:	93 81       	ldd	r25, Z+3	; 0x03
 782:	9b 83       	std	Y+3, r25	; 0x03
 784:	8a 83       	std	Y+2, r24	; 0x02
 786:	e0 e0       	ldi	r30, 0x00	; 0
 788:	f0 e0       	ldi	r31, 0x00	; 0
 78a:	12 96       	adiw	r26, 0x02	; 2
 78c:	8d 91       	ld	r24, X+
 78e:	9c 91       	ld	r25, X
 790:	13 97       	sbiw	r26, 0x03	; 3
 792:	00 97       	sbiw	r24, 0x00	; 0
 794:	19 f0       	breq	.+6      	; 0x79c <free+0xd4>
 796:	fd 01       	movw	r30, r26
 798:	dc 01       	movw	r26, r24
 79a:	f7 cf       	rjmp	.-18     	; 0x78a <free+0xc2>
 79c:	8d 91       	ld	r24, X+
 79e:	9c 91       	ld	r25, X
 7a0:	11 97       	sbiw	r26, 0x01	; 1
 7a2:	9d 01       	movw	r18, r26
 7a4:	2e 5f       	subi	r18, 0xFE	; 254
 7a6:	3f 4f       	sbci	r19, 0xFF	; 255
 7a8:	82 0f       	add	r24, r18
 7aa:	93 1f       	adc	r25, r19
 7ac:	20 91 de 00 	lds	r18, 0x00DE	; 0x8000de <__data_end>
 7b0:	30 91 df 00 	lds	r19, 0x00DF	; 0x8000df <__data_end+0x1>
 7b4:	28 17       	cp	r18, r24
 7b6:	39 07       	cpc	r19, r25
 7b8:	69 f4       	brne	.+26     	; 0x7d4 <free+0x10c>
 7ba:	30 97       	sbiw	r30, 0x00	; 0
 7bc:	29 f4       	brne	.+10     	; 0x7c8 <free+0x100>
 7be:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__flp+0x1>
 7c2:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__flp>
 7c6:	02 c0       	rjmp	.+4      	; 0x7cc <free+0x104>
 7c8:	13 82       	std	Z+3, r1	; 0x03
 7ca:	12 82       	std	Z+2, r1	; 0x02
 7cc:	b0 93 df 00 	sts	0x00DF, r27	; 0x8000df <__data_end+0x1>
 7d0:	a0 93 de 00 	sts	0x00DE, r26	; 0x8000de <__data_end>
 7d4:	df 91       	pop	r29
 7d6:	cf 91       	pop	r28
 7d8:	08 95       	ret

000007da <realloc>:
 7da:	a0 e0       	ldi	r26, 0x00	; 0
 7dc:	b0 e0       	ldi	r27, 0x00	; 0
 7de:	e3 ef       	ldi	r30, 0xF3	; 243
 7e0:	f3 e0       	ldi	r31, 0x03	; 3
 7e2:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <__prologue_saves__+0x8>
 7e6:	ec 01       	movw	r28, r24
 7e8:	00 97       	sbiw	r24, 0x00	; 0
 7ea:	21 f4       	brne	.+8      	; 0x7f4 <realloc+0x1a>
 7ec:	cb 01       	movw	r24, r22
 7ee:	0e 94 cc 02 	call	0x598	; 0x598 <malloc>
 7f2:	b4 c0       	rjmp	.+360    	; 0x95c <realloc+0x182>
 7f4:	fc 01       	movw	r30, r24
 7f6:	e6 0f       	add	r30, r22
 7f8:	f7 1f       	adc	r31, r23
 7fa:	9c 01       	movw	r18, r24
 7fc:	22 50       	subi	r18, 0x02	; 2
 7fe:	31 09       	sbc	r19, r1
 800:	e2 17       	cp	r30, r18
 802:	f3 07       	cpc	r31, r19
 804:	08 f4       	brcc	.+2      	; 0x808 <realloc+0x2e>
 806:	a8 c0       	rjmp	.+336    	; 0x958 <realloc+0x17e>
 808:	d9 01       	movw	r26, r18
 80a:	0d 91       	ld	r16, X+
 80c:	1c 91       	ld	r17, X
 80e:	11 97       	sbiw	r26, 0x01	; 1
 810:	06 17       	cp	r16, r22
 812:	17 07       	cpc	r17, r23
 814:	b0 f0       	brcs	.+44     	; 0x842 <realloc+0x68>
 816:	05 30       	cpi	r16, 0x05	; 5
 818:	11 05       	cpc	r17, r1
 81a:	08 f4       	brcc	.+2      	; 0x81e <realloc+0x44>
 81c:	9b c0       	rjmp	.+310    	; 0x954 <realloc+0x17a>
 81e:	c8 01       	movw	r24, r16
 820:	04 97       	sbiw	r24, 0x04	; 4
 822:	86 17       	cp	r24, r22
 824:	97 07       	cpc	r25, r23
 826:	08 f4       	brcc	.+2      	; 0x82a <realloc+0x50>
 828:	95 c0       	rjmp	.+298    	; 0x954 <realloc+0x17a>
 82a:	02 50       	subi	r16, 0x02	; 2
 82c:	11 09       	sbc	r17, r1
 82e:	06 1b       	sub	r16, r22
 830:	17 0b       	sbc	r17, r23
 832:	01 93       	st	Z+, r16
 834:	11 93       	st	Z+, r17
 836:	6d 93       	st	X+, r22
 838:	7c 93       	st	X, r23
 83a:	cf 01       	movw	r24, r30
 83c:	0e 94 64 03 	call	0x6c8	; 0x6c8 <free>
 840:	89 c0       	rjmp	.+274    	; 0x954 <realloc+0x17a>
 842:	5b 01       	movw	r10, r22
 844:	a0 1a       	sub	r10, r16
 846:	b1 0a       	sbc	r11, r17
 848:	4c 01       	movw	r8, r24
 84a:	80 0e       	add	r8, r16
 84c:	91 1e       	adc	r9, r17
 84e:	a0 91 e0 00 	lds	r26, 0x00E0	; 0x8000e0 <__flp>
 852:	b0 91 e1 00 	lds	r27, 0x00E1	; 0x8000e1 <__flp+0x1>
 856:	61 2c       	mov	r6, r1
 858:	71 2c       	mov	r7, r1
 85a:	e1 2c       	mov	r14, r1
 85c:	f1 2c       	mov	r15, r1
 85e:	10 97       	sbiw	r26, 0x00	; 0
 860:	09 f4       	brne	.+2      	; 0x864 <realloc+0x8a>
 862:	46 c0       	rjmp	.+140    	; 0x8f0 <realloc+0x116>
 864:	8d 91       	ld	r24, X+
 866:	9c 91       	ld	r25, X
 868:	11 97       	sbiw	r26, 0x01	; 1
 86a:	a8 15       	cp	r26, r8
 86c:	b9 05       	cpc	r27, r9
 86e:	b1 f5       	brne	.+108    	; 0x8dc <realloc+0x102>
 870:	6c 01       	movw	r12, r24
 872:	42 e0       	ldi	r20, 0x02	; 2
 874:	c4 0e       	add	r12, r20
 876:	d1 1c       	adc	r13, r1
 878:	ca 14       	cp	r12, r10
 87a:	db 04       	cpc	r13, r11
 87c:	78 f1       	brcs	.+94     	; 0x8dc <realloc+0x102>
 87e:	4c 01       	movw	r8, r24
 880:	8a 18       	sub	r8, r10
 882:	9b 08       	sbc	r9, r11
 884:	64 01       	movw	r12, r8
 886:	42 e0       	ldi	r20, 0x02	; 2
 888:	c4 0e       	add	r12, r20
 88a:	d1 1c       	adc	r13, r1
 88c:	12 96       	adiw	r26, 0x02	; 2
 88e:	bc 90       	ld	r11, X
 890:	12 97       	sbiw	r26, 0x02	; 2
 892:	13 96       	adiw	r26, 0x03	; 3
 894:	ac 91       	ld	r26, X
 896:	b5 e0       	ldi	r27, 0x05	; 5
 898:	cb 16       	cp	r12, r27
 89a:	d1 04       	cpc	r13, r1
 89c:	40 f0       	brcs	.+16     	; 0x8ae <realloc+0xd4>
 89e:	b2 82       	std	Z+2, r11	; 0x02
 8a0:	a3 83       	std	Z+3, r26	; 0x03
 8a2:	91 82       	std	Z+1, r9	; 0x01
 8a4:	80 82       	st	Z, r8
 8a6:	d9 01       	movw	r26, r18
 8a8:	6d 93       	st	X+, r22
 8aa:	7c 93       	st	X, r23
 8ac:	09 c0       	rjmp	.+18     	; 0x8c0 <realloc+0xe6>
 8ae:	0e 5f       	subi	r16, 0xFE	; 254
 8b0:	1f 4f       	sbci	r17, 0xFF	; 255
 8b2:	80 0f       	add	r24, r16
 8b4:	91 1f       	adc	r25, r17
 8b6:	f9 01       	movw	r30, r18
 8b8:	91 83       	std	Z+1, r25	; 0x01
 8ba:	80 83       	st	Z, r24
 8bc:	eb 2d       	mov	r30, r11
 8be:	fa 2f       	mov	r31, r26
 8c0:	e1 14       	cp	r14, r1
 8c2:	f1 04       	cpc	r15, r1
 8c4:	31 f0       	breq	.+12     	; 0x8d2 <realloc+0xf8>
 8c6:	d7 01       	movw	r26, r14
 8c8:	13 96       	adiw	r26, 0x03	; 3
 8ca:	fc 93       	st	X, r31
 8cc:	ee 93       	st	-X, r30
 8ce:	12 97       	sbiw	r26, 0x02	; 2
 8d0:	41 c0       	rjmp	.+130    	; 0x954 <realloc+0x17a>
 8d2:	f0 93 e1 00 	sts	0x00E1, r31	; 0x8000e1 <__flp+0x1>
 8d6:	e0 93 e0 00 	sts	0x00E0, r30	; 0x8000e0 <__flp>
 8da:	3c c0       	rjmp	.+120    	; 0x954 <realloc+0x17a>
 8dc:	68 16       	cp	r6, r24
 8de:	79 06       	cpc	r7, r25
 8e0:	08 f4       	brcc	.+2      	; 0x8e4 <realloc+0x10a>
 8e2:	3c 01       	movw	r6, r24
 8e4:	7d 01       	movw	r14, r26
 8e6:	12 96       	adiw	r26, 0x02	; 2
 8e8:	0d 90       	ld	r0, X+
 8ea:	bc 91       	ld	r27, X
 8ec:	a0 2d       	mov	r26, r0
 8ee:	b7 cf       	rjmp	.-146    	; 0x85e <realloc+0x84>
 8f0:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__data_end>
 8f4:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <__data_end+0x1>
 8f8:	88 16       	cp	r8, r24
 8fa:	99 06       	cpc	r9, r25
 8fc:	e1 f4       	brne	.+56     	; 0x936 <realloc+0x15c>
 8fe:	66 16       	cp	r6, r22
 900:	77 06       	cpc	r7, r23
 902:	c8 f4       	brcc	.+50     	; 0x936 <realloc+0x15c>
 904:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 908:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 90c:	00 97       	sbiw	r24, 0x00	; 0
 90e:	41 f4       	brne	.+16     	; 0x920 <realloc+0x146>
 910:	8d b7       	in	r24, 0x3d	; 61
 912:	9e b7       	in	r25, 0x3e	; 62
 914:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
 918:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
 91c:	84 1b       	sub	r24, r20
 91e:	95 0b       	sbc	r25, r21
 920:	e8 17       	cp	r30, r24
 922:	f9 07       	cpc	r31, r25
 924:	c8 f4       	brcc	.+50     	; 0x958 <realloc+0x17e>
 926:	f0 93 df 00 	sts	0x00DF, r31	; 0x8000df <__data_end+0x1>
 92a:	e0 93 de 00 	sts	0x00DE, r30	; 0x8000de <__data_end>
 92e:	f9 01       	movw	r30, r18
 930:	71 83       	std	Z+1, r23	; 0x01
 932:	60 83       	st	Z, r22
 934:	0f c0       	rjmp	.+30     	; 0x954 <realloc+0x17a>
 936:	cb 01       	movw	r24, r22
 938:	0e 94 cc 02 	call	0x598	; 0x598 <malloc>
 93c:	7c 01       	movw	r14, r24
 93e:	00 97       	sbiw	r24, 0x00	; 0
 940:	59 f0       	breq	.+22     	; 0x958 <realloc+0x17e>
 942:	a8 01       	movw	r20, r16
 944:	be 01       	movw	r22, r28
 946:	0e 94 b3 04 	call	0x966	; 0x966 <memcpy>
 94a:	ce 01       	movw	r24, r28
 94c:	0e 94 64 03 	call	0x6c8	; 0x6c8 <free>
 950:	c7 01       	movw	r24, r14
 952:	04 c0       	rjmp	.+8      	; 0x95c <realloc+0x182>
 954:	ce 01       	movw	r24, r28
 956:	02 c0       	rjmp	.+4      	; 0x95c <realloc+0x182>
 958:	80 e0       	ldi	r24, 0x00	; 0
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	cd b7       	in	r28, 0x3d	; 61
 95e:	de b7       	in	r29, 0x3e	; 62
 960:	ee e0       	ldi	r30, 0x0E	; 14
 962:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <__epilogue_restores__+0x8>

00000966 <memcpy>:
 966:	fb 01       	movw	r30, r22
 968:	dc 01       	movw	r26, r24
 96a:	02 c0       	rjmp	.+4      	; 0x970 <memcpy+0xa>
 96c:	01 90       	ld	r0, Z+
 96e:	0d 92       	st	X+, r0
 970:	41 50       	subi	r20, 0x01	; 1
 972:	50 40       	sbci	r21, 0x00	; 0
 974:	d8 f7       	brcc	.-10     	; 0x96c <memcpy+0x6>
 976:	08 95       	ret

00000978 <memset>:
 978:	dc 01       	movw	r26, r24
 97a:	01 c0       	rjmp	.+2      	; 0x97e <memset+0x6>
 97c:	6d 93       	st	X+, r22
 97e:	41 50       	subi	r20, 0x01	; 1
 980:	50 40       	sbci	r21, 0x00	; 0
 982:	e0 f7       	brcc	.-8      	; 0x97c <memset+0x4>
 984:	08 95       	ret

00000986 <strcmp>:
 986:	fb 01       	movw	r30, r22
 988:	dc 01       	movw	r26, r24
 98a:	8d 91       	ld	r24, X+
 98c:	01 90       	ld	r0, Z+
 98e:	80 19       	sub	r24, r0
 990:	01 10       	cpse	r0, r1
 992:	d9 f3       	breq	.-10     	; 0x98a <strcmp+0x4>
 994:	99 0b       	sbc	r25, r25
 996:	08 95       	ret

00000998 <__prologue_saves__>:
 998:	2f 92       	push	r2
 99a:	3f 92       	push	r3
 99c:	4f 92       	push	r4
 99e:	5f 92       	push	r5
 9a0:	6f 92       	push	r6
 9a2:	7f 92       	push	r7
 9a4:	8f 92       	push	r8
 9a6:	9f 92       	push	r9
 9a8:	af 92       	push	r10
 9aa:	bf 92       	push	r11
 9ac:	cf 92       	push	r12
 9ae:	df 92       	push	r13
 9b0:	ef 92       	push	r14
 9b2:	ff 92       	push	r15
 9b4:	0f 93       	push	r16
 9b6:	1f 93       	push	r17
 9b8:	cf 93       	push	r28
 9ba:	df 93       	push	r29
 9bc:	cd b7       	in	r28, 0x3d	; 61
 9be:	de b7       	in	r29, 0x3e	; 62
 9c0:	ca 1b       	sub	r28, r26
 9c2:	db 0b       	sbc	r29, r27
 9c4:	0f b6       	in	r0, 0x3f	; 63
 9c6:	f8 94       	cli
 9c8:	de bf       	out	0x3e, r29	; 62
 9ca:	0f be       	out	0x3f, r0	; 63
 9cc:	cd bf       	out	0x3d, r28	; 61
 9ce:	09 94       	ijmp

000009d0 <__epilogue_restores__>:
 9d0:	2a 88       	ldd	r2, Y+18	; 0x12
 9d2:	39 88       	ldd	r3, Y+17	; 0x11
 9d4:	48 88       	ldd	r4, Y+16	; 0x10
 9d6:	5f 84       	ldd	r5, Y+15	; 0x0f
 9d8:	6e 84       	ldd	r6, Y+14	; 0x0e
 9da:	7d 84       	ldd	r7, Y+13	; 0x0d
 9dc:	8c 84       	ldd	r8, Y+12	; 0x0c
 9de:	9b 84       	ldd	r9, Y+11	; 0x0b
 9e0:	aa 84       	ldd	r10, Y+10	; 0x0a
 9e2:	b9 84       	ldd	r11, Y+9	; 0x09
 9e4:	c8 84       	ldd	r12, Y+8	; 0x08
 9e6:	df 80       	ldd	r13, Y+7	; 0x07
 9e8:	ee 80       	ldd	r14, Y+6	; 0x06
 9ea:	fd 80       	ldd	r15, Y+5	; 0x05
 9ec:	0c 81       	ldd	r16, Y+4	; 0x04
 9ee:	1b 81       	ldd	r17, Y+3	; 0x03
 9f0:	aa 81       	ldd	r26, Y+2	; 0x02
 9f2:	b9 81       	ldd	r27, Y+1	; 0x01
 9f4:	ce 0f       	add	r28, r30
 9f6:	d1 1d       	adc	r29, r1
 9f8:	0f b6       	in	r0, 0x3f	; 63
 9fa:	f8 94       	cli
 9fc:	de bf       	out	0x3e, r29	; 62
 9fe:	0f be       	out	0x3f, r0	; 63
 a00:	cd bf       	out	0x3d, r28	; 61
 a02:	ed 01       	movw	r28, r26
 a04:	08 95       	ret

00000a06 <_exit>:
 a06:	f8 94       	cli

00000a08 <__stop_program>:
 a08:	ff cf       	rjmp	.-2      	; 0xa08 <__stop_program>
