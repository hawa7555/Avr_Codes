
Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000733  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000617  00000000  00000000  00000933  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d3  00000000  00000000  00000f4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001220  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000346  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000189  00000000  00000000  000015ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001757  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  64:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <int0_init>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
void int0_init()
{
	SREG=SREG|(1<<7);
  6c:	8f b7       	in	r24, 0x3f	; 63
  6e:	80 68       	ori	r24, 0x80	; 128
  70:	8f bf       	out	0x3f, r24	; 63
	//sei();
	GICR=GICR|(1<<INT0);
  72:	8b b7       	in	r24, 0x3b	; 59
  74:	80 64       	ori	r24, 0x40	; 64
  76:	8b bf       	out	0x3b, r24	; 59
	MCUCR=MCUCR|(3<<0);
  78:	85 b7       	in	r24, 0x35	; 53
  7a:	83 60       	ori	r24, 0x03	; 3
  7c:	85 bf       	out	0x35, r24	; 53
  7e:	08 95       	ret

00000080 <__vector_1>:
 }
 
ISR(INT0_vect)
{
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
  8a:	2f 93       	push	r18
  8c:	3f 93       	push	r19
  8e:	4f 93       	push	r20
  90:	8f 93       	push	r24
  92:	9f 93       	push	r25
  94:	8a e0       	ldi	r24, 0x0A	; 10
  96:	90 e0       	ldi	r25, 0x00	; 0
	for(int i=0;i<10;i++)
	{
	 PORTA=PORTA|(1<<0);
  98:	d8 9a       	sbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	2f e7       	ldi	r18, 0x7F	; 127
  9c:	3e ed       	ldi	r19, 0xDE	; 222
  9e:	4f e0       	ldi	r20, 0x0F	; 15
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	30 40       	sbci	r19, 0x00	; 0
  a4:	40 40       	sbci	r20, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <__vector_1+0x20>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <__vector_1+0x2a>
  aa:	00 00       	nop
	 _delay_ms(650);
	 PORTA=PORTA&~(1<<0);
  ac:	d8 98       	cbi	0x1b, 0	; 27
  ae:	2f e7       	ldi	r18, 0x7F	; 127
  b0:	3e ed       	ldi	r19, 0xDE	; 222
  b2:	4f e0       	ldi	r20, 0x0F	; 15
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	30 40       	sbci	r19, 0x00	; 0
  b8:	40 40       	sbci	r20, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <__vector_1+0x34>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <__vector_1+0x3e>
  be:	00 00       	nop
  c0:	01 97       	sbiw	r24, 0x01	; 1
	MCUCR=MCUCR|(3<<0);
 }
 
ISR(INT0_vect)
{
	for(int i=0;i<10;i++)
  c2:	51 f7       	brne	.-44     	; 0x98 <__vector_1+0x18>
	 PORTA=PORTA|(1<<0);
	 _delay_ms(650);
	 PORTA=PORTA&~(1<<0);
	 _delay_ms(650);
	 }
}
  c4:	9f 91       	pop	r25
  c6:	8f 91       	pop	r24
  c8:	4f 91       	pop	r20
  ca:	3f 91       	pop	r19
  cc:	2f 91       	pop	r18
  ce:	0f 90       	pop	r0
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	0f 90       	pop	r0
  d4:	1f 90       	pop	r1
  d6:	18 95       	reti

000000d8 <main>:
 int main()
 {
	 int0_init();
  d8:	0e 94 36 00 	call	0x6c	; 0x6c <int0_init>
	 DDRA=DDRA|(1<<0);
  dc:	d0 9a       	sbi	0x1a, 0	; 26
	 DDRB=DDRB|(1<<0);
  de:	b8 9a       	sbi	0x17, 0	; 23
	 while(1)
	 {
	   PORTB=PORTB|(1<<0);
  e0:	c0 9a       	sbi	0x18, 0	; 24
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	86 e1       	ldi	r24, 0x16	; 22
  e6:	91 e1       	ldi	r25, 0x11	; 17
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x10>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x1a>
  f2:	00 00       	nop
	  _delay_ms(700);
	  PORTB=PORTB&~(1<<0);
  f4:	c0 98       	cbi	0x18, 0	; 24
  f6:	2f ef       	ldi	r18, 0xFF	; 255
  f8:	86 e1       	ldi	r24, 0x16	; 22
  fa:	91 e1       	ldi	r25, 0x11	; 17
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <main+0x24>
 104:	00 c0       	rjmp	.+0      	; 0x106 <main+0x2e>
 106:	00 00       	nop
 108:	eb cf       	rjmp	.-42     	; 0xe0 <main+0x8>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
