
Lcd_checking.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000001f4  00000268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000027a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000095e  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000673  00000000  00000000  00000c86  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a7  00000000  00000000  000012f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  000016a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035e  00000000  00000000  00001730  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000376  00000000  00000000  00001a8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001e04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ef       	ldi	r30, 0xF4	; 244
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <main>
  7a:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_cmd>:
#define F_CPU 8000000UL
#include <avr/io.h>
#include <util/delay.h>
void lcd_cmd(char x)
{
	PORTA=x&(0xF0);
  82:	98 2f       	mov	r25, r24
  84:	90 7f       	andi	r25, 0xF0	; 240
  86:	9b bb       	out	0x1b, r25	; 27
	PORTA=PORTA&~(1<<0);   //RS=0
  88:	d8 98       	cbi	0x1b, 0	; 27
	PORTA=PORTA&~(1<<1);   //RW=0
  8a:	d9 98       	cbi	0x1b, 1	; 27
	PORTA=PORTA|(1<<2);    //EN=1
  8c:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	ef ec       	ldi	r30, 0xCF	; 207
  90:	f7 e0       	ldi	r31, 0x07	; 7
  92:	31 97       	sbiw	r30, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <lcd_cmd+0x10>
  96:	00 c0       	rjmp	.+0      	; 0x98 <lcd_cmd+0x16>
  98:	00 00       	nop
	_delay_ms(1);
	PORTA=PORTA&~(1<<2);   //EN=0
  9a:	da 98       	cbi	0x1b, 2	; 27
  9c:	ef ec       	ldi	r30, 0xCF	; 207
  9e:	f7 e0       	ldi	r31, 0x07	; 7
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <lcd_cmd+0x1e>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <lcd_cmd+0x24>
  a6:	00 00       	nop
	_delay_ms(1);
	//lcd_cmd(x<<4);
	PORTA=(x<<4)&(0xF0);
  a8:	f0 e1       	ldi	r31, 0x10	; 16
  aa:	8f 9f       	mul	r24, r31
  ac:	c0 01       	movw	r24, r0
  ae:	11 24       	eor	r1, r1
  b0:	8b bb       	out	0x1b, r24	; 27
	PORTA=PORTA&~(1<<0);   //RS=0
  b2:	d8 98       	cbi	0x1b, 0	; 27
	PORTA=PORTA&~(1<<1);   //RW=0
  b4:	d9 98       	cbi	0x1b, 1	; 27
	PORTA=PORTA|(1<<2);    //EN=1
  b6:	da 9a       	sbi	0x1b, 2	; 27
  b8:	8f ec       	ldi	r24, 0xCF	; 207
  ba:	97 e0       	ldi	r25, 0x07	; 7
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <lcd_cmd+0x3a>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <lcd_cmd+0x40>
  c2:	00 00       	nop
	_delay_ms(1);
	PORTA=PORTA&~(1<<2);   //EN=0
  c4:	da 98       	cbi	0x1b, 2	; 27
  c6:	ef ec       	ldi	r30, 0xCF	; 207
  c8:	f7 e0       	ldi	r31, 0x07	; 7
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <lcd_cmd+0x48>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <lcd_cmd+0x4e>
  d0:	00 00       	nop
  d2:	08 95       	ret

000000d4 <init>:
	_delay_ms(1);
}
void init()
{
	DDRA=0xFF;
  d4:	8f ef       	ldi	r24, 0xFF	; 255
  d6:	8a bb       	out	0x1a, r24	; 26
	lcd_cmd(0x02);
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_cmd(0x28);
  de:	88 e2       	ldi	r24, 0x28	; 40
  e0:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_cmd(0x0E);
  e4:	8e e0       	ldi	r24, 0x0E	; 14
  e6:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	//lcd_cmd(0x01);
	//lcd_cmd(0x06);
	lcd_cmd(0x80);
  ea:	80 e8       	ldi	r24, 0x80	; 128
  ec:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
  f0:	08 95       	ret

000000f2 <lcd_data>:
}
void lcd_data(char x)
{
	PORTA=x&(0xF0);
  f2:	98 2f       	mov	r25, r24
  f4:	90 7f       	andi	r25, 0xF0	; 240
  f6:	9b bb       	out	0x1b, r25	; 27
	PORTA=PORTA|(1<<0);    //RS=1
  f8:	d8 9a       	sbi	0x1b, 0	; 27
	PORTA=PORTA&~(1<<1);   //RW=0
  fa:	d9 98       	cbi	0x1b, 1	; 27
	PORTA=PORTA|(1<<2);    //EN=1
  fc:	da 9a       	sbi	0x1b, 2	; 27
  fe:	ef ec       	ldi	r30, 0xCF	; 207
 100:	f7 e0       	ldi	r31, 0x07	; 7
 102:	31 97       	sbiw	r30, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <lcd_data+0x10>
 106:	00 c0       	rjmp	.+0      	; 0x108 <lcd_data+0x16>
 108:	00 00       	nop
	_delay_ms(1);
	PORTA=PORTA&~(1<<2);   //EN=0
 10a:	da 98       	cbi	0x1b, 2	; 27
 10c:	ef ec       	ldi	r30, 0xCF	; 207
 10e:	f7 e0       	ldi	r31, 0x07	; 7
 110:	31 97       	sbiw	r30, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_data+0x1e>
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd_data+0x24>
 116:	00 00       	nop
	_delay_ms(1);
	//lcd_data(x<<4);
	PORTA=(x<<4)&(0xF0);
 118:	f0 e1       	ldi	r31, 0x10	; 16
 11a:	8f 9f       	mul	r24, r31
 11c:	c0 01       	movw	r24, r0
 11e:	11 24       	eor	r1, r1
 120:	8b bb       	out	0x1b, r24	; 27
	PORTA=PORTA|(1<<0);    //RS=1
 122:	d8 9a       	sbi	0x1b, 0	; 27
	PORTA=PORTA&~(1<<1);   //RW=0
 124:	d9 98       	cbi	0x1b, 1	; 27
	PORTA=PORTA|(1<<2);    //EN=1
 126:	da 9a       	sbi	0x1b, 2	; 27
 128:	8f ec       	ldi	r24, 0xCF	; 207
 12a:	97 e0       	ldi	r25, 0x07	; 7
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_data+0x3a>
 130:	00 c0       	rjmp	.+0      	; 0x132 <lcd_data+0x40>
 132:	00 00       	nop
	_delay_ms(1);
	PORTA=PORTA&~(1<<2);
 134:	da 98       	cbi	0x1b, 2	; 27
 136:	ef ec       	ldi	r30, 0xCF	; 207
 138:	f7 e0       	ldi	r31, 0x07	; 7
 13a:	31 97       	sbiw	r30, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_data+0x48>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <lcd_data+0x4e>
 140:	00 00       	nop
 142:	08 95       	ret

00000144 <display>:
	_delay_ms(1);
}
void display()
{
 144:	cf 92       	push	r12
 146:	df 92       	push	r13
 148:	ef 92       	push	r14
 14a:	ff 92       	push	r15
 14c:	1f 93       	push	r17
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	cd b7       	in	r28, 0x3d	; 61
 154:	de b7       	in	r29, 0x3e	; 62
 156:	62 97       	sbiw	r28, 0x12	; 18
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	f8 94       	cli
 15c:	de bf       	out	0x3e, r29	; 62
 15e:	0f be       	out	0x3f, r0	; 63
 160:	cd bf       	out	0x3d, r28	; 61
	lcd_cmd(0x80);
 162:	80 e8       	ldi	r24, 0x80	; 128
 164:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	char a[]="Fuck it in my way";
 168:	82 e1       	ldi	r24, 0x12	; 18
 16a:	e0 e6       	ldi	r30, 0x60	; 96
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	de 01       	movw	r26, r28
 170:	11 96       	adiw	r26, 0x01	; 1
 172:	01 90       	ld	r0, Z+
 174:	0d 92       	st	X+, r0
 176:	8a 95       	dec	r24
 178:	e1 f7       	brne	.-8      	; 0x172 <display+0x2e>
	for(int i=0;a[i]!='\0';i++)
 17a:	19 81       	ldd	r17, Y+1	; 0x01
 17c:	11 23       	and	r17, r17
 17e:	11 f1       	breq	.+68     	; 0x1c4 <display+0x80>
 180:	6e 01       	movw	r12, r28
 182:	22 e0       	ldi	r18, 0x02	; 2
 184:	c2 0e       	add	r12, r18
 186:	d1 1c       	adc	r13, r1
 188:	e1 2c       	mov	r14, r1
 18a:	f1 2c       	mov	r15, r1
 18c:	07 c0       	rjmp	.+14     	; 0x19c <display+0x58>
	{
		if(i==16)
 18e:	80 e1       	ldi	r24, 0x10	; 16
 190:	e8 16       	cp	r14, r24
 192:	f1 04       	cpc	r15, r1
 194:	19 f4       	brne	.+6      	; 0x19c <display+0x58>
		{
			lcd_cmd(0xC0);
 196:	80 ec       	ldi	r24, 0xC0	; 192
 198:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
			}
		lcd_data(a[i]);
 19c:	81 2f       	mov	r24, r17
 19e:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_data>
 1a2:	9f ef       	ldi	r25, 0xFF	; 255
 1a4:	e2 e5       	ldi	r30, 0x52	; 82
 1a6:	f7 e0       	ldi	r31, 0x07	; 7
 1a8:	91 50       	subi	r25, 0x01	; 1
 1aa:	e0 40       	sbci	r30, 0x00	; 0
 1ac:	f0 40       	sbci	r31, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <display+0x64>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <display+0x6e>
 1b2:	00 00       	nop
}
void display()
{
	lcd_cmd(0x80);
	char a[]="Fuck it in my way";
	for(int i=0;a[i]!='\0';i++)
 1b4:	2f ef       	ldi	r18, 0xFF	; 255
 1b6:	e2 1a       	sub	r14, r18
 1b8:	f2 0a       	sbc	r15, r18
 1ba:	f6 01       	movw	r30, r12
 1bc:	11 91       	ld	r17, Z+
 1be:	6f 01       	movw	r12, r30
 1c0:	11 11       	cpse	r17, r1
 1c2:	e5 cf       	rjmp	.-54     	; 0x18e <display+0x4a>
		lcd_data(a[i]);
		//lcd_cmd(0x06);
		_delay_ms(300);
	}
	
}
 1c4:	62 96       	adiw	r28, 0x12	; 18
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	f8 94       	cli
 1ca:	de bf       	out	0x3e, r29	; 62
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	cd bf       	out	0x3d, r28	; 61
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	1f 91       	pop	r17
 1d6:	ff 90       	pop	r15
 1d8:	ef 90       	pop	r14
 1da:	df 90       	pop	r13
 1dc:	cf 90       	pop	r12
 1de:	08 95       	ret

000001e0 <main>:
void main()
{
	init();
 1e0:	0e 94 6a 00 	call	0xd4	; 0xd4 <init>
	while(1)
	{
		display();
 1e4:	0e 94 a2 00 	call	0x144	; 0x144 <display>
		lcd_cmd(0x01);
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 1ee:	fa cf       	rjmp	.-12     	; 0x1e4 <main+0x4>

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>
