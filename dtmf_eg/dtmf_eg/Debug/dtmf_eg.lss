
dtmf_eg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005c3  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000054a  00000000  00000000  0000075f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000204  00000000  00000000  00000ca9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e2  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001a  00000000  00000000  000011b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define Right    0b00000010
#define Stop 	 0b00000000
#define BOT PORTA
int main()
{
	DDRB=DDRB &~ 0x0F;
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	80 7f       	andi	r24, 0xF0	; 240
  70:	87 bb       	out	0x17, r24	; 23
	DDRA=DDRA | (0x0F);
  72:	8a b3       	in	r24, 0x1a	; 26
  74:	8f 60       	ori	r24, 0x0F	; 15
  76:	8a bb       	out	0x1a, r24	; 26
		x=x & 0x0F;
		switch(x)
		{
			case 2: BOT=Forward;break;
			case 4: BOT=Left;break;
			case 6: BOT=Right;break;
  78:	42 e0       	ldi	r20, 0x02	; 2
			case 8: BOT=Backward;break;
  7a:	35 e0       	ldi	r19, 0x05	; 5
	{
		x=PINB;
		x=x & 0x0F;
		switch(x)
		{
			case 2: BOT=Forward;break;
  7c:	2a e0       	ldi	r18, 0x0A	; 10
			case 4: BOT=Left;break;
  7e:	98 e0       	ldi	r25, 0x08	; 8
	DDRB=DDRB &~ 0x0F;
	DDRA=DDRA | (0x0F);
	int x;
	while(1)
	{
		x=PINB;
  80:	86 b3       	in	r24, 0x16	; 22
		x=x & 0x0F;
		switch(x)
  82:	8f 70       	andi	r24, 0x0F	; 15
  84:	85 30       	cpi	r24, 0x05	; 5
  86:	99 f0       	breq	.+38     	; 0xae <main+0x42>
  88:	28 f4       	brcc	.+10     	; 0x94 <main+0x28>
  8a:	82 30       	cpi	r24, 0x02	; 2
  8c:	41 f0       	breq	.+16     	; 0x9e <main+0x32>
  8e:	84 30       	cpi	r24, 0x04	; 4
  90:	41 f0       	breq	.+16     	; 0xa2 <main+0x36>
  92:	0f c0       	rjmp	.+30     	; 0xb2 <main+0x46>
  94:	86 30       	cpi	r24, 0x06	; 6
  96:	39 f0       	breq	.+14     	; 0xa6 <main+0x3a>
  98:	88 30       	cpi	r24, 0x08	; 8
  9a:	39 f0       	breq	.+14     	; 0xaa <main+0x3e>
  9c:	0a c0       	rjmp	.+20     	; 0xb2 <main+0x46>
		{
			case 2: BOT=Forward;break;
  9e:	2b bb       	out	0x1b, r18	; 27
  a0:	ef cf       	rjmp	.-34     	; 0x80 <main+0x14>
			case 4: BOT=Left;break;
  a2:	9b bb       	out	0x1b, r25	; 27
  a4:	ed cf       	rjmp	.-38     	; 0x80 <main+0x14>
			case 6: BOT=Right;break;
  a6:	4b bb       	out	0x1b, r20	; 27
  a8:	eb cf       	rjmp	.-42     	; 0x80 <main+0x14>
			case 8: BOT=Backward;break;
  aa:	3b bb       	out	0x1b, r19	; 27
  ac:	e9 cf       	rjmp	.-46     	; 0x80 <main+0x14>
			case 5: BOT=Stop;break;
  ae:	1b ba       	out	0x1b, r1	; 27
  b0:	e7 cf       	rjmp	.-50     	; 0x80 <main+0x14>
			default: BOT=Stop;
  b2:	1b ba       	out	0x1b, r1	; 27
  b4:	e5 cf       	rjmp	.-54     	; 0x80 <main+0x14>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
